digraph "" {
	numpy -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"np(0)" -> numpy	[label=assignedFrom];
	"np(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	pandas -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"pd(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"pd(0)" -> pandas	[label=assignedFrom];
	os -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"os(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"os(0)" -> os	[label=assignedFrom];
	copy -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"copy(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"copy(0)" -> copy	[label=assignedFrom];
	"matplotlib.pyplot" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"plt(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"plt(0)" -> "matplotlib.pyplot"	[label=assignedFrom];
	tqdm -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	tqdm -> tqdm	[label=importedBy];
	tqdm_notebook -> tqdm	[label=importedBy];
	"tqdm_notebook(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"tqdm_notebook(0)" -> tqdm_notebook	[label=assignedFrom];
	"sklearn.preprocessing" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	StandardScaler -> "sklearn.preprocessing"	[label=importedBy];
	"StandardScaler(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"StandardScaler(0)" -> StandardScaler	[label=assignedFrom];
	"sklearn.svm" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	NuSVR -> "sklearn.svm"	[label=importedBy];
	"NuSVR(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"NuSVR(0)" -> NuSVR	[label=assignedFrom];
	SVR -> "sklearn.svm"	[label=importedBy];
	"SVR(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"SVR(0)" -> SVR	[label=assignedFrom];
	"sklearn.metrics" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	mean_absolute_error -> "sklearn.metrics"	[label=importedBy];
	"mean_absolute_error(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"mean_absolute_error(0)" -> mean_absolute_error	[label=assignedFrom];
	"15(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"pd(0)$0" -> pandas	[label=assignedFrom];
	"pd(0)$0" -> "pd(0)"	[label=assignedFrom];
	"pd(0)$0" -> "15(0)"	[label=assignedFrom];
	collections -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	defaultdict -> collections	[label=importedBy];
	"defaultdict(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"defaultdict(0)" -> defaultdict	[label=assignedFrom];
	lightgbm -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"lgb(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"lgb(0)" -> lightgbm	[label=assignedFrom];
	xgboost -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"xgb(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"xgb(0)" -> xgboost	[label=assignedFrom];
	catboost -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"cat(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"cat(0)" -> catboost	[label=assignedFrom];
	time -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"time(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"time(0)" -> time	[label=assignedFrom];
	Counter -> collections	[label=importedBy];
	"Counter(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"Counter(0)" -> Counter	[label=assignedFrom];
	datetime -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"datetime(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"datetime(0)" -> datetime	[label=assignedFrom];
	CatBoostRegressor -> catboost	[label=importedBy];
	"CatBoostRegressor(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"CatBoostRegressor(0)" -> CatBoostRegressor	[label=assignedFrom];
	LabelEncoder -> "sklearn.preprocessing"	[label=importedBy];
	"LabelEncoder(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"LabelEncoder(0)" -> LabelEncoder	[label=assignedFrom];
	"sklearn.model_selection" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	StratifiedKFold -> "sklearn.model_selection"	[label=importedBy];
	"StratifiedKFold(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"StratifiedKFold(0)" -> StratifiedKFold	[label=assignedFrom];
	KFold -> "sklearn.model_selection"	[label=importedBy];
	"KFold(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"KFold(0)" -> KFold	[label=assignedFrom];
	RepeatedKFold -> "sklearn.model_selection"	[label=importedBy];
	"RepeatedKFold(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"RepeatedKFold(0)" -> RepeatedKFold	[label=assignedFrom];
	GroupKFold -> "sklearn.model_selection"	[label=importedBy];
	"GroupKFold(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"GroupKFold(0)" -> GroupKFold	[label=assignedFrom];
	GridSearchCV -> "sklearn.model_selection"	[label=importedBy];
	"GridSearchCV(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"GridSearchCV(0)" -> GridSearchCV	[label=assignedFrom];
	train_test_split -> "sklearn.model_selection"	[label=importedBy];
	"train_test_split(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"train_test_split(0)" -> train_test_split	[label=assignedFrom];
	TimeSeriesSplit -> "sklearn.model_selection"	[label=importedBy];
	"TimeSeriesSplit(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"TimeSeriesSplit(0)" -> TimeSeriesSplit	[label=assignedFrom];
	RepeatedStratifiedKFold -> "sklearn.model_selection"	[label=importedBy];
	"RepeatedStratifiedKFold(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"RepeatedStratifiedKFold(0)" -> RepeatedStratifiedKFold	[label=assignedFrom];
	sklearn -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	metrics -> sklearn	[label=importedBy];
	"metrics(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"metrics(0)" -> metrics	[label=assignedFrom];
	classification_report -> "sklearn.metrics"	[label=importedBy];
	"classification_report(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"classification_report(0)" -> classification_report	[label=assignedFrom];
	confusion_matrix -> "sklearn.metrics"	[label=importedBy];
	"confusion_matrix(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"confusion_matrix(0)" -> confusion_matrix	[label=assignedFrom];
	linear_model -> sklearn	[label=importedBy];
	"linear_model(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"linear_model(0)" -> linear_model	[label=assignedFrom];
	gc -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"gc(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"gc(0)" -> gc	[label=assignedFrom];
	seaborn -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"sns(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"sns(0)" -> seaborn	[label=assignedFrom];
	warnings -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"warnings(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"warnings(0)" -> warnings	[label=assignedFrom];
	"warnings(0)$0" -> "warnings(0)"	[label=filterwarnings];
	"warnings(0)$0" -> "ignore(0)"	[label=filterwarnings];
	"ignore(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	bayes_opt -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	BayesianOptimization -> bayes_opt	[label=importedBy];
	"BayesianOptimization(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"BayesianOptimization(0)" -> BayesianOptimization	[label=assignedFrom];
	eli5 -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"eli5(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"eli5(0)" -> eli5	[label=assignedFrom];
	shap -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"shap(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"shap(0)" -> shap	[label=assignedFrom];
	"IPython.display" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	HTML -> "IPython.display"	[label=importedBy];
	"HTML(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"HTML(0)" -> HTML	[label=assignedFrom];
	json -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"json(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"json(0)" -> json	[label=assignedFrom];
	altair -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"alt(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"alt(0)" -> altair	[label=assignedFrom];
	"category_encoders.ordinal" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	OrdinalEncoder -> "category_encoders.ordinal"	[label=importedBy];
	"OrdinalEncoder(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"OrdinalEncoder(0)" -> OrdinalEncoder	[label=assignedFrom];
	networkx -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"nx(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"nx(0)" -> networkx	[label=assignedFrom];
	typing -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	List -> typing	[label=importedBy];
	"List(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"List(0)" -> List	[label=assignedFrom];
	numba -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	jit -> numba	[label=importedBy];
	"jit(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"jit(0)" -> jit	[label=assignedFrom];
	CatBoostClassifier -> catboost	[label=importedBy];
	"CatBoostClassifier(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"CatBoostClassifier(0)" -> CatBoostClassifier	[label=assignedFrom];
	Any -> typing	[label=importedBy];
	"Any(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"Any(0)" -> Any	[label=assignedFrom];
	itertools -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	product -> itertools	[label=importedBy];
	"product(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"product(0)" -> product	[label=assignedFrom];
	"pd(0)$1" -> "pd(0)$0"	[label=set_option];
	"pd(0)$1" -> "max_rows(0)"	[label=set_option];
	"pd(0)$1" -> "500(0)"	[label=set_option];
	"max_rows(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"500(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	re -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"re(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"re(0)" -> re	[label=assignedFrom];
	"tqdm(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"tqdm(0)" -> tqdm	[label=assignedFrom];
	joblib -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	Parallel -> joblib	[label=importedBy];
	"Parallel(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"Parallel(0)" -> Parallel	[label=assignedFrom];
	delayed -> joblib	[label=importedBy];
	"delayed(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"delayed(0)" -> delayed	[label=assignedFrom];
	"df(1)" -> "add_datepart[0]"	[label=_argToVar];
	"field_name(1)" -> "add_datepart[1]"	[label=_argToVar];
	"prefix(1)" -> "add_datepart[2]"	[label=_argToVar];
	"drop(1)" -> "add_datepart[3]"	[label=_argToVar];
	"time(1)" -> "add_datepart[4]"	[label=_argToVar];
	"date(1)" -> "add_datepart[5]"	[label=_argToVar];
	"field(1)$0" -> "df(1)"	[label=assignedFrom];
	"field(1)$0" -> "field_name(1)"	[label=assignedFrom];
	"prefix(1)$0" -> "field_name(1)"	[label=ifnone];
	"prefix(1)$0" -> "prefix(1)"	[label=ifnone];
	"prefix(1)$0" -> "re(1)"	[label=ifnone];
	"prefix(1)$0" -> "[Dd]ate$(1)"	[label=ifnone];
	"prefix(1)$0" -> "(1)"	[label=ifnone];
	"attr(1)$0" -> "[<_ast.Constant object at 0x7fd50080dd30>, <_ast.Constant object at 0x7fd50080d970>, <_ast.Constant object at 0x7fd50080d370>, <_\
ast.Constant object at 0x7fd50080d040>, <_ast.Constant object at 0x7fd50080d910>, <_ast.Constant object at 0x7fd50080d2e0>, <_ast.Constant \
object at 0x7fd50080da30>](1)"	[label=assignedFrom];
	"attr(1)$1" -> "attr(1)$0"	[label=append];
	"attr(1)$1" -> "Date(1)"	[label=append];
	"attr(1)$2" -> "attr(1)$1"	[label=Add];
	"attr(1)$2" -> "[<_ast.Constant object at 0x7fd50080d3d0>, <_ast.Constant object at 0x7fd50080df10>](1)"	[label=Add];
	"n(1)" -> "attr(1)$2"	[label=iteratorOf];
	"df(1)$0" -> "df(1)"	[label=getattr];
	"df(1)$0" -> "field(1)$0"	[label=getattr];
	"df(1)$0" -> "n(1)"	[label=getattr];
	"df(1)$1" -> "field_name(1)"	[label=drop];
	"df(1)$1" -> "df(1)$0"	[label=drop];
	"a(2)" -> "ifnone[0]"	[label=_argToVar];
	"b(2)" -> "ifnone[1]"	[label=_argToVar];
	"sklearn.base" -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	BaseEstimator -> "sklearn.base"	[label=importedBy];
	"BaseEstimator(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"BaseEstimator(0)" -> BaseEstimator	[label=assignedFrom];
	TransformerMixin -> "sklearn.base"	[label=importedBy];
	"TransformerMixin(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"TransformerMixin(0)" -> TransformerMixin	[label=assignedFrom];
	"a1(3)" -> "qwk[0]"	[label=_argToVar];
	"a2(3)" -> "qwk[1]"	[label=_argToVar];
	"max_rat(3)$0" -> "3(3)"	[label=assignedFrom];
	"a1(3)$0" -> "a1(3)$0"	[label=asarray];
	"a1(3)$0" -> "np(3)"	[label=asarray];
	"a1(3)$0" -> "int(3)"	[label=asarray];
	"a2(3)$0" -> "np(3)"	[label=asarray];
	"a2(3)$0" -> "int(3)"	[label=asarray];
	"a2(3)$0" -> "a2(3)$0"	[label=asarray];
	"hist1(3)$0" -> "max_rat(3)$0"	[label=zeros];
	"hist1(3)$0" -> "np(3)"	[label=zeros];
	"hist1(3)$0" -> "1(3)"	[label=zeros];
	"hist2(3)$0" -> "max_rat(3)$0"	[label=zeros];
	"hist2(3)$0" -> "np(3)"	[label=zeros];
	"hist2(3)$0" -> "1(3)"	[label=zeros];
	"o(3)$0" -> "0(3)"	[label=assignedFrom];
	"k(3)" -> "a1(3)$0"	[label=iteratorOf];
	"k(3)" -> "0(3)"	[label=iteratorOf];
	"k(3)" -> "range(3)"	[label=iteratorOf];
	"i(3)$0" -> "max_rat(3)$0"	[label=iteratorOf];
	"i(3)$0" -> "a1(3)$0"	[label=assignedFrom];
	"i(3)$0" -> "a2(3)$0"	[label=assignedFrom];
	"i(3)$0" -> "1(3)"	[label=iteratorOf];
	"i(3)$0" -> "k(3)"	[label=assignedFrom];
	"i(3)$0" -> "range(3)"	[label=iteratorOf];
	"j(3)$0" -> "max_rat(3)$0"	[label=iteratorOf];
	"j(3)$0" -> "a1(3)$0"	[label=assignedFrom];
	"j(3)$0" -> "a2(3)$0"	[label=assignedFrom];
	"j(3)$0" -> "1(3)"	[label=iteratorOf];
	"j(3)$0" -> "k(3)"	[label=assignedFrom];
	"j(3)$0" -> "range(3)"	[label=iteratorOf];
	"hist1(3)$1" -> "hist1(3)$0"	[label=Add];
	"hist1(3)$1" -> "1(3)"	[label=Add];
	"hist2(3)$1" -> "1(3)"	[label=Add];
	"hist2(3)$1" -> "hist2(3)$0"	[label=Add];
	"o(3)$1" -> "o(3)$0"	[label=Add];
	"o(3)$1" -> "i(3)$0"	[label=Add];
	"o(3)$1" -> "j(3)$0"	[label=Add];
	"e(3)$0" -> "0(3)"	[label=assignedFrom];
	"e(3)$1" -> "i(3)$0"	[label=Add];
	"e(3)$1" -> "j(3)$0"	[label=Add];
	"e(3)$1" -> "hist1(3)$1"	[label=Add];
	"e(3)$1" -> "hist2(3)$1"	[label=Add];
	"e(3)$1" -> "e(3)$0"	[label=Add];
	"e(3)$2" -> "a1(3)$0"	[label=Div];
	"e(3)$2" -> "0(3)"	[label=Div];
	"e(3)$2" -> "e(3)$1"	[label=Div];
	"y_true(4)" -> "eval_qwk_lgb[0]"	[label=_argToVar];
	"y_pred(4)" -> "eval_qwk_lgb[1]"	[label=_argToVar];
	"y_pred(4)$0" -> "y_true(4)"	[label=argmax];
	"y_pred(4)$0" -> "y_pred(4)"	[label=argmax];
	"y_pred(4)$0" -> "len(4)"	[label=argmax];
	"y_pred(4)$0" -> "np(4)"	[label=argmax];
	"y_pred(4)$0" -> "1(4)"	[label=argmax];
	"y_pred(4)$0" -> "0(4)"	[label=argmax];
	"y_true(5)" -> "eval_qwk_lgb_regr[0]"	[label=_argToVar];
	"y_pred(5)" -> "eval_qwk_lgb_regr[1]"	[label=_argToVar];
	"y_pred(5)$0" -> "y_pred(5)"	[label=assignedFrom];
	"y_pred(5)$0" -> "0(5)"	[label=assignedFrom];
	"y_pred(5)$1" -> "y_pred(5)$0"	[label=assignedFrom];
	"y_pred(5)$1" -> "1(5)"	[label=assignedFrom];
	"y_pred(5)$2" -> "y_pred(5)$1"	[label=assignedFrom];
	"y_pred(5)$2" -> "2(5)"	[label=assignedFrom];
	"y_pred(5)$3" -> "y_pred(5)$2"	[label=assignedFrom];
	"y_pred(5)$3" -> "3(5)"	[label=assignedFrom];
	"self(7)" -> "__init__[0]"	[label=_argToVar];
	"self(7)$0" -> "self(7)"	[label=LGBMRegressor];
	"self(7)$0" -> "lgb(7)"	[label=LGBMRegressor];
	"self(8)" -> "fit[0]"	[label=_argToVar];
	"X_train(8)" -> "fit[1]"	[label=_argToVar];
	"y_train(8)" -> "fit[2]"	[label=_argToVar];
	"X_valid(8)" -> "fit[3]"	[label=_argToVar];
	"y_valid(8)" -> "fit[4]"	[label=_argToVar];
	"X_holdout(8)" -> "fit[5]"	[label=_argToVar];
	"y_holdout(8)" -> "fit[6]"	[label=_argToVar];
	"params(8)" -> "fit[7]"	[label=_argToVar];
	"eval_metric(8)$0" -> "eval_qwk_lgb_regr(8)"	[label=assignedFrom];
	"eval_metric(8)$1" -> "auc(8)"	[label=assignedFrom];
	"eval_set(8)$0" -> "[<_ast.Tuple object at 0x7fd4d057dfd0>](8)"	[label=assignedFrom];
	"eval_names(8)$0" -> "[<_ast.Constant object at 0x7fd4d057db80>](8)"	[label=assignedFrom];
	"self(8)$0" -> "self(8)"	[label=set_params];
	"self(8)$0" -> "params(8)"	[label=set_params];
	"eval_set(8)$1" -> "X_valid(8)"	[label=append];
	"eval_set(8)$1" -> "y_valid(8)"	[label=append];
	"eval_set(8)$1" -> "eval_set(8)$0"	[label=append];
	"eval_names(8)$1" -> "eval_names(8)$0"	[label=append];
	"eval_names(8)$1" -> "valid(8)"	[label=append];
	"eval_set(8)$2" -> "X_holdout(8)"	[label=append];
	"eval_set(8)$2" -> "y_holdout(8)"	[label=append];
	"eval_set(8)$2" -> "eval_set(8)$1"	[label=append];
	"eval_names(8)$2" -> "eval_names(8)$1"	[label=append];
	"eval_names(8)$2" -> "holdout(8)"	[label=append];
	"cat_cols(8)$0" -> "X_train(8)"	[label=assignedFrom];
	"cat_cols(8)$0" -> "params(8)"	[label=assignedFrom];
	"cat_cols(8)$0" -> "cat_cols(8)$0"	[label=assignedFrom];
	"cat_cols(8)$0" -> "col(8)"	[label=assignedFrom];
	"categorical_columns(8)$0" -> "params(8)"	[label=assignedFrom];
	"categorical_columns(8)$0" -> "cat_cols(8)$0"	[label=assignedFrom];
	"categorical_columns(8)$1" -> "auto(8)"	[label=assignedFrom];
	"categorical_columns(8)$2" -> "auto(8)"	[label=assignedFrom];
	"self(8)$1" -> "self(8)$0"	[label=fit];
	"self(8)$2" -> "self(8)$1"	[label=assignedFrom];
	"self(8)$3" -> "self(8)$2"	[label=assignedFrom];
	"self(9)" -> "predict[0]"	[label=_argToVar];
	"X_test(9)" -> "predict[1]"	[label=_argToVar];
	"y_pred(10)" -> "eval_qwk_xgb[0]"	[label=_argToVar];
	"y_true(10)" -> "eval_qwk_xgb[1]"	[label=_argToVar];
	"y_true(10)$0" -> "y_true(10)"	[label=get_label];
	"y_pred(10)$0" -> "y_pred(10)"	[label=argmax];
	"y_pred(10)$0" -> "1(10)"	[label=argmax];
	"self(12)" -> "__init__[0]"	[label=_argToVar];
	"self(12)$0" -> "self(12)"	[label=LGBMClassifier];
	"self(12)$0" -> "lgb(12)"	[label=LGBMClassifier];
	"self(13)" -> "fit[0]"	[label=_argToVar];
	"X_train(13)" -> "fit[1]"	[label=_argToVar];
	"y_train(13)" -> "fit[2]"	[label=_argToVar];
	"X_valid(13)" -> "fit[3]"	[label=_argToVar];
	"y_valid(13)" -> "fit[4]"	[label=_argToVar];
	"X_holdout(13)" -> "fit[5]"	[label=_argToVar];
	"y_holdout(13)" -> "fit[6]"	[label=_argToVar];
	"params(13)" -> "fit[7]"	[label=_argToVar];
	"eval_set(13)$0" -> "[<_ast.Tuple object at 0x7fd4c04f62b0>](13)"	[label=assignedFrom];
	"eval_names(13)$0" -> "[<_ast.Constant object at 0x7fd4c04f6a30>](13)"	[label=assignedFrom];
	"self(13)$0" -> "self(13)"	[label=set_params];
	"self(13)$0" -> "params(13)"	[label=set_params];
	"eval_set(13)$1" -> "X_valid(13)"	[label=append];
	"eval_set(13)$1" -> "y_valid(13)"	[label=append];
	"eval_set(13)$1" -> "eval_set(13)$0"	[label=append];
	"eval_names(13)$1" -> "eval_names(13)$0"	[label=append];
	"eval_names(13)$1" -> "valid(13)"	[label=append];
	"eval_set(13)$2" -> "X_holdout(13)"	[label=append];
	"eval_set(13)$2" -> "y_holdout(13)"	[label=append];
	"eval_set(13)$2" -> "eval_set(13)$1"	[label=append];
	"eval_names(13)$2" -> "eval_names(13)$1"	[label=append];
	"eval_names(13)$2" -> "holdout(13)"	[label=append];
	"cat_cols(13)$0" -> "X_train(13)"	[label=assignedFrom];
	"cat_cols(13)$0" -> "params(13)"	[label=assignedFrom];
	"cat_cols(13)$0" -> "cat_cols(13)$0"	[label=assignedFrom];
	"cat_cols(13)$0" -> "col(13)"	[label=assignedFrom];
	"categorical_columns(13)$0" -> "params(13)"	[label=assignedFrom];
	"categorical_columns(13)$0" -> "cat_cols(13)$0"	[label=assignedFrom];
	"categorical_columns(13)$1" -> "auto(13)"	[label=assignedFrom];
	"categorical_columns(13)$2" -> "auto(13)"	[label=assignedFrom];
	"self(13)$1" -> "self(13)$0"	[label=fit];
	"self(13)$2" -> "self(13)$1"	[label=assignedFrom];
	"self(13)$3" -> "self(13)$2"	[label=assignedFrom];
	"self(14)" -> "predict_proba[0]"	[label=_argToVar];
	"X_test(14)" -> "predict_proba[1]"	[label=_argToVar];
	"self(16)" -> "__init__[0]"	[label=_argToVar];
	"self(16)$0" -> "self(16)"	[label=CatBoostClassifier];
	"self(16)$0" -> "cat(16)"	[label=CatBoostClassifier];
	"self(17)" -> "fit[0]"	[label=_argToVar];
	"X_train(17)" -> "fit[1]"	[label=_argToVar];
	"y_train(17)" -> "fit[2]"	[label=_argToVar];
	"X_valid(17)" -> "fit[3]"	[label=_argToVar];
	"y_valid(17)" -> "fit[4]"	[label=_argToVar];
	"X_holdout(17)" -> "fit[5]"	[label=_argToVar];
	"y_holdout(17)" -> "fit[6]"	[label=_argToVar];
	"params(17)" -> "fit[7]"	[label=_argToVar];
	"eval_set(17)$0" -> "[<_ast.Tuple object at 0x7fd4c04ace20>](17)"	[label=assignedFrom];
	"self(17)$0" -> "self(17)"	[label=set_params];
	"self(17)$0" -> "params(17)"	[label=set_params];
	"self(17)$0" -> "k(17)"	[label=set_params];
	"self(17)$0" -> "v(17)"	[label=set_params];
	"self(17)$0" -> "cat_cols(17)"	[label=set_params];
	"eval_set(17)$1" -> "X_valid(17)"	[label=append];
	"eval_set(17)$1" -> "y_valid(17)"	[label=append];
	"eval_set(17)$1" -> "eval_set(17)$0"	[label=append];
	"eval_set(17)$2" -> "X_holdout(17)"	[label=append];
	"eval_set(17)$2" -> "y_holdout(17)"	[label=append];
	"eval_set(17)$2" -> "eval_set(17)$1"	[label=append];
	"cat_cols(17)$0" -> "X_train(17)"	[label=assignedFrom];
	"cat_cols(17)$0" -> "params(17)"	[label=assignedFrom];
	"cat_cols(17)$0" -> "cat_cols(17)$0"	[label=assignedFrom];
	"cat_cols(17)$0" -> "col(17)"	[label=assignedFrom];
	"categorical_columns(17)$0" -> "params(17)"	[label=assignedFrom];
	"categorical_columns(17)$0" -> "cat_cols(17)$0"	[label=assignedFrom];
	"categorical_columns(17)$1" -> "None(17)"	[label=assignedFrom];
	"categorical_columns(17)$2" -> "None(17)"	[label=assignedFrom];
	"self(17)$1" -> "self(17)$0"	[label=fit];
	"self(17)$2" -> "self(17)$1"	[label=assignedFrom];
	"self(17)$3" -> "self(17)$2"	[label=assignedFrom];
	"self(18)" -> "predict_proba[0]"	[label=_argToVar];
	"X_test(18)" -> "predict_proba[1]"	[label=_argToVar];
	"self(20)" -> "__init__[0]"	[label=_argToVar];
	"self(20)$0" -> "self(20)"	[label=XGBClassifier];
	"self(20)$0" -> "xgb(20)"	[label=XGBClassifier];
	"self(21)" -> "fit[0]"	[label=_argToVar];
	"X_train(21)" -> "fit[1]"	[label=_argToVar];
	"y_train(21)" -> "fit[2]"	[label=_argToVar];
	"X_valid(21)" -> "fit[3]"	[label=_argToVar];
	"y_valid(21)" -> "fit[4]"	[label=_argToVar];
	"X_holdout(21)" -> "fit[5]"	[label=_argToVar];
	"y_holdout(21)" -> "fit[6]"	[label=_argToVar];
	"params(21)" -> "fit[7]"	[label=_argToVar];
	"eval_set(21)$0" -> "[<_ast.Tuple object at 0x7fd5009c0730>](21)"	[label=assignedFrom];
	"self(21)$0" -> "self(21)"	[label=set_params];
	"self(21)$0" -> "params(21)"	[label=set_params];
	"eval_set(21)$1" -> "X_valid(21)"	[label=append];
	"eval_set(21)$1" -> "y_valid(21)"	[label=append];
	"eval_set(21)$1" -> "eval_set(21)$0"	[label=append];
	"eval_set(21)$2" -> "X_holdout(21)"	[label=append];
	"eval_set(21)$2" -> "y_holdout(21)"	[label=append];
	"eval_set(21)$2" -> "eval_set(21)$1"	[label=append];
	"self(21)$1" -> "self(21)$0"	[label=fit];
	"scores(21)$0" -> "self(21)$1"	[label=evals_result];
	"self(21)$2" -> "self(21)$1"	[label=assignedFrom];
	"self(21)$2" -> "scores(21)$0"	[label=assignedFrom];
	"self(21)$2" -> "k(21)"	[label=assignedFrom];
	"self(21)$2" -> "m(21)"	[label=assignedFrom];
	"self(21)$2" -> "m_v(21)"	[label=assignedFrom];
	"self(21)$2" -> "1(21)"	[label=assignedFrom];
	"self(21)$2" -> "v(21)"	[label=assignedFrom];
	"self(21)$3" -> "self(21)$2"	[label=assignedFrom];
	"self(21)$3" -> "k(21)"	[label=assignedFrom];
	"self(21)$3" -> "m(21)"	[label=assignedFrom];
	"self(21)$3" -> "v(21)"	[label=assignedFrom];
	"self(21)$3" -> "self(21)$3"	[label=assignedFrom];
	"self(21)$3" -> "cappa(21)"	[label=assignedFrom];
	"self(21)$3" -> "n(21)"	[label=assignedFrom];
	"self(21)$4" -> "self(21)$3"	[label=assignedFrom];
	"self(22)" -> "predict_proba[0]"	[label=_argToVar];
	"X_test(22)" -> "predict_proba[1]"	[label=_argToVar];
	"self(24)" -> "__init__[0]"	[label=_argToVar];
	"convert_cyclical(24)" -> "__init__[1]"	[label=_argToVar];
	"create_interactions(24)" -> "__init__[2]"	[label=_argToVar];
	"n_interactions(24)" -> "__init__[3]"	[label=_argToVar];
	"self(24)$0" -> "self(24)"	[label=assignedFrom];
	"self(24)$0" -> "convert_cyclical(24)"	[label=assignedFrom];
	"self(24)$1" -> "create_interactions(24)"	[label=assignedFrom];
	"self(24)$1" -> "self(24)$0"	[label=assignedFrom];
	"self(24)$2" -> "self(24)$1"	[label=assignedFrom];
	"self(24)$2" -> "None(24)"	[label=assignedFrom];
	"self(24)$3" -> "n_interactions(24)"	[label=assignedFrom];
	"self(24)$3" -> "self(24)$2"	[label=assignedFrom];
	"self(25)" -> "fit[0]"	[label=_argToVar];
	"X(25)" -> "fit[1]"	[label=_argToVar];
	"y(25)" -> "fit[2]"	[label=_argToVar];
	"self(25)$0" -> "self(25)"	[label=assignedFrom];
	"self(25)$0" -> "X(25)"	[label=assignedFrom];
	"self(25)$0" -> "col(25)"	[label=assignedFrom];
	"self(25)$0" -> "sum(25)"	[label=assignedFrom];
	"self(25)$0" -> "mean(25)"	[label=assignedFrom];
	"self(25)$0" -> "max(25)"	[label=assignedFrom];
	"self(25)$0" -> "std(25)"	[label=assignedFrom];
	"self(25)$0" -> "attempt(25)"	[label=assignedFrom];
	"self(25)$1" -> "self(25)$0"	[label=choice];
	"self(25)$1" -> "self(25)$1"	[label=choice];
	"self(25)$1" -> "np(25)"	[label=choice];
	"self(25)$2" -> "self(25)$1"	[label=choice];
	"self(25)$2" -> "np(25)"	[label=choice];
	"self(25)$2" -> "self(25)$2"	[label=choice];
	"self(26)" -> "transform[0]"	[label=_argToVar];
	"X(26)" -> "transform[1]"	[label=_argToVar];
	"y(26)" -> "transform[2]"	[label=_argToVar];
	"data(26)$0" -> "X(26)"	[label=deepcopy];
	"data(26)$0" -> "copy(26)"	[label=deepcopy];
	"col1(26)" -> "self(26)"	[label=iteratorOf];
	"col2(26)" -> "self(26)"	[label=iteratorOf];
	"data(26)$1" -> "data(26)$0"	[label=Mult];
	"data(26)$1" -> "col1(26)"	[label=Mult];
	"data(26)$1" -> "col2(26)"	[label=Mult];
	"data(26)$1" -> "data(26)$1"	[label=Mult];
	"data(26)$2" -> "data(26)$1"	[label=sin];
	"data(26)$2" -> "data(26)$2"	[label=sin];
	"data(26)$2" -> "np(26)"	[label=sin];
	"data(26)$2" -> "2(26)"	[label=sin];
	"data(26)$2" -> "timestampHour(26)"	[label=sin];
	"data(26)$2" -> "23.0(26)"	[label=sin];
	"data(26)$3" -> "data(26)$2"	[label=sin];
	"data(26)$3" -> "np(26)"	[label=sin];
	"data(26)$3" -> "2(26)"	[label=sin];
	"data(26)$3" -> "23.0(26)"	[label=sin];
	"data(26)$3" -> "data(26)$3"	[label=sin];
	"data(26)$3" -> "timestampMonth(26)"	[label=sin];
	"data(26)$4" -> "np(26)"	[label=sin];
	"data(26)$4" -> "2(26)"	[label=sin];
	"data(26)$4" -> "23.0(26)"	[label=sin];
	"data(26)$4" -> "data(26)$3"	[label=sin];
	"data(26)$4" -> "data(26)$4"	[label=sin];
	"data(26)$4" -> "timestampWeek(26)"	[label=sin];
	"data(26)$5" -> "np(26)"	[label=sin];
	"data(26)$5" -> "2(26)"	[label=sin];
	"data(26)$5" -> "23.0(26)"	[label=sin];
	"data(26)$5" -> "data(26)$4"	[label=sin];
	"data(26)$5" -> "data(26)$5"	[label=sin];
	"data(26)$5" -> "timestampMinute(26)"	[label=sin];
	"self(27)" -> "fit_transform[0]"	[label=_argToVar];
	"X(27)" -> "fit_transform[1]"	[label=_argToVar];
	"y(27)" -> "fit_transform[2]"	[label=_argToVar];
	"data(27)$0" -> "X(27)"	[label=deepcopy];
	"data(27)$0" -> "copy(27)"	[label=deepcopy];
	"self(27)$0" -> "self(27)"	[label=fit];
	"self(27)$0" -> "data(27)$0"	[label=fit];
	"self(29)" -> "__init__[0]"	[label=_argToVar];
	"main_cat_features(29)" -> "__init__[1]"	[label=_argToVar];
	"num_cols(29)" -> "__init__[2]"	[label=_argToVar];
	"self(29)$0" -> "self(29)"	[label=assignedFrom];
	"self(29)$0" -> "main_cat_features(29)"	[label=assignedFrom];
	"self(29)$1" -> "num_cols(29)"	[label=assignedFrom];
	"self(29)$1" -> "self(29)$0"	[label=assignedFrom];
	"self(30)" -> "fit[0]"	[label=_argToVar];
	"X(30)" -> "fit[1]"	[label=_argToVar];
	"y(30)" -> "fit[2]"	[label=_argToVar];
	"self(31)" -> "transform[0]"	[label=_argToVar];
	"X(31)" -> "transform[1]"	[label=_argToVar];
	"y(31)" -> "transform[2]"	[label=_argToVar];
	"data(31)$0" -> "X(31)"	[label=deepcopy];
	"data(31)$0" -> "copy(31)"	[label=deepcopy];
	"self(32)" -> "fit_transform[0]"	[label=_argToVar];
	"X(32)" -> "fit_transform[1]"	[label=_argToVar];
	"y(32)" -> "fit_transform[2]"	[label=_argToVar];
	"data(32)$0" -> "X(32)"	[label=deepcopy];
	"data(32)$0" -> "copy(32)"	[label=deepcopy];
	"self(32)$0" -> "self(32)"	[label=fit];
	"self(32)$0" -> "data(32)$0"	[label=fit];
	"self(34)" -> "__init__[0]"	[label=_argToVar];
	"columns(34)" -> "__init__[1]"	[label=_argToVar];
	"model_wrapper(34)" -> "__init__[2]"	[label=_argToVar];
	"self(34)$0" -> "self(34)"	[label=assignedFrom];
	"self(34)$0" -> "columns(34)"	[label=assignedFrom];
	"self(34)$1" -> "model_wrapper(34)"	[label=assignedFrom];
	"self(34)$1" -> "self(34)$0"	[label=assignedFrom];
	"self(34)$2" -> "self(34)$1"	[label=assignedFrom];
	"self(34)$2" -> "False(34)"	[label=assignedFrom];
	"self(34)$3" -> "self(34)$2"	[label=assignedFrom];
	"self(34)$3" -> "None(34)"	[label=assignedFrom];
	"self(35)" -> "fit[0]"	[label=_argToVar];
	"X(35)" -> "fit[1]"	[label=_argToVar];
	"y(35)" -> "fit[2]"	[label=_argToVar];
	"X_holdout(35)" -> "fit[3]"	[label=_argToVar];
	"y_holdout(35)" -> "fit[4]"	[label=_argToVar];
	"folds(35)" -> "fit[5]"	[label=_argToVar];
	"params(35)" -> "fit[6]"	[label=_argToVar];
	"eval_metric(35)" -> "fit[7]"	[label=_argToVar];
	"cols_to_drop(35)" -> "fit[8]"	[label=_argToVar];
	"preprocesser(35)" -> "fit[9]"	[label=_argToVar];
	"transformers(35)" -> "fit[10]"	[label=_argToVar];
	"adversarial(35)" -> "fit[11]"	[label=_argToVar];
	"plot(35)" -> "fit[12]"	[label=_argToVar];
	"folds(35)$0" -> "3(35)"	[label=KFold];
	"folds(35)$0" -> "42(35)"	[label=KFold];
	"self(35)$0" -> "self(35)"	[label=assignedFrom];
	"self(35)$0" -> "True(35)"	[label=assignedFrom];
	"self(35)$1" -> "X(35)"	[label=assignedFrom];
	"self(35)$1" -> "self(35)$0"	[label=assignedFrom];
	"self(35)$1" -> "self(35)$1"	[label=assignedFrom];
	"self(35)$1" -> "None(35)"	[label=assignedFrom];
	"self(35)$2" -> "self(35)$1"	[label=DataFrame];
	"self(35)$2" -> "pd(35)"	[label=DataFrame];
	"self(35)$2" -> "[<_ast.Constant object at 0x7fd4c04d0e20>, <_ast.Constant object at 0x7fd4c04d0df0>](35)"	[label=DataFrame];
	"self(35)$3" -> "transformers(35)"	[label=assignedFrom];
	"self(35)$3" -> "self(35)$2"	[label=assignedFrom];
	"self(35)$3" -> "k(35)"	[label=assignedFrom];
	"self(35)$3" -> "[](35)"	[label=assignedFrom];
	"self(35)$4" -> "transformers(35)"	[label=assignedFrom];
	"self(35)$4" -> "self(35)$3"	[label=assignedFrom];
	"self(35)$5" -> "[](35)"	[label=assignedFrom];
	"self(35)$5" -> "self(35)$4"	[label=assignedFrom];
	"self(35)$6" -> "eval_metric(35)"	[label=assignedFrom];
	"self(35)$6" -> "self(35)$5"	[label=assignedFrom];
	"n_target(35)$0" -> "1(35)"	[label=assignedFrom];
	"self(35)$7" -> "X(35)"	[label=zeros];
	"self(35)$7" -> "self(35)$6"	[label=zeros];
	"self(35)$7" -> "n_target(35)$0"	[label=zeros];
	"self(35)$7" -> "np(35)"	[label=zeros];
	"self(35)$7" -> "len(35)"	[label=zeros];
	"self(35)$8" -> "n_target(35)$0"	[label=assignedFrom];
	"self(35)$8" -> "self(35)$7"	[label=assignedFrom];
	"X(35)$0" -> "X(35)"	[label=assignedFrom];
	"X(35)$0" -> "self(35)$8"	[label=assignedFrom];
	"X_holdout(35)$0" -> "X_holdout(35)"	[label=assignedFrom];
	"X_holdout(35)$0" -> "self(35)$8"	[label=assignedFrom];
	"self(35)$9" -> "preprocesser(35)"	[label=assignedFrom];
	"self(35)$9" -> "self(35)$8"	[label=assignedFrom];
	"self(35)$10" -> "y(35)"	[label=fit];
	"self(35)$10" -> "X(35)$0"	[label=fit];
	"self(35)$10" -> "self(35)$9"	[label=fit];
	"X(35)$1" -> "y(35)"	[label=transform];
	"X(35)$1" -> "self(35)$10"	[label=transform];
	"X(35)$1" -> "X(35)$1"	[label=transform];
	"self(35)$11" -> "self(35)$10"	[label=tolist];
	"self(35)$11" -> "X(35)$1"	[label=tolist];
	"X_holdout(35)$1" -> "self(35)$11"	[label=transform];
	"X_holdout(35)$1" -> "X_holdout(35)$1"	[label=transform];
	"fold_n(35)" -> "y(35)"	[label=iteratorOf];
	"fold_n(35)" -> "folds(35)$0"	[label=iteratorOf];
	"fold_n(35)" -> "X(35)$1"	[label=iteratorOf];
	"fold_n(35)" -> "enumerate(35)"	[label=iteratorOf];
	"fold_n(35)" -> "installation_id(35)"	[label=iteratorOf];
	"train_index(35)" -> "y(35)"	[label=iteratorOf];
	"train_index(35)" -> "folds(35)$0"	[label=iteratorOf];
	"train_index(35)" -> "X(35)$1"	[label=iteratorOf];
	"train_index(35)" -> "enumerate(35)"	[label=iteratorOf];
	"train_index(35)" -> "installation_id(35)"	[label=iteratorOf];
	"valid_index(35)" -> "y(35)"	[label=iteratorOf];
	"valid_index(35)" -> "folds(35)$0"	[label=iteratorOf];
	"valid_index(35)" -> "X(35)$1"	[label=iteratorOf];
	"valid_index(35)" -> "enumerate(35)"	[label=iteratorOf];
	"valid_index(35)" -> "installation_id(35)"	[label=iteratorOf];
	"X_hold(35)$0" -> "X_holdout(35)$1"	[label=copy];
	"X_hold(35)$1" -> "None(35)"	[label=assignedFrom];
	"print[501/16]" -> "1(35)"	[label=print];
	"print[501/16]" -> "fold_n(35)"	[label=print];
	"print[501/16]" -> "Fold (35)"	[label=print];
	"print[501/16]" -> " started at (35)"	[label=print];
	"print[501/16]" -> "time(35)"	[label=print];
	"X_train(35)$0" -> "X(35)$1"	[label=assignedFrom];
	"X_train(35)$0" -> "train_index(35)"	[label=assignedFrom];
	"X_train(35)$0" -> "valid_index(35)"	[label=assignedFrom];
	"X_valid(35)$0" -> "X(35)$1"	[label=assignedFrom];
	"X_valid(35)$0" -> "train_index(35)"	[label=assignedFrom];
	"X_valid(35)$0" -> "valid_index(35)"	[label=assignedFrom];
	"y_train(35)$0" -> "y(35)"	[label=assignedFrom];
	"y_train(35)$0" -> "train_index(35)"	[label=assignedFrom];
	"y_train(35)$0" -> "valid_index(35)"	[label=assignedFrom];
	"y_valid(35)$0" -> "y(35)"	[label=assignedFrom];
	"y_valid(35)$0" -> "train_index(35)"	[label=assignedFrom];
	"y_valid(35)$0" -> "valid_index(35)"	[label=assignedFrom];
	"X_train(35)$1" -> "X(35)$1"	[label=assignedFrom];
	"X_train(35)$1" -> "self(35)$11"	[label=assignedFrom];
	"y_train(35)$1" -> "y(35)"	[label=assignedFrom];
	"X_valid(35)$1" -> "None(35)"	[label=assignedFrom];
	"y_valid(35)$1" -> "None(35)"	[label=assignedFrom];
	"datasets(35)$0" -> "X_holdout(35)$1"	[label=assignedFrom];
	"datasets(35)$0" -> "X_hold(35)$1"	[label=assignedFrom];
	"datasets(35)$0" -> "X_train(35)$1"	[label=assignedFrom];
	"datasets(35)$0" -> "y_train(35)$1"	[label=assignedFrom];
	"datasets(35)$0" -> "X_valid(35)$1"	[label=assignedFrom];
	"X_train(35)$2" -> "cols_to_drop(35)"	[label=transform_];
	"X_train(35)$2" -> "self(35)$11"	[label=transform_];
	"X_train(35)$2" -> "datasets(35)$0"	[label=transform_];
	"X_valid(35)$2" -> "cols_to_drop(35)"	[label=transform_];
	"X_valid(35)$2" -> "self(35)$11"	[label=transform_];
	"X_valid(35)$2" -> "datasets(35)$0"	[label=transform_];
	"X_hold(35)$2" -> "cols_to_drop(35)"	[label=transform_];
	"X_hold(35)$2" -> "self(35)$11"	[label=transform_];
	"X_hold(35)$2" -> "datasets(35)$0"	[label=transform_];
	"self(35)$12" -> "self(35)$11"	[label=tolist];
	"self(35)$12" -> "X_train(35)$2"	[label=tolist];
	"model(35)$0" -> "self(35)$12"	[label=deepcopy];
	"model(35)$0" -> "copy(35)"	[label=deepcopy];
	"X_new1(35)$0" -> "X_train(35)$2"	[label=copy];
	"X_new2(35)$0" -> "X_valid(35)$2"	[label=copy];
	"X_new2(35)$1" -> "X_holdout(35)$1"	[label=copy];
	"X_new(35)$0" -> "pd(35)"	[label=concat];
	"X_new(35)$0" -> "[<_ast.Name object at 0x7fd4c04c4850>, <_ast.Name object at 0x7fd4c04c4880>](35)"	[label=concat];
	"X_new(35)$0" -> "0(35)"	[label=concat];
	"y_new(35)$0" -> "np(35)"	[label=hstack];
	"y_new(35)$0" -> "X_new1(35)$0"	[label=hstack];
	"y_new(35)$0" -> "X_new2(35)$1"	[label=hstack];
	"y_new(35)$0" -> "0(35)"	[label=hstack];
	"X_train(35)$3" -> "X_new(35)$0"	[label=train_test_split];
	"X_train(35)$3" -> "y_new(35)$0"	[label=train_test_split];
	"X_valid(35)$3" -> "X_new(35)$0"	[label=train_test_split];
	"X_valid(35)$3" -> "y_new(35)$0"	[label=train_test_split];
	"y_train(35)$2" -> "X_new(35)$0"	[label=train_test_split];
	"y_train(35)$2" -> "y_new(35)$0"	[label=train_test_split];
	"y_valid(35)$2" -> "X_new(35)$0"	[label=train_test_split];
	"y_valid(35)$2" -> "y_new(35)$0"	[label=train_test_split];
	"model(35)$1" -> "y_holdout(35)"	[label=fit];
	"model(35)$1" -> "X_hold(35)$2"	[label=fit];
	"model(35)$1" -> "model(35)$0"	[label=fit];
	"model(35)$1" -> "X_train(35)$3"	[label=fit];
	"model(35)$1" -> "X_valid(35)$3"	[label=fit];
	"model(35)$1" -> "y_train(35)$2"	[label=fit];
	"model(35)$1" -> "y_valid(35)$2"	[label=fit];
	"self(35)$13" -> "self(35)$12"	[label=assignedFrom];
	"self(35)$13" -> "model(35)$1"	[label=assignedFrom];
	"self(35)$14" -> "1(35)"	[label=zeros];
	"self(35)$14" -> "np(35)"	[label=zeros];
	"self(35)$14" -> "X(35)$1"	[label=zeros];
	"self(35)$14" -> "0(35)"	[label=zeros];
	"self(35)$14" -> "self(35)$13"	[label=zeros];
	"self(35)$14" -> "self(35)$14"	[label=zeros];
	"self(35)$15" -> "n_target(35)$0"	[label=reshape];
	"self(35)$15" -> "1(35)"	[label=reshape];
	"self(35)$15" -> "X_valid(35)$3"	[label=reshape];
	"self(35)$15" -> "model(35)$1"	[label=reshape];
	"self(35)$15" -> "self(35)$14"	[label=reshape];
	"fold_importance(35)$0" -> "pd(35)"	[label=DataFrame];
	"fold_importance(35)$0" -> "X_train(35)$3"	[label=DataFrame];
	"fold_importance(35)$0" -> "model(35)$1"	[label=DataFrame];
	"fold_importance(35)$0" -> "list(35)"	[label=DataFrame];
	"fold_importance(35)$0" -> "zip(35)"	[label=DataFrame];
	"fold_importance(35)$0" -> "[<_ast.Constant object at 0x7fd5008191f0>, <_ast.Constant object at 0x7fd500819220>](35)"	[label=DataFrame];
	"self(35)$16" -> "self(35)$15"	[label=append];
	"self(35)$16" -> "fold_importance(35)$0"	[label=append];
	"self(35)$17" -> "model(35)$1"	[label=append];
	"self(35)$17" -> "self(35)$16"	[label=append];
	"self(35)$18" -> "self(35)$17"	[label=astype];
	"self(35)$18" -> "importance(35)"	[label=astype];
	"self(35)$18" -> "int(35)"	[label=astype];
	"self(35)$19" -> "self(35)$18"	[label=calc_scores_];
	"fig(35)$0" -> "plt(35)"	[label=subplots];
	"fig(35)$0" -> "16(35)"	[label=subplots];
	"fig(35)$0" -> "12(35)"	[label=subplots];
	"ax(35)$0" -> "plt(35)"	[label=subplots];
	"ax(35)$0" -> "16(35)"	[label=subplots];
	"ax(35)$0" -> "12(35)"	[label=subplots];
	"plt(35)$0" -> "1(35)"	[label=subplot];
	"plt(35)$0" -> "plt(35)"	[label=subplot];
	"plt(35)$0" -> "2(35)"	[label=subplot];
	"self(35)$20" -> "self(35)$19"	[label=plot_feature_importance];
	"plt(35)$1" -> "plt(35)$0"	[label=subplot];
	"plt(35)$1" -> "2(35)"	[label=subplot];
	"self(35)$21" -> "self(35)$20"	[label=plot_metric];
	"plt(35)$2" -> "3(35)"	[label=subplot];
	"plt(35)$2" -> "2(35)"	[label=subplot];
	"plt(35)$2" -> "plt(35)$1"	[label=subplot];
	"plt(35)$3" -> "y(35)"	[label=hist];
	"plt(35)$3" -> "1(35)"	[label=hist];
	"plt(35)$3" -> "self(35)$21"	[label=hist];
	"plt(35)$3" -> "plt(35)$2"	[label=hist];
	"plt(35)$4" -> "plt(35)$3"	[label=title];
	"plt(35)$4" -> "Distribution of errors(35)"	[label=title];
	"plt(35)$5" -> "2(35)"	[label=subplot];
	"plt(35)$5" -> "plt(35)$4"	[label=subplot];
	"plt(35)$5" -> "4(35)"	[label=subplot];
	"plt(35)$6" -> "self(35)$21"	[label=hist];
	"plt(35)$6" -> "plt(35)$5"	[label=hist];
	"plt(35)$7" -> "plt(35)$6"	[label=title];
	"plt(35)$7" -> "Distribution of oof predictions(35)"	[label=title];
	"self(36)" -> "transform_[0]"	[label=_argToVar];
	"datasets(36)" -> "transform_[1]"	[label=_argToVar];
	"cols_to_drop(36)" -> "transform_[2]"	[label=_argToVar];
	"name(36)" -> "self(36)"	[label=iteratorOf];
	"transformer(36)" -> "self(36)"	[label=iteratorOf];
	"transformer(36)$0" -> "datasets(36)"	[label=fit];
	"transformer(36)$0" -> "transformer(36)"	[label=fit];
	"transformer(36)$0" -> "X_train(36)"	[label=fit];
	"transformer(36)$0" -> "y_train(36)"	[label=fit];
	"datasets(36)$0" -> "datasets(36)"	[label=transform];
	"datasets(36)$0" -> "transformer(36)$0"	[label=transform];
	"datasets(36)$0" -> "X_train(36)"	[label=transform];
	"datasets(36)$0" -> "datasets(36)$0"	[label=transform];
	"datasets(36)$1" -> "transformer(36)$0"	[label=transform];
	"datasets(36)$1" -> "datasets(36)$0"	[label=transform];
	"datasets(36)$1" -> "datasets(36)$1"	[label=transform];
	"datasets(36)$1" -> "X_valid(36)"	[label=transform];
	"datasets(36)$2" -> "transformer(36)$0"	[label=transform];
	"datasets(36)$2" -> "datasets(36)$1"	[label=transform];
	"datasets(36)$2" -> "datasets(36)$2"	[label=transform];
	"datasets(36)$2" -> "X_holdout(36)"	[label=transform];
	"self(36)$0" -> "self(36)"	[label=append];
	"self(36)$0" -> "transformer(36)$0"	[label=append];
	"cols_to_drop(36)$0" -> "X_train(36)"	[label=assignedFrom];
	"cols_to_drop(36)$0" -> "datasets(36)$2"	[label=assignedFrom];
	"cols_to_drop(36)$0" -> "cols_to_drop(36)$0"	[label=assignedFrom];
	"cols_to_drop(36)$0" -> "col(36)"	[label=assignedFrom];
	"datasets(36)$3" -> "X_train(36)"	[label=drop];
	"datasets(36)$3" -> "datasets(36)$2"	[label=drop];
	"datasets(36)$3" -> "cols_to_drop(36)$0"	[label=drop];
	"datasets(36)$3" -> "1(36)"	[label=drop];
	"datasets(36)$4" -> "X_valid(36)"	[label=drop];
	"datasets(36)$4" -> "cols_to_drop(36)$0"	[label=drop];
	"datasets(36)$4" -> "datasets(36)$3"	[label=drop];
	"datasets(36)$4" -> "1(36)"	[label=drop];
	"datasets(36)$5" -> "X_holdout(36)"	[label=drop];
	"datasets(36)$5" -> "cols_to_drop(36)$0"	[label=drop];
	"datasets(36)$5" -> "1(36)"	[label=drop];
	"datasets(36)$5" -> "datasets(36)$4"	[label=drop];
	"self(36)$1" -> "self(36)$0"	[label=assignedFrom];
	"self(36)$1" -> "cols_to_drop(36)$0"	[label=assignedFrom];
	"self(37)" -> "calc_scores_[0]"	[label=_argToVar];
	"datasets(37)$0" -> "self(37)"	[label=assignedFrom];
	"datasets(37)$0" -> "k(37)"	[label=assignedFrom];
	"datasets(37)$0" -> "v(37)"	[label=assignedFrom];
	"datasets(37)$0" -> "scores(37)"	[label=assignedFrom];
	"datasets(37)$0" -> "0(37)"	[label=assignedFrom];
	"datasets(37)$0" -> "len(37)"	[label=assignedFrom];
	"d(37)" -> "datasets(37)$0"	[label=iteratorOf];
	"scores(37)$0" -> "self(37)"	[label=assignedFrom];
	"scores(37)$0" -> "k(37)"	[label=assignedFrom];
	"scores(37)$0" -> "v(37)"	[label=assignedFrom];
	"scores(37)$0" -> "d(37)"	[label=assignedFrom];
	"scores(37)$0" -> "scores(37)$0"	[label=assignedFrom];
	"print[588/12]" -> "d(37)"	[label=print];
	"print[588/12]" -> "scores(37)$0"	[label=print];
	"print[588/12]" -> "CV mean score on (37)"	[label=print];
	"print[588/12]" -> ": (37)"	[label=print];
	"print[588/12]" -> "np(37)"	[label=print];
	"print[588/12]" -> ".4f(37)"	[label=print];
	"print[588/12]" -> " +/- (37)"	[label=print];
	"print[588/12]" -> " std.(37)"	[label=print];
	"self(37)$0" -> "self(37)"	[label=mean];
	"self(37)$0" -> "scores(37)$0"	[label=mean];
	"self(37)$0" -> "np(37)"	[label=mean];
	"self(38)" -> "predict[0]"	[label=_argToVar];
	"X_test(38)" -> "predict[1]"	[label=_argToVar];
	"averaging(38)" -> "predict[2]"	[label=_argToVar];
	"full_prediction(38)$0" -> "self(38)"	[label=zeros];
	"full_prediction(38)$0" -> "X_test(38)"	[label=zeros];
	"full_prediction(38)$0" -> "np(38)"	[label=zeros];
	"full_prediction(38)$0" -> "0(38)"	[label=zeros];
	"full_prediction(38)$0" -> "1(38)"	[label=zeros];
	"X_test(38)$0" -> "self(38)"	[label=transform];
	"X_test(38)$0" -> "X_test(38)$0"	[label=transform];
	"i(38)" -> "self(38)"	[label=iteratorOf];
	"i(38)" -> "range(38)"	[label=iteratorOf];
	"i(38)" -> "len(38)"	[label=iteratorOf];
	"X_t(38)$0" -> "X_test(38)$0"	[label=copy];
	"name(38)" -> "self(38)"	[label=iteratorOf];
	"transformers(38)" -> "self(38)"	[label=iteratorOf];
	"X_t(38)$1" -> "i(38)"	[label=transform];
	"X_t(38)$1" -> "transformers(38)"	[label=transform];
	"X_t(38)$1" -> "X_t(38)$1"	[label=transform];
	"cols_to_drop(38)$0" -> "self(38)"	[label=assignedFrom];
	"cols_to_drop(38)$0" -> "X_t(38)$1"	[label=assignedFrom];
	"cols_to_drop(38)$0" -> "col(38)"	[label=assignedFrom];
	"X_t(38)$2" -> "1(38)"	[label=drop];
	"X_t(38)$2" -> "X_t(38)$1"	[label=drop];
	"X_t(38)$2" -> "cols_to_drop(38)$0"	[label=drop];
	"y_pred(38)$0" -> "self(38)"	[label=reshape];
	"y_pred(38)$0" -> "full_prediction(38)$0"	[label=reshape];
	"y_pred(38)$0" -> "1(38)"	[label=reshape];
	"y_pred(38)$0" -> "i(38)"	[label=reshape];
	"y_pred(38)$0" -> "X_t(38)$2"	[label=reshape];
	"y_pred(38)$0" -> "columns(38)"	[label=reshape];
	"full_prediction(38)$1" -> "self(38)"	[label=zeros];
	"full_prediction(38)$1" -> "np(38)"	[label=zeros];
	"full_prediction(38)$1" -> "0(38)"	[label=zeros];
	"full_prediction(38)$1" -> "1(38)"	[label=zeros];
	"full_prediction(38)$1" -> "y_pred(38)$0"	[label=zeros];
	"full_prediction(38)$2" -> "y_pred(38)$0"	[label=Add];
	"full_prediction(38)$2" -> "full_prediction(38)$1"	[label=Add];
	"full_prediction(38)$3" -> "y_pred(38)$0"	[label=Add];
	"full_prediction(38)$3" -> "full_prediction(38)$2"	[label=Add];
	"full_prediction(38)$3" -> "pd(38)"	[label=Add];
	"self(39)" -> "plot_feature_importance[0]"	[label=_argToVar];
	"drop_null_importance(39)" -> "plot_feature_importance[1]"	[label=_argToVar];
	"top_n(39)" -> "plot_feature_importance[2]"	[label=_argToVar];
	"top_feats(39)$0" -> "self(39)"	[label=get_top_features];
	"top_feats(39)$0" -> "drop_null_importance(39)"	[label=get_top_features];
	"top_feats(39)$0" -> "top_n(39)"	[label=get_top_features];
	"feature_importances(39)$0" -> "self(39)"	[label=assignedFrom];
	"feature_importances(39)$0" -> "top_feats(39)$0"	[label=assignedFrom];
	"feature_importances(39)$0" -> "feature(39)"	[label=assignedFrom];
	"feature_importances(39)$1" -> "feature_importances(39)$0"	[label=astype];
	"feature_importances(39)$1" -> "feature(39)"	[label=astype];
	"feature_importances(39)$1" -> "str(39)"	[label=astype];
	"top_feats(39)$1" -> "str(39)"	[label=assignedFrom];
	"top_feats(39)$1" -> "top_feats(39)$1"	[label=assignedFrom];
	"top_feats(39)$1" -> "i(39)"	[label=assignedFrom];
	"sns(39)$0" -> "sns(39)"	[label=barplot];
	"plt(39)$0" -> "plt(39)"	[label=title];
	"plt(39)$0" -> "Feature importances(39)"	[label=title];
	"self(40)" -> "get_top_features[0]"	[label=_argToVar];
	"drop_null_importance(40)" -> "get_top_features[1]"	[label=_argToVar];
	"top_n(40)" -> "get_top_features[2]"	[label=_argToVar];
	"grouped_feats(40)$0" -> "self(40)"	[label=mean];
	"grouped_feats(40)$0" -> "[<_ast.Constant object at 0x7fd4c059c190>](40)"	[label=mean];
	"grouped_feats(40)$0" -> "importance(40)"	[label=mean];
	"grouped_feats(40)$1" -> "grouped_feats(40)$0"	[label=assignedFrom];
	"grouped_feats(40)$1" -> "grouped_feats(40)$1"	[label=assignedFrom];
	"grouped_feats(40)$1" -> "0(40)"	[label=assignedFrom];
	"self(41)" -> "plot_metric[0]"	[label=_argToVar];
	"full_evals_results(41)$0" -> "pd(41)"	[label=DataFrame];
	"model(41)" -> "self(41)"	[label=iteratorOf];
	"evals_result(41)$0" -> "pd(41)"	[label=DataFrame];
	"k(41)" -> "model(41)"	[label=iteratorOf];
	"evals_result(41)$1" -> "self(41)"	[label=assignedFrom];
	"evals_result(41)$1" -> "model(41)"	[label=assignedFrom];
	"evals_result(41)$1" -> "evals_result(41)$0"	[label=assignedFrom];
	"evals_result(41)$1" -> "k(41)"	[label=assignedFrom];
	"evals_result(41)$2" -> "evals_result(41)$1"	[label=rename];
	"evals_result(41)$2" -> "index(41)"	[label=rename];
	"evals_result(41)$2" -> "iteration(41)"	[label=rename];
	"full_evals_results(41)$1" -> "full_evals_results(41)$0"	[label=append];
	"full_evals_results(41)$1" -> "evals_result(41)$2"	[label=append];
	"full_evals_results(41)$2" -> "self(41)"	[label=rename];
	"full_evals_results(41)$2" -> "full_evals_results(41)$1"	[label=rename];
	"full_evals_results(41)$2" -> "[<_ast.Constant object at 0x7fd4c05a3550>](41)"	[label=rename];
	"full_evals_results(41)$2" -> "value(41)"	[label=rename];
	"full_evals_results(41)$2" -> "variable(41)"	[label=rename];
	"full_evals_results(41)$2" -> "dataset(41)"	[label=rename];
	"sns(41)$0" -> "sns(41)"	[label=lineplot];
	"plt(41)$0" -> "plt(41)"	[label=title];
	"plt(41)$0" -> "Training progress(41)"	[label=title];
	"self(43)" -> "__init__[0]"	[label=_argToVar];
	"cat_cols(43)" -> "__init__[1]"	[label=_argToVar];
	"drop_original(43)" -> "__init__[2]"	[label=_argToVar];
	"encoder(43)" -> "__init__[3]"	[label=_argToVar];
	"self(43)$0" -> "self(43)"	[label=assignedFrom];
	"self(43)$0" -> "cat_cols(43)"	[label=assignedFrom];
	"self(43)$1" -> "drop_original(43)"	[label=assignedFrom];
	"self(43)$1" -> "self(43)$0"	[label=assignedFrom];
	"self(43)$2" -> "encoder(43)"	[label=assignedFrom];
	"self(43)$2" -> "self(43)$1"	[label=assignedFrom];
	"self(44)" -> "fit[0]"	[label=_argToVar];
	"X(44)" -> "fit[1]"	[label=_argToVar];
	"y(44)" -> "fit[2]"	[label=_argToVar];
	"kinds(44)$0" -> "X(44)"	[label=array];
	"kinds(44)$0" -> "np(44)"	[label=array];
	"kinds(44)$0" -> "dt(44)"	[label=array];
	"is_cat(44)$0" -> "kinds(44)$0"	[label=assignedFrom];
	"is_cat(44)$0" -> "O(44)"	[label=assignedFrom];
	"self(44)$0" -> "self(44)"	[label=list];
	"self(44)$0" -> "X(44)"	[label=list];
	"self(44)$0" -> "is_cat(44)$0"	[label=list];
	"self(44)$1" -> "self(44)$0"	[label=set_params];
	"self(44)$2" -> "self(44)$1"	[label=set_params];
	"self(44)$3" -> "X(44)"	[label=fit];
	"self(44)$3" -> "y(44)"	[label=fit];
	"self(44)$3" -> "self(44)$2"	[label=fit];
	"self(44)$3" -> "self(44)$3"	[label=fit];
	"self(44)$4" -> "X(44)"	[label=fit];
	"self(44)$4" -> "y(44)"	[label=fit];
	"self(44)$4" -> "self(44)$3"	[label=fit];
	"self(44)$4" -> "self(44)$4"	[label=fit];
	"self(45)" -> "transform[0]"	[label=_argToVar];
	"X(45)" -> "transform[1]"	[label=_argToVar];
	"y(45)" -> "transform[2]"	[label=_argToVar];
	"data(45)$0" -> "X(45)"	[label=deepcopy];
	"data(45)$0" -> "copy(45)"	[label=deepcopy];
	"new_cat_names(45)$0" -> "self(45)"	[label=assignedFrom];
	"new_cat_names(45)$0" -> "col(45)"	[label=assignedFrom];
	"new_cat_names(45)$0" -> "_encoded(45)"	[label=assignedFrom];
	"encoded_data(45)$0" -> "self(45)"	[label=transform];
	"encoded_data(45)$0" -> "data(45)$0"	[label=transform];
	"data(45)$1" -> "data(45)$0"	[label=assignedFrom];
	"data(45)$1" -> "encoded_data(45)$0"	[label=assignedFrom];
	"data(45)$2" -> "self(45)"	[label=drop];
	"data(45)$2" -> "data(45)$1"	[label=drop];
	"data(45)$2" -> "1(45)"	[label=drop];
	"data(45)$3" -> "self(45)"	[label=transform];
	"data(45)$3" -> "data(45)$2"	[label=transform];
	"data(45)$3" -> "data(45)$3"	[label=transform];
	"self(46)" -> "fit_transform[0]"	[label=_argToVar];
	"X(46)" -> "fit_transform[1]"	[label=_argToVar];
	"y(46)" -> "fit_transform[2]"	[label=_argToVar];
	"data(46)$0" -> "X(46)"	[label=deepcopy];
	"data(46)$0" -> "copy(46)"	[label=deepcopy];
	"self(46)$0" -> "self(46)"	[label=fit];
	"self(46)$0" -> "data(46)$0"	[label=fit];
	"print[722/4]" -> "Reading train.csv file....(47)"	[label=print];
	"train(47)$0" -> "pd(47)"	[label=read_csv];
	"train(47)$0" -> "/kaggle/input/data-science-bowl-2019/train.csv(47)"	[label=read_csv];
	"print[724/4]" -> "train(47)$0"	[label=print];
	"print[724/4]" -> "Training.csv file have {} rows and {} columns(47)"	[label=print];
	"print[724/4]" -> "0(47)"	[label=print];
	"print[724/4]" -> "1(47)"	[label=print];
	"print[726/4]" -> "Reading test.csv file....(47)"	[label=print];
	"test(47)$0" -> "pd(47)"	[label=read_csv];
	"test(47)$0" -> "/kaggle/input/data-science-bowl-2019/test.csv(47)"	[label=read_csv];
	"print[728/4]" -> "0(47)"	[label=print];
	"print[728/4]" -> "1(47)"	[label=print];
	"print[728/4]" -> "test(47)$0"	[label=print];
	"print[728/4]" -> "Test.csv file have {} rows and {} columns(47)"	[label=print];
	"print[730/4]" -> "Reading train_labels.csv file....(47)"	[label=print];
	"train_labels(47)$0" -> "pd(47)"	[label=read_csv];
	"train_labels(47)$0" -> "/kaggle/input/data-science-bowl-2019/train_labels.csv(47)"	[label=read_csv];
	"print[732/4]" -> "0(47)"	[label=print];
	"print[732/4]" -> "1(47)"	[label=print];
	"print[732/4]" -> "train_labels(47)$0"	[label=print];
	"print[732/4]" -> "Train_labels.csv file have {} rows and {} columns(47)"	[label=print];
	"print[734/4]" -> "Reading specs.csv file....(47)"	[label=print];
	"specs(47)$0" -> "pd(47)"	[label=read_csv];
	"specs(47)$0" -> "/kaggle/input/data-science-bowl-2019/specs.csv(47)"	[label=read_csv];
	"print[736/4]" -> "0(47)"	[label=print];
	"print[736/4]" -> "1(47)"	[label=print];
	"print[736/4]" -> "specs(47)$0"	[label=print];
	"print[736/4]" -> "Specs.csv file have {} rows and {} columns(47)"	[label=print];
	"print[738/4]" -> "Reading sample_submission.csv file....(47)"	[label=print];
	"sample_submission(47)$0" -> "pd(47)"	[label=read_csv];
	"sample_submission(47)$0" -> "/kaggle/input/data-science-bowl-2019/sample_submission.csv(47)"	[label=read_csv];
	"print[740/4]" -> "0(47)"	[label=print];
	"print[740/4]" -> "1(47)"	[label=print];
	"print[740/4]" -> "sample_submission(47)$0"	[label=print];
	"print[740/4]" -> "Sample_submission.csv file have {} rows and {} columns(47)"	[label=print];
	"train(48)" -> "encode_title[0]"	[label=_argToVar];
	"test(48)" -> "encode_title[1]"	[label=_argToVar];
	"train_labels(48)" -> "encode_title[2]"	[label=_argToVar];
	"train(48)$0" -> "train(48)"	[label=list];
	"train(48)$0" -> "train(48)$0"	[label=list];
	"train(48)$0" -> "map(48)"	[label=list];
	"train(48)$0" -> "str(48)"	[label=list];
	"train(48)$0" -> "x(48)"	[label=list];
	"train(48)$0" -> "_(48)"	[label=list];
	"train(48)$0" -> "y(48)"	[label=list];
	"train(48)$0" -> "title(48)"	[label=list];
	"train(48)$0" -> "event_code(48)"	[label=list];
	"test(48)$0" -> "test(48)"	[label=list];
	"test(48)$0" -> "map(48)"	[label=list];
	"test(48)$0" -> "str(48)"	[label=list];
	"test(48)$0" -> "x(48)"	[label=list];
	"test(48)$0" -> "_(48)"	[label=list];
	"test(48)$0" -> "y(48)"	[label=list];
	"test(48)$0" -> "title(48)"	[label=list];
	"test(48)$0" -> "event_code(48)"	[label=list];
	"test(48)$0" -> "test(48)$0"	[label=list];
	"all_title_event_code(48)$0" -> "train(48)$0"	[label=list];
	"all_title_event_code(48)$0" -> "test(48)$0"	[label=list];
	"all_title_event_code(48)$0" -> "set(48)"	[label=list];
	"all_title_event_code(48)$0" -> "title_event_code(48)"	[label=list];
	"list_of_user_activities(48)$0" -> "train(48)$0"	[label=list];
	"list_of_user_activities(48)$0" -> "title(48)"	[label=list];
	"list_of_user_activities(48)$0" -> "test(48)$0"	[label=list];
	"list_of_user_activities(48)$0" -> "set(48)"	[label=list];
	"list_of_event_code(48)$0" -> "train(48)$0"	[label=list];
	"list_of_event_code(48)$0" -> "event_code(48)"	[label=list];
	"list_of_event_code(48)$0" -> "test(48)$0"	[label=list];
	"list_of_event_code(48)$0" -> "set(48)"	[label=list];
	"list_of_event_id(48)$0" -> "train(48)$0"	[label=list];
	"list_of_event_id(48)$0" -> "test(48)$0"	[label=list];
	"list_of_event_id(48)$0" -> "set(48)"	[label=list];
	"list_of_event_id(48)$0" -> "event_id(48)"	[label=list];
	"list_of_worlds(48)$0" -> "train(48)$0"	[label=list];
	"list_of_worlds(48)$0" -> "test(48)$0"	[label=list];
	"list_of_worlds(48)$0" -> "set(48)"	[label=list];
	"list_of_worlds(48)$0" -> "world(48)"	[label=list];
	"activities_map(48)$0" -> "list_of_user_activities(48)$0"	[label=dict];
	"activities_map(48)$0" -> "zip(48)"	[label=dict];
	"activities_map(48)$0" -> "np(48)"	[label=dict];
	"activities_map(48)$0" -> "len(48)"	[label=dict];
	"activities_labels(48)$0" -> "list_of_user_activities(48)$0"	[label=dict];
	"activities_labels(48)$0" -> "zip(48)"	[label=dict];
	"activities_labels(48)$0" -> "np(48)"	[label=dict];
	"activities_labels(48)$0" -> "len(48)"	[label=dict];
	"activities_world(48)$0" -> "list_of_worlds(48)$0"	[label=dict];
	"activities_world(48)$0" -> "zip(48)"	[label=dict];
	"activities_world(48)$0" -> "np(48)"	[label=dict];
	"activities_world(48)$0" -> "len(48)"	[label=dict];
	"assess_titles(48)$0" -> "train(48)$0"	[label=list];
	"assess_titles(48)$0" -> "title(48)"	[label=list];
	"assess_titles(48)$0" -> "test(48)$0"	[label=list];
	"assess_titles(48)$0" -> "set(48)"	[label=list];
	"assess_titles(48)$0" -> "type(48)"	[label=list];
	"assess_titles(48)$0" -> "Assessment(48)"	[label=list];
	"train(48)$1" -> "train(48)$0"	[label=map];
	"train(48)$1" -> "title(48)"	[label=map];
	"train(48)$1" -> "activities_map(48)$0"	[label=map];
	"test(48)$1" -> "title(48)"	[label=map];
	"test(48)$1" -> "test(48)$0"	[label=map];
	"test(48)$1" -> "activities_map(48)$0"	[label=map];
	"train(48)$2" -> "world(48)"	[label=map];
	"train(48)$2" -> "activities_world(48)$0"	[label=map];
	"train(48)$2" -> "train(48)$1"	[label=map];
	"test(48)$2" -> "world(48)"	[label=map];
	"test(48)$2" -> "activities_world(48)$0"	[label=map];
	"test(48)$2" -> "test(48)$1"	[label=map];
	"train_labels(48)$0" -> "train_labels(48)"	[label=map];
	"train_labels(48)$0" -> "title(48)"	[label=map];
	"train_labels(48)$0" -> "activities_map(48)$0"	[label=map];
	"win_code(48)$0" -> "activities_map(48)$0"	[label=dict];
	"win_code(48)$0" -> "zip(48)"	[label=dict];
	"win_code(48)$0" -> "np(48)"	[label=dict];
	"win_code(48)$0" -> "len(48)"	[label=dict];
	"win_code(48)$0" -> "4100(48)"	[label=dict];
	"win_code(48)$0" -> "int(48)"	[label=dict];
	"win_code(48)$1" -> "win_code(48)$0"	[label=assignedFrom];
	"win_code(48)$1" -> "4110(48)"	[label=assignedFrom];
	"train(48)$3" -> "train(48)$2"	[label=to_datetime];
	"train(48)$3" -> "train(48)$3"	[label=to_datetime];
	"train(48)$3" -> "pd(48)"	[label=to_datetime];
	"train(48)$3" -> "timestamp(48)"	[label=to_datetime];
	"test(48)$3" -> "test(48)$2"	[label=to_datetime];
	"test(48)$3" -> "pd(48)"	[label=to_datetime];
	"test(48)$3" -> "timestamp(48)"	[label=to_datetime];
	"test(48)$3" -> "test(48)$3"	[label=to_datetime];
	"user_sample(49)" -> "get_data[0]"	[label=_argToVar];
	"test_set(49)" -> "get_data[1]"	[label=_argToVar];
	"last_activity(49)$0" -> "0(49)"	[label=assignedFrom];
	"user_activities_count(49)$0" -> "0(49)"	[label=assignedFrom];
	"user_activities_count(49)$0" -> "Clip(49)"	[label=assignedFrom];
	"user_activities_count(49)$0" -> "Activity(49)"	[label=assignedFrom];
	"user_activities_count(49)$0" -> "Assessment(49)"	[label=assignedFrom];
	"user_activities_count(49)$0" -> "Game(49)"	[label=assignedFrom];
	"last_session_time_sec(49)$0" -> "0(49)"	[label=assignedFrom];
	"accuracy_groups(49)$0" -> "0(49)"	[label=assignedFrom];
	"accuracy_groups(49)$0" -> "1(49)"	[label=assignedFrom];
	"accuracy_groups(49)$0" -> "2(49)"	[label=assignedFrom];
	"accuracy_groups(49)$0" -> "3(49)"	[label=assignedFrom];
	"all_assessments(49)$0" -> "[](49)"	[label=assignedFrom];
	"accumulated_accuracy_group(49)$0" -> "0(49)"	[label=assignedFrom];
	"accumulated_accuracy(49)$0" -> "0(49)"	[label=assignedFrom];
	"accumulated_correct_attempts(49)$0" -> "0(49)"	[label=assignedFrom];
	"accumulated_uncorrect_attempts(49)$0" -> "0(49)"	[label=assignedFrom];
	"accumulated_actions(49)$0" -> "0(49)"	[label=assignedFrom];
	"counter(49)$0" -> "0(49)"	[label=assignedFrom];
	"time_first_activity(49)$0" -> "user_sample(49)"	[label=float];
	"time_first_activity(49)$0" -> "0(49)"	[label=float];
	"time_first_activity(49)$0" -> "timestamp(49)"	[label=float];
	"durations(49)$0" -> "[](49)"	[label=assignedFrom];
	"last_accuracy_title(49)$0" -> "1(49)"	[label=assignedFrom];
	"last_accuracy_title(49)$0" -> "acc_(49)"	[label=assignedFrom];
	"last_accuracy_title(49)$0" -> "title(49)"	[label=assignedFrom];
	"last_accuracy_title(49)$0" -> "assess_titles(49)"	[label=assignedFrom];
	"i(49)" -> "user_sample(49)"	[label=iteratorOf];
	"i(49)" -> "game_session(49)"	[label=iteratorOf];
	"i(49)" -> "False(49)"	[label=iteratorOf];
	"session(49)" -> "user_sample(49)"	[label=iteratorOf];
	"session(49)" -> "game_session(49)"	[label=iteratorOf];
	"session(49)" -> "False(49)"	[label=iteratorOf];
	"session_type(49)$0" -> "0(49)"	[label=assignedFrom];
	"session_type(49)$0" -> "session(49)"	[label=assignedFrom];
	"session_type(49)$0" -> "type(49)"	[label=assignedFrom];
	"session_title(49)$0" -> "0(49)"	[label=assignedFrom];
	"session_title(49)$0" -> "title(49)"	[label=assignedFrom];
	"session_title(49)$0" -> "session(49)"	[label=assignedFrom];
	"session_title_text(49)$0" -> "session_title(49)$0"	[label=assignedFrom];
	"session_title_text(49)$0" -> "activities_labels(49)"	[label=assignedFrom];
	"all_attempts(49)$0" -> "session(49)"	[label=query];
	"all_attempts(49)$0" -> "session_title(49)$0"	[label=query];
	"all_attempts(49)$0" -> "event_code == (49)"	[label=query];
	"all_attempts(49)$0" -> "win_code(49)"	[label=query];
	"true_attempts(49)$0" -> "all_attempts(49)$0"	[label=sum];
	"true_attempts(49)$0" -> "event_data(49)"	[label=sum];
	"true_attempts(49)$0" -> "true(49)"	[label=sum];
	"false_attempts(49)$0" -> "all_attempts(49)$0"	[label=sum];
	"false_attempts(49)$0" -> "event_data(49)"	[label=sum];
	"false_attempts(49)$0" -> "false(49)"	[label=sum];
	"features(49)$0" -> "user_activities_count(49)$0"	[label=copy];
	"features(49)$1" -> "last_accuracy_title(49)$0"	[label=update];
	"features(49)$1" -> "features(49)$0"	[label=update];
	"features(49)$2" -> "features(49)$1"	[label=update];
	"features(49)$2" -> "event_code_count(49)"	[label=update];
	"features(49)$3" -> "features(49)$2"	[label=update];
	"features(49)$3" -> "event_id_count(49)"	[label=update];
	"features(49)$4" -> "features(49)$3"	[label=update];
	"features(49)$4" -> "title_count(49)"	[label=update];
	"features(49)$5" -> "features(49)$4"	[label=update];
	"features(49)$5" -> "title_event_code_count(49)"	[label=update];
	"features(49)$6" -> "last_accuracy_title(49)$0"	[label=update];
	"features(49)$6" -> "features(49)$5"	[label=update];
	"features(49)$7" -> "1(49)"	[label=assignedFrom];
	"features(49)$7" -> "session(49)"	[label=assignedFrom];
	"features(49)$7" -> "features(49)$6"	[label=assignedFrom];
	"features(49)$7" -> "installation_id(49)"	[label=assignedFrom];
	"features(49)$8" -> "0(49)"	[label=assignedFrom];
	"features(49)$8" -> "title(49)"	[label=assignedFrom];
	"features(49)$8" -> "session(49)"	[label=assignedFrom];
	"features(49)$8" -> "features(49)$7"	[label=assignedFrom];
	"features(49)$9" -> "accumulated_correct_attempts(49)$0"	[label=assignedFrom];
	"features(49)$9" -> "features(49)$8"	[label=assignedFrom];
	"features(49)$10" -> "accumulated_uncorrect_attempts(49)$0"	[label=assignedFrom];
	"features(49)$10" -> "features(49)$9"	[label=assignedFrom];
	"accumulated_correct_attempts(49)$1" -> "accumulated_correct_attempts(49)$0"	[label=Add];
	"accumulated_correct_attempts(49)$1" -> "true_attempts(49)$0"	[label=Add];
	"accumulated_uncorrect_attempts(49)$1" -> "accumulated_uncorrect_attempts(49)$0"	[label=Add];
	"accumulated_uncorrect_attempts(49)$1" -> "false_attempts(49)$0"	[label=Add];
	"features(49)$11" -> "0(49)"	[label=assignedFrom];
	"features(49)$11" -> "features(49)$10"	[label=assignedFrom];
	"features(49)$12" -> "durations(49)$0"	[label=mean];
	"features(49)$12" -> "features(49)$11"	[label=mean];
	"features(49)$12" -> "np(49)"	[label=mean];
	"durations(49)$1" -> "0(49)"	[label=append];
	"durations(49)$1" -> "1(49)"	[label=append];
	"durations(49)$1" -> "2(49)"	[label=append];
	"durations(49)$1" -> "durations(49)$0"	[label=append];
	"durations(49)$1" -> "session(49)"	[label=append];
	"features(49)$13" -> "0(49)"	[label=assignedFrom];
	"features(49)$13" -> "accumulated_accuracy(49)$0"	[label=assignedFrom];
	"features(49)$13" -> "counter(49)$0"	[label=assignedFrom];
	"features(49)$13" -> "features(49)$12"	[label=assignedFrom];
	"accuracy(49)$0" -> "0(49)"	[label=assignedFrom];
	"accuracy(49)$0" -> "true_attempts(49)$0"	[label=assignedFrom];
	"accuracy(49)$0" -> "false_attempts(49)$0"	[label=assignedFrom];
	"accumulated_accuracy(49)$1" -> "accumulated_accuracy(49)$0"	[label=Add];
	"accumulated_accuracy(49)$1" -> "accuracy(49)$0"	[label=Add];
	"last_accuracy_title(49)$1" -> "last_accuracy_title(49)$0"	[label=assignedFrom];
	"last_accuracy_title(49)$1" -> "accuracy(49)$0"	[label=assignedFrom];
	"features(49)$14" -> "0(49)"	[label=assignedFrom];
	"features(49)$14" -> "features(49)$13"	[label=assignedFrom];
	"features(49)$15" -> "3(49)"	[label=assignedFrom];
	"features(49)$15" -> "features(49)$14"	[label=assignedFrom];
	"features(49)$16" -> "2(49)"	[label=assignedFrom];
	"features(49)$16" -> "features(49)$15"	[label=assignedFrom];
	"features(49)$17" -> "1(49)"	[label=assignedFrom];
	"features(49)$17" -> "features(49)$16"	[label=assignedFrom];
	"features(49)$18" -> "accuracy_groups(49)$0"	[label=update];
	"features(49)$18" -> "features(49)$17"	[label=update];
	"accuracy_groups(49)$1" -> "accuracy_groups(49)$0"	[label=Add];
	"accuracy_groups(49)$1" -> "1(49)"	[label=Add];
	"features(49)$19" -> "0(49)"	[label=assignedFrom];
	"features(49)$19" -> "accumulated_accuracy_group(49)$0"	[label=assignedFrom];
	"features(49)$19" -> "counter(49)$0"	[label=assignedFrom];
	"features(49)$19" -> "features(49)$18"	[label=assignedFrom];
	"accumulated_accuracy_group(49)$1" -> "accumulated_accuracy_group(49)$0"	[label=Add];
	"accumulated_accuracy_group(49)$1" -> "features(49)$19"	[label=Add];
	"accumulated_accuracy_group(49)$1" -> "accuracy_group(49)"	[label=Add];
	"features(49)$20" -> "accumulated_actions(49)$0"	[label=assignedFrom];
	"features(49)$20" -> "features(49)$19"	[label=assignedFrom];
	"all_assessments(49)$1" -> "all_assessments(49)$0"	[label=append];
	"all_assessments(49)$1" -> "features(49)$20"	[label=append];
	"all_assessments(49)$2" -> "features(49)$20"	[label=append];
	"all_assessments(49)$2" -> "all_assessments(49)$1"	[label=append];
	"counter(49)$1" -> "1(49)"	[label=Add];
	"counter(49)$1" -> "counter(49)$0"	[label=Add];
	"counter(50)" -> "update_counters[0]"	[label=_argToVar];
	"col(50)" -> "update_counters[1]"	[label=_argToVar];
	"num_of_session_count(50)$0" -> "col(50)"	[label=Counter];
	"num_of_session_count(50)$0" -> "session(50)"	[label=Counter];
	"k(50)" -> "num_of_session_count(50)$0"	[label=iteratorOf];
	"x(50)$0" -> "k(50)"	[label=assignedFrom];
	"x(50)$1" -> "k(50)"	[label=assignedFrom];
	"x(50)$1" -> "activities_labels(50)"	[label=assignedFrom];
	"counter(50)$0" -> "counter(50)"	[label=Add];
	"counter(50)$0" -> "num_of_session_count(50)$0"	[label=Add];
	"counter(50)$0" -> "k(50)"	[label=Add];
	"event_code_count(49)$0" -> "event_code_count(49)"	[label=update_counters];
	"event_code_count(49)$0" -> "event_code(49)"	[label=update_counters];
	"event_id_count(49)$0" -> "event_id_count(49)"	[label=update_counters];
	"event_id_count(49)$0" -> "event_id(49)"	[label=update_counters];
	"title_count(49)$0" -> "title(49)"	[label=update_counters];
	"title_count(49)$0" -> "title_count(49)"	[label=update_counters];
	"title_event_code_count(49)$0" -> "title_event_code_count(49)"	[label=update_counters];
	"title_event_code_count(49)$0" -> "title_event_code(49)"	[label=update_counters];
	"accumulated_actions(49)$1" -> "accumulated_actions(49)$0"	[label=Add];
	"accumulated_actions(49)$1" -> "session(49)"	[label=Add];
	"accumulated_actions(49)$1" -> "len(49)"	[label=Add];
	"user_activities_count(49)$1" -> "user_activities_count(49)$0"	[label=Add];
	"user_activities_count(49)$1" -> "1(49)"	[label=Add];
	"last_activitiy(49)$0" -> "session_type(49)$0"	[label=assignedFrom];
	"train(51)" -> "get_train_and_test[0]"	[label=_argToVar];
	"test(51)" -> "get_train_and_test[1]"	[label=_argToVar];
	"compiled_train(51)$0" -> "[](51)"	[label=assignedFrom];
	"compiled_test(51)$0" -> "[](51)"	[label=assignedFrom];
	"i(51)" -> "train(51)"	[label=iteratorOf];
	"i(51)" -> "tqdm(51)"	[label=iteratorOf];
	"i(51)" -> "enumerate(51)"	[label=iteratorOf];
	"i(51)" -> "installation_id(51)"	[label=iteratorOf];
	"i(51)" -> "False(51)"	[label=iteratorOf];
	"i(51)" -> "17000(51)"	[label=iteratorOf];
	"ins_id(51)" -> "train(51)"	[label=iteratorOf];
	"ins_id(51)" -> "test(51)"	[label=iteratorOf];
	"ins_id(51)" -> "tqdm(51)"	[label=iteratorOf];
	"ins_id(51)" -> "enumerate(51)"	[label=iteratorOf];
	"ins_id(51)" -> "installation_id(51)"	[label=iteratorOf];
	"ins_id(51)" -> "False(51)"	[label=iteratorOf];
	"ins_id(51)" -> "17000(51)"	[label=iteratorOf];
	"ins_id(51)" -> "1000(51)"	[label=iteratorOf];
	"user_sample(51)" -> "train(51)"	[label=iteratorOf];
	"user_sample(51)" -> "test(51)"	[label=iteratorOf];
	"user_sample(51)" -> "tqdm(51)"	[label=iteratorOf];
	"user_sample(51)" -> "enumerate(51)"	[label=iteratorOf];
	"user_sample(51)" -> "installation_id(51)"	[label=iteratorOf];
	"user_sample(51)" -> "False(51)"	[label=iteratorOf];
	"user_sample(51)" -> "17000(51)"	[label=iteratorOf];
	"user_sample(51)" -> "1000(51)"	[label=iteratorOf];
	"compiled_train(51)$1" -> "compiled_train(51)$0"	[label=Add];
	"compiled_train(51)$1" -> "user_sample(51)"	[label=Add];
	"compiled_train(51)$1" -> "get_data(51)"	[label=Add];
	"test_data(51)$0" -> "user_sample(51)"	[label=get_data];
	"test_data(51)$0" -> "True(51)"	[label=get_data];
	"compiled_test(51)$1" -> "compiled_test(51)$0"	[label=append];
	"compiled_test(51)$1" -> "test_data(51)$0"	[label=append];
	"reduce_train(51)$0" -> "compiled_train(51)$1"	[label=DataFrame];
	"reduce_train(51)$0" -> "pd(51)"	[label=DataFrame];
	"reduce_test(51)$0" -> "compiled_test(51)$1"	[label=DataFrame];
	"reduce_test(51)$0" -> "pd(51)"	[label=DataFrame];
	"categoricals(51)$0" -> "[<_ast.Constant object at 0x7fd4d0575280>](51)"	[label=assignedFrom];
	"train(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"train(0)$0" -> "train(0)"	[label=encode_title];
	"train(0)$0" -> "test(0)$0"	[label=encode_title];
	"train(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"test(0)$0" -> "train(0)"	[label=encode_title];
	"test(0)$0" -> "test(0)$0"	[label=encode_title];
	"test(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"train_labels(0)$0" -> "train(0)"	[label=encode_title];
	"train_labels(0)$0" -> "test(0)$0"	[label=encode_title];
	"train_labels(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"win_code(0)$0" -> "train(0)"	[label=encode_title];
	"win_code(0)$0" -> "test(0)$0"	[label=encode_title];
	"win_code(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"list_of_user_activities(0)$0" -> "train(0)"	[label=encode_title];
	"list_of_user_activities(0)$0" -> "test(0)$0"	[label=encode_title];
	"list_of_user_activities(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"list_of_event_code(0)$0" -> "train(0)"	[label=encode_title];
	"list_of_event_code(0)$0" -> "test(0)$0"	[label=encode_title];
	"list_of_event_code(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"activities_labels(0)$0" -> "train(0)"	[label=encode_title];
	"activities_labels(0)$0" -> "test(0)$0"	[label=encode_title];
	"activities_labels(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"assess_titles(0)$0" -> "train(0)"	[label=encode_title];
	"assess_titles(0)$0" -> "test(0)$0"	[label=encode_title];
	"assess_titles(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"list_of_event_id(0)$0" -> "train(0)"	[label=encode_title];
	"list_of_event_id(0)$0" -> "test(0)$0"	[label=encode_title];
	"list_of_event_id(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"all_title_event_code(0)$0" -> "train(0)"	[label=encode_title];
	"all_title_event_code(0)$0" -> "test(0)$0"	[label=encode_title];
	"all_title_event_code(0)$0" -> "train_labels(0)$0"	[label=encode_title];
	"reduce_train(0)$0" -> "train(0)$0"	[label=get_train_and_test];
	"reduce_train(0)$0" -> "test(0)$0"	[label=get_train_and_test];
	"reduce_test(0)$0" -> "train(0)$0"	[label=get_train_and_test];
	"reduce_test(0)$0" -> "test(0)$0"	[label=get_train_and_test];
	"categoricals(0)$0" -> "train(0)$0"	[label=get_train_and_test];
	"categoricals(0)$0" -> "test(0)$0"	[label=get_train_and_test];
	"reduce_train(52)" -> "preprocess[0]"	[label=_argToVar];
	"reduce_test(52)" -> "preprocess[1]"	[label=_argToVar];
	"df(52)" -> "[<_ast.Name object at 0x7fd4d0575be0>, <_ast.Name object at 0x7fd4d0575c10>](52)"	[label=iteratorOf];
	"df(52)$0" -> "df(52)"	[label=transform];
	"df(52)$0" -> "[<_ast.Constant object at 0x7fd4d0575ee0>](52)"	[label=transform];
	"df(52)$0" -> "Clip(52)"	[label=transform];
	"df(52)$0" -> "count(52)"	[label=transform];
	"df(52)$1" -> "df(52)$0"	[label=transform];
	"df(52)$1" -> "[<_ast.Constant object at 0x7fd4d058e280>](52)"	[label=transform];
	"df(52)$1" -> "duration_mean(52)"	[label=transform];
	"df(52)$1" -> "mean(52)"	[label=transform];
	"df(52)$2" -> "df(52)$1"	[label=transform];
	"df(52)$2" -> "[<_ast.Constant object at 0x7fd4d058e5e0>](52)"	[label=transform];
	"df(52)$2" -> "session_title(52)"	[label=transform];
	"df(52)$2" -> "nunique(52)"	[label=transform];
	"df(52)$3" -> "df(52)$2"	[label=sum];
	"df(52)$3" -> "[<_ast.Constant object at 0x7fd4d058e910>, <_ast.Constant object at 0x7fd4d058e940>, <_ast.Constant object at 0x7fd4d058e970>, <_\
ast.Constant object at 0x7fd4d058e9a0>, <_ast.Constant object at 0x7fd4d058e9d0>, <_ast.Constant object at 0x7fd4d058ea00>, <_ast.Constant \
object at 0x7fd4d058ea30>, <_ast.Constant object at 0x7fd4d058ea60>, <_ast.Constant object at 0x7fd4d058ea90>, <_ast.Constant object \
at 0x7fd4d058eac0>, <_ast.Constant object at 0x7fd4d058eaf0>, <_ast.Constant object at 0x7fd4d058eb20>, <_ast.Constant object at \
0x7fd4d058eb50>, <_ast.Constant object at 0x7fd4d058eb80>, <_ast.Constant object at 0x7fd4d058ebb0>, <_ast.Constant object at 0x7fd4d058ebe0>, <_\
ast.Constant object at 0x7fd4d058ec10>, <_ast.Constant object at 0x7fd4d058ec40>, <_ast.Constant object at 0x7fd4d058ec70>, <_ast.Constant \
object at 0x7fd4d058eca0>, <_ast.Constant object at 0x7fd4d058ecd0>, <_ast.Constant object at 0x7fd4d058ed00>, <_ast.Constant object \
at 0x7fd4d058ed30>, <_ast.Constant object at 0x7fd4d058ed60>, <_ast.Constant object at 0x7fd4d058ed90>, <_ast.Constant object at \
0x7fd4d058edc0>, <_ast.Constant object at 0x7fd4d058edf0>, <_ast.Constant object at 0x7fd4d058ee20>, <_ast.Constant object at 0x7fd4d058ee50>, <_\
ast.Constant object at 0x7fd4d058ee80>, <_ast.Constant object at 0x7fd4d058eeb0>, <_ast.Constant object at 0x7fd4d058eee0>, <_ast.Constant \
object at 0x7fd4d058ef10>, <_ast.Constant object at 0x7fd4d058ef40>, <_ast.Constant object at 0x7fd4d058ef70>, <_ast.Constant object \
at 0x7fd4d058efa0>, <_ast.Constant object at 0x7fd4d058efd0>, <_ast.Constant object at 0x7fd4d0579040>, <_ast.Constant object at \
0x7fd4d0579070>, <_ast.Constant object at 0x7fd4d05790a0>, <_ast.Constant object at 0x7fd4d05790d0>, <_ast.Constant object at 0x7fd4d0579100>](\
52)"	[label=sum];
	"df(52)$3" -> "1(52)"	[label=sum];
	"df(52)$4" -> "mean(52)"	[label=transform];
	"df(52)$4" -> "df(52)$3"	[label=transform];
	"df(52)$4" -> "[<_ast.Constant object at 0x7fd4d05794c0>](52)"	[label=transform];
	"df(52)$4" -> "sum_event_code_count(52)"	[label=transform];
	"features(52)$0" -> "reduce_train(52)"	[label=assignedFrom];
	"features(52)$0" -> "1(52)"	[label=assignedFrom];
	"features(52)$0" -> "0(52)"	[label=assignedFrom];
	"features(52)$1" -> "features(52)$1"	[label=Add];
	"features(52)$1" -> "x(52)"	[label=Add];
	"features(52)$1" -> "[<_ast.Constant object at 0x7fd4d0579c40>, <_ast.Constant object at 0x7fd4d0579c70>](52)"	[label=Add];
	"features(52)$1" -> "acc_(52)"	[label=Add];
	"features(52)$1" -> "title(52)"	[label=Add];
	"features(52)$1" -> "assess_titles(52)"	[label=Add];
	"reduce_train(0)$1" -> "reduce_train(0)$0"	[label=preprocess];
	"reduce_train(0)$1" -> "reduce_test(0)$1"	[label=preprocess];
	"reduce_test(0)$1" -> "reduce_train(0)$0"	[label=preprocess];
	"reduce_test(0)$1" -> "reduce_test(0)$1"	[label=preprocess];
	"features(0)$0" -> "reduce_train(0)$0"	[label=preprocess];
	"features(0)$0" -> "reduce_test(0)$1"	[label=preprocess];
	"n_estimators(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"params(0)$0" -> "15(0)"	[label=assignedFrom];
	"params(0)$0" -> "n_estimators(0)"	[label=assignedFrom];
	"params(0)$0" -> "boosting_type(0)"	[label=assignedFrom];
	"params(0)$0" -> "objective(0)"	[label=assignedFrom];
	"params(0)$0" -> "metric(0)"	[label=assignedFrom];
	"params(0)$0" -> "subsample(0)"	[label=assignedFrom];
	"params(0)$0" -> "subsample_freq(0)"	[label=assignedFrom];
	"params(0)$0" -> "learning_rate(0)"	[label=assignedFrom];
	"params(0)$0" -> "feature_fraction(0)"	[label=assignedFrom];
	"params(0)$0" -> "max_depth(0)"	[label=assignedFrom];
	"params(0)$0" -> "lambda_l1(0)"	[label=assignedFrom];
	"params(0)$0" -> "lambda_l2(0)"	[label=assignedFrom];
	"params(0)$0" -> "verbose(0)"	[label=assignedFrom];
	"params(0)$0" -> "early_stopping_rounds(0)"	[label=assignedFrom];
	"params(0)$0" -> "eval_metric(0)"	[label=assignedFrom];
	"params(0)$0" -> "2000(0)"	[label=assignedFrom];
	"params(0)$0" -> "gbdt(0)"	[label=assignedFrom];
	"params(0)$0" -> "regression(0)"	[label=assignedFrom];
	"params(0)$0" -> "rmse(0)"	[label=assignedFrom];
	"params(0)$0" -> "0.75(0)"	[label=assignedFrom];
	"params(0)$0" -> "1(0)"	[label=assignedFrom];
	"params(0)$0" -> "0.04(0)"	[label=assignedFrom];
	"params(0)$0" -> "0.9(0)"	[label=assignedFrom];
	"params(0)$0" -> "100(0)"	[label=assignedFrom];
	"params(0)$0" -> "cappa(0)"	[label=assignedFrom];
	"boosting_type(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"objective(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"metric(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"subsample(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"subsample_freq(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"learning_rate(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"feature_fraction(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"max_depth(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"lambda_l1(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"lambda_l2(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"verbose(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"early_stopping_rounds(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"eval_metric(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"2000(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"gbdt(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"regression(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"rmse(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"0.75(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"1(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"0.04(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"0.9(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"100(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"cappa(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"y(0)$0" -> "reduce_train(0)$1"	[label=assignedFrom];
	"y(0)$0" -> "accuracy_group(0)"	[label=assignedFrom];
	"accuracy_group(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"5(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"n_fold(0)$0" -> "5(0)"	[label=assignedFrom];
	"folds(0)$0" -> "n_fold(0)$0"	[label=GroupKFold];
	"[<_ast.Constant object at 0x7fd4d05a1af0>, <_ast.Constant object at 0x7fd4d05a1b20>, <_ast.Constant object at 0x7fd4d05a1b50>, <_\
ast.Constant object at 0x7fd4d05a1b80>, <_ast.Constant object at 0x7fd4d05a1bb0>](0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"cols_to_drop(0)$0" -> "[<_ast.Constant object at 0x7fd4d05a1af0>, <_ast.Constant object at 0x7fd4d05a1b20>, <_ast.Constant object at 0x7fd4d05a1b50>, <_\
ast.Constant object at 0x7fd4d05a1b80>, <_ast.Constant object at 0x7fd4d05a1bb0>](0)"	[label=assignedFrom];
	"ft(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"transformers(0)$0" -> "ft(0)"	[label=assignedFrom];
	"LGBWrapper_regr(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"regressor_model1(0)$0" -> "LGBWrapper_regr(0)"	[label=RegressorModel];
	"regressor_model1(0)$1" -> "regressor_model1(0)$0"	[label=fit];
	functools -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	partial -> functools	[label=importedBy];
	"partial(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"partial(0)" -> partial	[label=assignedFrom];
	scipy -> "quick-and-dirty-regression.ipynb"	[label=importedBy];
	"sp(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"sp(0)" -> scipy	[label=assignedFrom];
	"self(54)" -> "__init__[0]"	[label=_argToVar];
	"self(54)$0" -> "self(54)"	[label=assignedFrom];
	"self(54)$0" -> "0(54)"	[label=assignedFrom];
	"self(55)" -> "_kappa_loss[0]"	[label=_argToVar];
	"coef(55)" -> "_kappa_loss[1]"	[label=_argToVar];
	"X(55)" -> "_kappa_loss[2]"	[label=_argToVar];
	"y(55)" -> "_kappa_loss[3]"	[label=_argToVar];
	"X_p(55)$0" -> "coef(55)"	[label=cut];
	"X_p(55)$0" -> "X(55)"	[label=cut];
	"X_p(55)$0" -> "pd(55)"	[label=cut];
	"X_p(55)$0" -> "[<_ast.UnaryOp object at 0x7fd4d05a5d00>](55)"	[label=cut];
	"X_p(55)$0" -> "list(55)"	[label=cut];
	"X_p(55)$0" -> "np(55)"	[label=cut];
	"X_p(55)$0" -> "[<_ast.Attribute object at 0x7fd4d05a5ee0>](55)"	[label=cut];
	"X_p(55)$0" -> "[<_ast.Constant object at 0x7fd4d05a5fd0>, <_ast.Constant object at 0x7fd4d05a5a90>, <_ast.Constant object at 0x7fd4d05a5a30>, <_\
ast.Constant object at 0x7fd4d0574040>](55)"	[label=cut];
	"self(56)" -> "fit[0]"	[label=_argToVar];
	"X(56)" -> "fit[1]"	[label=_argToVar];
	"y(56)" -> "fit[2]"	[label=_argToVar];
	"loss_partial(56)$0" -> "self(56)"	[label=partial];
	"loss_partial(56)$0" -> "X(56)"	[label=partial];
	"loss_partial(56)$0" -> "y(56)"	[label=partial];
	"initial_coef(56)$0" -> "[<_ast.Constant object at 0x7fd4d0574610>, <_ast.Constant object at 0x7fd4d0574640>, <_ast.Constant object at 0x7fd4d0574670>](56)"	[label=assignedFrom];
	"self(56)$0" -> "self(56)"	[label=minimize];
	"self(56)$0" -> "loss_partial(56)$0"	[label=minimize];
	"self(56)$0" -> "initial_coef(56)$0"	[label=minimize];
	"self(56)$0" -> "sp(56)"	[label=minimize];
	"self(56)$0" -> "nelder-mead(56)"	[label=minimize];
	"self(57)" -> "predict[0]"	[label=_argToVar];
	"X(57)" -> "predict[1]"	[label=_argToVar];
	"coef(57)" -> "predict[2]"	[label=_argToVar];
	"self(58)" -> "coefficients[0]"	[label=_argToVar];
	"pr1(0)$0" -> "reduce_train(0)$1"	[label=predict];
	"pr1(0)$0" -> "regressor_model1(0)$1"	[label=predict];
	"optR(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"optR(0)$0" -> "1(0)"	[label=fit];
	"optR(0)$0" -> "y(0)$0"	[label=fit];
	"optR(0)$0" -> "pr1(0)$0"	[label=fit];
	"optR(0)$0" -> "optR(0)"	[label=fit];
	"coefficients(0)$0" -> "optR(0)$0"	[label=coefficients];
	"opt_preds(0)$0" -> "1(0)"	[label=predict];
	"opt_preds(0)$0" -> "pr1(0)$0"	[label=predict];
	"opt_preds(0)$0" -> "optR(0)$0"	[label=predict];
	"opt_preds(0)$0" -> "coefficients(0)$0"	[label=predict];
	"qwk[1032/0]" -> "y(0)$0"	[label=qwk];
	"qwk[1032/0]" -> "opt_preds(0)$0"	[label=qwk];
	"pr1(0)$1" -> "reduce_test(0)$1"	[label=predict];
	"pr1(0)$1" -> "regressor_model1(0)$1"	[label=predict];
	"0(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"pr1(0)$2" -> "pr1(0)$1"	[label=assignedFrom];
	"pr1(0)$2" -> "0(0)"	[label=assignedFrom];
	"pr1(0)$3" -> "1(0)"	[label=assignedFrom];
	"pr1(0)$3" -> "pr1(0)$2"	[label=assignedFrom];
	"2(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"pr1(0)$4" -> "pr1(0)$3"	[label=assignedFrom];
	"pr1(0)$4" -> "2(0)"	[label=assignedFrom];
	"3(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"pr1(0)$5" -> "pr1(0)$4"	[label=assignedFrom];
	"pr1(0)$5" -> "3(0)"	[label=assignedFrom];
	"sample_submission(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"sample_submission(0)$0" -> "pr1(0)$5"	[label=astype];
	"sample_submission(0)$0" -> "sample_submission(0)"	[label=astype];
	"sample_submission(0)$0" -> "int(0)"	[label=astype];
	"int(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"sample_submission(0)$1" -> "sample_submission(0)$0"	[label=to_csv];
	"sample_submission(0)$1" -> "submission.csv(0)"	[label=to_csv];
	"submission.csv(0)" -> "quick-and-dirty-regression.ipynb"	[label=appearsIn];
	"sample_submission(0)$2" -> "sample_submission(0)$1"	[label=value_counts];
}
