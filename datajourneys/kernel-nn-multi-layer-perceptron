digraph "" {
	numpy -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"np(0)" -> numpy	[label=assignedFrom];
	"np(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	pandas -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"pd(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"pd(0)" -> pandas	[label=assignedFrom];
	seaborn -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"sns(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"sns(0)" -> seaborn	[label=assignedFrom];
	"sns(0)$0" -> "sns(0)"	[label=set];
	"matplotlib.pyplot" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"plt(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"plt(0)" -> "matplotlib.pyplot"	[label=assignedFrom];
	tqdm -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	tqdm_notebook -> tqdm	[label=importedBy];
	"tqdm(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"tqdm(0)" -> tqdm_notebook	[label=assignedFrom];
	re -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"re(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"re(0)" -> re	[label=assignedFrom];
	random -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"rd(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"rd(0)" -> random	[label=assignedFrom];
	os -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"os(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"os(0)" -> os	[label=assignedFrom];
	codecs -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"codecs(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"codecs(0)" -> codecs	[label=assignedFrom];
	time -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"time(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"time(0)" -> time	[label=assignedFrom];
	datetime -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"datetime(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"datetime(0)" -> datetime	[label=assignedFrom];
	gc -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"gc(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"gc(0)" -> gc	[label=assignedFrom];
	numba -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	jit -> numba	[label=importedBy];
	"jit(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"jit(0)" -> jit	[label=assignedFrom];
	collections -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	Counter -> collections	[label=importedBy];
	"Counter(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Counter(0)" -> Counter	[label=assignedFrom];
	copy -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"copy(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"copy(0)" -> copy	[label=assignedFrom];
	typing -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	Any -> typing	[label=importedBy];
	"Any(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Any(0)" -> Any	[label=assignedFrom];
	"12345(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"seed(0)$0" -> "12345(0)"	[label=assignedFrom];
	"np(0)$0" -> "np(0)"	[label=seed];
	"np(0)$0" -> "seed(0)$0"	[label=seed];
	"rd(0)$0" -> "rd(0)"	[label=seed];
	"rd(0)$0" -> "seed(0)$0"	[label=seed];
	"os(0)$0" -> "os(0)"	[label=str];
	"os(0)$0" -> "seed(0)$0"	[label=str];
	warnings -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"warnings(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"warnings(0)" -> warnings	[label=assignedFrom];
	"warnings(0)$0" -> "warnings(0)"	[label=filterwarnings];
	"warnings(0)$0" -> "ignore(0)"	[label=filterwarnings];
	"ignore(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"pd(0)$0" -> "pd(0)"	[label=set_option];
	"pd(0)$0" -> "display.max_columns(0)"	[label=set_option];
	"pd(0)$0" -> "200(0)"	[label=set_option];
	"display.max_columns(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"200(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"pd(0)$1" -> "pd(0)$0"	[label=set_option];
	"pd(0)$1" -> "200(0)"	[label=set_option];
	"pd(0)$1" -> "display.max_rows(0)"	[label=set_option];
	"display.max_rows(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"False(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"TRAIN_OFFLINE(0)$0" -> "False(0)"	[label=assignedFrom];
	"sklearn.ensemble" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	RandomForestClassifier -> "sklearn.ensemble"	[label=importedBy];
	"RandomForestClassifier(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"RandomForestClassifier(0)" -> RandomForestClassifier	[label=assignedFrom];
	RandomForestRegressor -> "sklearn.ensemble"	[label=importedBy];
	"RandomForestRegressor(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"RandomForestRegressor(0)" -> RandomForestRegressor	[label=assignedFrom];
	lightgbm -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"lgb(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"lgb(0)" -> lightgbm	[label=assignedFrom];
	xgboost -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"xgb(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"xgb(0)" -> xgboost	[label=assignedFrom];
	keras -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"keras(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"keras(0)" -> keras	[label=assignedFrom];
	"keras.losses" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	binary_crossentropy -> "keras.losses"	[label=importedBy];
	"binary_crossentropy(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"binary_crossentropy(0)" -> binary_crossentropy	[label=assignedFrom];
	categorical_crossentropy -> "keras.losses"	[label=importedBy];
	"categorical_crossentropy(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"categorical_crossentropy(0)" -> categorical_crossentropy	[label=assignedFrom];
	"keras.utils" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	to_categorical -> "keras.utils"	[label=importedBy];
	"to_categorical(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"to_categorical(0)" -> to_categorical	[label=assignedFrom];
	"keras.layers" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	Dense -> "keras.layers"	[label=importedBy];
	"Dense(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Dense(0)" -> Dense	[label=assignedFrom];
	Input -> "keras.layers"	[label=importedBy];
	"Input(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Input(0)" -> Input	[label=assignedFrom];
	Flatten -> "keras.layers"	[label=importedBy];
	"Flatten(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Flatten(0)" -> Flatten	[label=assignedFrom];
	concatenate -> "keras.layers"	[label=importedBy];
	"concatenate(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"concatenate(0)" -> concatenate	[label=assignedFrom];
	Dropout -> "keras.layers"	[label=importedBy];
	"Dropout(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Dropout(0)" -> Dropout	[label=assignedFrom];
	Lambda -> "keras.layers"	[label=importedBy];
	"Lambda(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Lambda(0)" -> Lambda	[label=assignedFrom];
	BatchNormalization -> "keras.layers"	[label=importedBy];
	"BatchNormalization(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"BatchNormalization(0)" -> BatchNormalization	[label=assignedFrom];
	Activation -> "keras.layers"	[label=importedBy];
	"Activation(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Activation(0)" -> Activation	[label=assignedFrom];
	"keras.models" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	Sequential -> "keras.models"	[label=importedBy];
	"Sequential(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Sequential(0)" -> Sequential	[label=assignedFrom];
	Model -> "keras.models"	[label=importedBy];
	"Model(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Model(0)" -> Model	[label=assignedFrom];
	"keras.callbacks" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	Callback -> "keras.callbacks"	[label=importedBy];
	"Callback(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Callback(0)" -> Callback	[label=assignedFrom];
	EarlyStopping -> "keras.callbacks"	[label=importedBy];
	"EarlyStopping(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"EarlyStopping(0)" -> EarlyStopping	[label=assignedFrom];
	ModelCheckpoint -> "keras.callbacks"	[label=importedBy];
	"ModelCheckpoint(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"ModelCheckpoint(0)" -> ModelCheckpoint	[label=assignedFrom];
	ReduceLROnPlateau -> "keras.callbacks"	[label=importedBy];
	"ReduceLROnPlateau(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"ReduceLROnPlateau(0)" -> ReduceLROnPlateau	[label=assignedFrom];
	"keras.backend" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"K(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"K(0)" -> "keras.backend"	[label=assignedFrom];
	"keras.optimizers" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	Adam -> "keras.optimizers"	[label=importedBy];
	"Adam(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Adam(0)" -> Adam	[label=assignedFrom];
	optimizers -> keras	[label=importedBy];
	"optimizers(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"optimizers(0)" -> optimizers	[label=assignedFrom];
	np_utils -> "keras.utils"	[label=importedBy];
	"np_utils(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"np_utils(0)" -> np_utils	[label=assignedFrom];
	sklearn -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	preprocessing -> sklearn	[label=importedBy];
	"preprocessing(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"preprocessing(0)" -> preprocessing	[label=assignedFrom];
	"sklearn.metrics" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	"mtr(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"mtr(0)" -> "sklearn.metrics"	[label=assignedFrom];
	"sklearn.model_selection" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	KFold -> "sklearn.model_selection"	[label=importedBy];
	"KFold(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"KFold(0)" -> KFold	[label=assignedFrom];
	GridSearchCV -> "sklearn.model_selection"	[label=importedBy];
	"GridSearchCV(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"GridSearchCV(0)" -> GridSearchCV	[label=assignedFrom];
	mean_squared_error -> "sklearn.metrics"	[label=importedBy];
	"mean_squared_error(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"mean_squared_error(0)" -> mean_squared_error	[label=assignedFrom];
	log_loss -> "sklearn.metrics"	[label=importedBy];
	"log_loss(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"log_loss(0)" -> log_loss	[label=assignedFrom];
	confusion_matrix -> "sklearn.metrics"	[label=importedBy];
	"confusion_matrix(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"confusion_matrix(0)" -> confusion_matrix	[label=assignedFrom];
	"sklearn.preprocessing" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	OneHotEncoder -> "sklearn.preprocessing"	[label=importedBy];
	"OneHotEncoder(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"OneHotEncoder(0)" -> OneHotEncoder	[label=assignedFrom];
	LabelEncoder -> "sklearn.preprocessing"	[label=importedBy];
	"LabelEncoder(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"LabelEncoder(0)" -> LabelEncoder	[label=assignedFrom];
	scale -> "sklearn.preprocessing"	[label=importedBy];
	"scale(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"scale(0)" -> scale	[label=assignedFrom];
	MinMaxScaler -> "sklearn.preprocessing"	[label=importedBy];
	"MinMaxScaler(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"MinMaxScaler(0)" -> MinMaxScaler	[label=assignedFrom];
	StandardScaler -> "sklearn.preprocessing"	[label=importedBy];
	"StandardScaler(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"StandardScaler(0)" -> StandardScaler	[label=assignedFrom];
	model_selection -> sklearn	[label=importedBy];
	"model_selection(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"model_selection(0)" -> model_selection	[label=assignedFrom];
	"sklearn.utils" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	class_weight -> "sklearn.utils"	[label=importedBy];
	"class_weight(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"class_weight(0)" -> class_weight	[label=assignedFrom];
	"SS(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"SS(0)" -> StandardScaler	[label=assignedFrom];
	train_test_split -> "sklearn.model_selection"	[label=importedBy];
	"TTS(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"TTS(0)" -> train_test_split	[label=assignedFrom];
	"RLRP(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"RLRP(0)" -> ReduceLROnPlateau	[label=assignedFrom];
	"ES(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"ES(0)" -> EarlyStopping	[label=assignedFrom];
	"print[75/8]" -> "Carregando arquivo dataset_treino.csv....(1)"	[label=print];
	"train(1)$0" -> "pd(1)"	[label=read_csv];
	"train(1)$0" -> "../dataset/dataset_treino.csv(1)"	[label=read_csv];
	"print[77/8]" -> "train(1)$0"	[label=print];
	"print[77/8]" -> "dataset_treino.csv tem {} linhas and {} colunas(1)"	[label=print];
	"print[77/8]" -> "0(1)"	[label=print];
	"print[77/8]" -> "1(1)"	[label=print];
	"print[79/8]" -> "Carregando arquivo dataset_teste.csv....(1)"	[label=print];
	"test(1)$0" -> "pd(1)"	[label=read_csv];
	"test(1)$0" -> "../dataset/dataset_teste.csv(1)"	[label=read_csv];
	"print[81/8]" -> "0(1)"	[label=print];
	"print[81/8]" -> "1(1)"	[label=print];
	"print[81/8]" -> "test(1)$0"	[label=print];
	"print[81/8]" -> "dataset_teste.csv tem {} linhas and {} colunas(1)"	[label=print];
	"print[85/8]" -> "Carregando arquivo dataset_treino.csv....(1)"	[label=print];
	"train(1)$1" -> "pd(1)"	[label=read_csv];
	"train(1)$1" -> "/kaggle/input/competicao-dsa-machine-learning-dec-2019/dataset_treino.csv(1)"	[label=read_csv];
	"print[87/8]" -> "dataset_treino.csv tem {} linhas and {} colunas(1)"	[label=print];
	"print[87/8]" -> "0(1)"	[label=print];
	"print[87/8]" -> "1(1)"	[label=print];
	"print[87/8]" -> "train(1)$1"	[label=print];
	"print[89/8]" -> "Carregando arquivo dataset_treino.csv....(1)"	[label=print];
	"test(1)$1" -> "pd(1)"	[label=read_csv];
	"test(1)$1" -> "/kaggle/input/competicao-dsa-machine-learning-dec-2019/dataset_teste.csv(1)"	[label=read_csv];
	"print[91/8]" -> "0(1)"	[label=print];
	"print[91/8]" -> "1(1)"	[label=print];
	"print[91/8]" -> "dataset_teste.csv tem {} linhas and {} colunas(1)"	[label=print];
	"print[91/8]" -> "test(1)$1"	[label=print];
	"[<_ast.Constant object at 0x7fd500999430>, <_ast.Constant object at 0x7fd500999ee0>, <_ast.Constant object at 0x7fd500999160>, <_\
ast.Constant object at 0x7fd500999fd0>, <_ast.Constant object at 0x7fd5007f0460>](0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"drop_columns(0)$0" -> "[<_ast.Constant object at 0x7fd500999430>, <_ast.Constant object at 0x7fd500999ee0>, <_ast.Constant object at 0x7fd500999160>, <_\
ast.Constant object at 0x7fd500999fd0>, <_ast.Constant object at 0x7fd5007f0460>](0)"	[label=assignedFrom];
	"train(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"train(0)$0" -> "drop_columns(0)$0"	[label=drop];
	"train(0)$0" -> "train(0)"	[label=drop];
	"train(0)$0" -> "1(0)"	[label=drop];
	"1(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"test(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"test(0)$0" -> "drop_columns(0)$0"	[label=drop];
	"test(0)$0" -> "1(0)"	[label=drop];
	"test(0)$0" -> "test(0)"	[label=drop];
	"c(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"c(0)" -> "train(0)$0"	[label=iteratorOf];
	"c(0)" -> "test(0)$0"	[label=iteratorOf];
	"c(0)" -> "object(0)"	[label=iteratorOf];
	"object(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"train(0)$1" -> "train(0)$0"	[label=assignedFrom];
	"train(0)$1" -> "c(0)"	[label=assignedFrom];
	"train(0)$1" -> "0(0)"	[label=assignedFrom];
	"0(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"test(0)$1" -> "test(0)$0"	[label=assignedFrom];
	"test(0)$1" -> "c(0)"	[label=assignedFrom];
	"test(0)$1" -> "0(0)"	[label=assignedFrom];
	"train(0)$2" -> "train(0)$1"	[label=fillna];
	"train(0)$2" -> "train(0)$2"	[label=fillna];
	"test(0)$2" -> "test(0)$1"	[label=fillna];
	"test(0)$2" -> "train(0)$2"	[label=fillna];
	boruta -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=importedBy];
	BorutaPy -> boruta	[label=importedBy];
	"BorutaPy(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"BorutaPy(0)" -> BorutaPy	[label=assignedFrom];
	"X(0)$0" -> "1(0)"	[label=drop];
	"X(0)$0" -> "train(0)$2"	[label=drop];
	"X(0)$0" -> "[<_ast.Constant object at 0x7fd4c04cca30>, <_ast.Constant object at 0x7fd4c04ccc70>](0)"	[label=drop];
	"[<_ast.Constant object at 0x7fd4c04cca30>, <_ast.Constant object at 0x7fd4c04ccc70>](0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"y(0)$0" -> "train(0)$2"	[label=assignedFrom];
	"y(0)$0" -> "target(0)"	[label=assignedFrom];
	"target(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"X(0)$1" -> "X(0)$0"	[label=assignedFrom];
	"y(0)$1" -> "y(0)$0"	[label=assignedFrom];
	"y(0)$2" -> "y(0)$1"	[label=ravel];
	"rf(0)$0" -> "1(0)"	[label=RandomForestClassifier];
	"rf(0)$0" -> "balanced(0)"	[label=RandomForestClassifier];
	"rf(0)$0" -> "5(0)"	[label=RandomForestClassifier];
	"balanced(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"5(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"rf(0)$1" -> "X(0)$1"	[label=fit];
	"rf(0)$1" -> "y(0)$2"	[label=fit];
	"rf(0)$1" -> "rf(0)$0"	[label=fit];
	"feat_selector(0)$0" -> "1(0)"	[label=BorutaPy];
	"feat_selector(0)$0" -> "rf(0)$1"	[label=BorutaPy];
	"feat_selector(0)$0" -> "100(0)"	[label=BorutaPy];
	"feat_selector(0)$0" -> "2(0)"	[label=BorutaPy];
	"100(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"2(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"feat_selector(0)$1" -> "X(0)$1"	[label=fit];
	"feat_selector(0)$1" -> "y(0)$2"	[label=fit];
	"feat_selector(0)$1" -> "feat_selector(0)$0"	[label=fit];
	"X_filtered(0)$0" -> "X(0)$1"	[label=transform];
	"X_filtered(0)$0" -> "feat_selector(0)$1"	[label=transform];
	"train_x(0)$0" -> "X_filtered(0)$0"	[label=copy];
	"train_y(0)$0" -> "train(0)$2"	[label=assignedFrom];
	"train_y(0)$0" -> "target(0)"	[label=assignedFrom];
	"train_y(0)$1" -> "train_y(0)$0"	[label=to_categorical];
	"scaler(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"train_x(0)$1" -> "scaler(0)"	[label=fit_transform];
	"train_x(0)$1" -> "train_x(0)$1"	[label=fit_transform];
	"gc(0)$0" -> "gc(0)"	[label=collect];
	"x_tr(2)" -> "get_nn[0]"	[label=_argToVar];
	"y_tr(2)" -> "get_nn[1]"	[label=_argToVar];
	"x_val(2)" -> "get_nn[2]"	[label=_argToVar];
	"y_val(2)" -> "get_nn[3]"	[label=_argToVar];
	"shape(2)" -> "get_nn[4]"	[label=_argToVar];
	"K(2)$0" -> "K(2)"	[label=clear_session];
	"inp(2)$0" -> "x_tr(2)"	[label=Input];
	"inp(2)$0" -> "1(2)"	[label=Input];
	"x(2)$0" -> "x_tr(2)"	[label=assignedFrom];
	"x(2)$0" -> "inp(2)$0"	[label=assignedFrom];
	"x(2)$0" -> "1(2)"	[label=assignedFrom];
	"x(2)$0" -> "Dense(2)"	[label=assignedFrom];
	"x(2)$0" -> "512(2)"	[label=assignedFrom];
	"x(2)$0" -> "relu(2)"	[label=assignedFrom];
	"x(2)$1" -> "x(2)$1"	[label=assignedFrom];
	"x(2)$1" -> "Dropout(2)"	[label=assignedFrom];
	"x(2)$1" -> "0.5(2)"	[label=assignedFrom];
	"x(2)$2" -> "x(2)$2"	[label=assignedFrom];
	"x(2)$2" -> "BatchNormalization(2)"	[label=assignedFrom];
	"x(2)$3" -> "Dense(2)"	[label=assignedFrom];
	"x(2)$3" -> "relu(2)"	[label=assignedFrom];
	"x(2)$3" -> "x(2)$3"	[label=assignedFrom];
	"x(2)$3" -> "256(2)"	[label=assignedFrom];
	"x(2)$4" -> "Dropout(2)"	[label=assignedFrom];
	"x(2)$4" -> "0.5(2)"	[label=assignedFrom];
	"x(2)$4" -> "x(2)$4"	[label=assignedFrom];
	"x(2)$5" -> "BatchNormalization(2)"	[label=assignedFrom];
	"x(2)$5" -> "x(2)$5"	[label=assignedFrom];
	"x(2)$6" -> "Dense(2)"	[label=assignedFrom];
	"x(2)$6" -> "relu(2)"	[label=assignedFrom];
	"x(2)$6" -> "x(2)$6"	[label=assignedFrom];
	"x(2)$6" -> "32(2)"	[label=assignedFrom];
	"x(2)$7" -> "Dropout(2)"	[label=assignedFrom];
	"x(2)$7" -> "x(2)$7"	[label=assignedFrom];
	"x(2)$7" -> "0.1(2)"	[label=assignedFrom];
	"x(2)$8" -> "BatchNormalization(2)"	[label=assignedFrom];
	"x(2)$8" -> "x(2)$8"	[label=assignedFrom];
	"x(2)$9" -> "Dense(2)"	[label=assignedFrom];
	"x(2)$9" -> "relu(2)"	[label=assignedFrom];
	"x(2)$9" -> "x(2)$9"	[label=assignedFrom];
	"x(2)$9" -> "16(2)"	[label=assignedFrom];
	"x(2)$10" -> "Dropout(2)"	[label=assignedFrom];
	"x(2)$10" -> "x(2)$10"	[label=assignedFrom];
	"x(2)$10" -> "0.25(2)"	[label=assignedFrom];
	"x(2)$11" -> "BatchNormalization(2)"	[label=assignedFrom];
	"x(2)$11" -> "x(2)$11"	[label=assignedFrom];
	"out(2)$0" -> "Dense(2)"	[label=assignedFrom];
	"out(2)$0" -> "x(2)$11"	[label=assignedFrom];
	"out(2)$0" -> "2(2)"	[label=assignedFrom];
	"out(2)$0" -> "softmax(2)"	[label=assignedFrom];
	"model(2)$0" -> "inp(2)$0"	[label=Model];
	"model(2)$0" -> "out(2)$0"	[label=Model];
	"model(2)$1" -> "model(2)$0"	[label=compile];
	"es(2)$0" -> "1(2)"	[label=EarlyStopping];
	"es(2)$0" -> "val_loss(2)"	[label=EarlyStopping];
	"es(2)$0" -> "min(2)"	[label=EarlyStopping];
	"es(2)$0" -> "True(2)"	[label=EarlyStopping];
	"es(2)$0" -> "20(2)"	[label=EarlyStopping];
	"mc(2)$0" -> "1(2)"	[label=ModelCheckpoint];
	"mc(2)$0" -> "val_loss(2)"	[label=ModelCheckpoint];
	"mc(2)$0" -> "min(2)"	[label=ModelCheckpoint];
	"mc(2)$0" -> "True(2)"	[label=ModelCheckpoint];
	"mc(2)$0" -> "best_model.h5(2)"	[label=ModelCheckpoint];
	"rl(2)$0" -> "1(2)"	[label=ReduceLROnPlateau];
	"rl(2)$0" -> "0.1(2)"	[label=ReduceLROnPlateau];
	"rl(2)$0" -> "val_loss(2)"	[label=ReduceLROnPlateau];
	"rl(2)$0" -> "min(2)"	[label=ReduceLROnPlateau];
	"rl(2)$0" -> "10(2)"	[label=ReduceLROnPlateau];
	"rl(2)$0" -> "0.0001(2)"	[label=ReduceLROnPlateau];
	"model(2)$2" -> "x_tr(2)"	[label=fit];
	"model(2)$2" -> "y_tr(2)"	[label=fit];
	"model(2)$2" -> "model(2)$1"	[label=fit];
	"model(2)$3" -> "best_model.h5(2)"	[label=load_weights];
	"model(2)$3" -> "model(2)$2"	[label=load_weights];
	"y_pred(2)$0" -> "x_val(2)"	[label=predict];
	"y_pred(2)$0" -> "model(2)$3"	[label=predict];
	"y_valid(2)$0" -> "y_val(2)"	[label=assignedFrom];
	"logloss(2)$0" -> "y_pred(2)$0"	[label=log_loss];
	"logloss(2)$0" -> "y_valid(2)$0"	[label=log_loss];
	"logloss(2)$0" -> "1e-15(2)"	[label=log_loss];
	"loop(0)$0" -> "2(0)"	[label=assignedFrom];
	"fold(0)$0" -> "5(0)"	[label=assignedFrom];
	"oof_nn(0)$0" -> "np(0)$0"	[label=zeros];
	"oof_nn(0)$0" -> "[<_ast.Name object at 0x7fd5008208b0>, <_ast.Subscript object at 0x7fd5008208e0>, <_ast.Subscript object at 0x7fd500820a00>](0)"	[label=zeros];
	"[<_ast.Name object at 0x7fd5008208b0>, <_ast.Subscript object at 0x7fd5008208e0>, <_ast.Subscript object at 0x7fd500820a00>](0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"[](0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"models_nn(0)$0" -> "[](0)"	[label=assignedFrom];
	"logloss_csv_nn(0)$0" -> "[](0)"	[label=assignedFrom];
	"range(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"k(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"k(0)" -> "loop(0)$0"	[label=iteratorOf];
	"k(0)" -> "range(0)"	[label=iteratorOf];
	"kfold(0)$0" -> "fold(0)$0"	[label=KFold];
	"kfold(0)$0" -> "k(0)"	[label=KFold];
	"kfold(0)$0" -> "42(0)"	[label=KFold];
	"kfold(0)$0" -> "True(0)"	[label=KFold];
	"42(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"True(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"enumerate(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"k_fold(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"k_fold(0)" -> "train_y(0)$1"	[label=iteratorOf];
	"k_fold(0)" -> "kfold(0)$0"	[label=iteratorOf];
	"k_fold(0)" -> "enumerate(0)"	[label=iteratorOf];
	"tr_inds(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"tr_inds(0)" -> "train_y(0)$1"	[label=iteratorOf];
	"tr_inds(0)" -> "kfold(0)$0"	[label=iteratorOf];
	"tr_inds(0)" -> "enumerate(0)"	[label=iteratorOf];
	"val_inds(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"val_inds(0)" -> "train_y(0)$1"	[label=iteratorOf];
	"val_inds(0)" -> "kfold(0)$0"	[label=iteratorOf];
	"val_inds(0)" -> "enumerate(0)"	[label=iteratorOf];
	"-----------(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[244/8]" -> "-----------(0)"	[label=print];
	"Loop (0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[245/8]" -> "1(0)"	[label=print];
	"print[245/8]" -> "loop(0)$0"	[label=print];
	"print[245/8]" -> "fold(0)$0"	[label=print];
	"print[245/8]" -> "k(0)"	[label=print];
	"print[245/8]" -> "k_fold(0)"	[label=print];
	"print[245/8]" -> "Loop (0)"	[label=print];
	"print[245/8]" -> "/(0)"	[label=print];
	"print[245/8]" -> " Fold (0)"	[label=print];
	"/(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	" Fold (0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[246/8]" -> "-----------(0)"	[label=print];
	"tr_x(0)$0" -> "train_y(0)$1"	[label=assignedFrom];
	"tr_x(0)$0" -> "train_x(0)$1"	[label=assignedFrom];
	"tr_x(0)$0" -> "tr_inds(0)"	[label=assignedFrom];
	"tr_y(0)$0" -> "train_y(0)$1"	[label=assignedFrom];
	"tr_y(0)$0" -> "train_x(0)$1"	[label=assignedFrom];
	"tr_y(0)$0" -> "tr_inds(0)"	[label=assignedFrom];
	"val_x(0)$0" -> "train_y(0)$1"	[label=assignedFrom];
	"val_x(0)$0" -> "train_x(0)$1"	[label=assignedFrom];
	"val_x(0)$0" -> "val_inds(0)"	[label=assignedFrom];
	"val_y(0)$0" -> "train_y(0)$1"	[label=assignedFrom];
	"val_y(0)$0" -> "train_x(0)$1"	[label=assignedFrom];
	"val_y(0)$0" -> "val_inds(0)"	[label=assignedFrom];
	"nn(0)$0" -> "0(0)"	[label=get_nn];
	"nn(0)$0" -> "tr_x(0)$0"	[label=get_nn];
	"nn(0)$0" -> "tr_y(0)$0"	[label=get_nn];
	"nn(0)$0" -> "val_x(0)$0"	[label=get_nn];
	"nn(0)$0" -> "val_y(0)$0"	[label=get_nn];
	"logloss_nn(0)$0" -> "0(0)"	[label=get_nn];
	"logloss_nn(0)$0" -> "tr_x(0)$0"	[label=get_nn];
	"logloss_nn(0)$0" -> "tr_y(0)$0"	[label=get_nn];
	"logloss_nn(0)$0" -> "val_x(0)$0"	[label=get_nn];
	"logloss_nn(0)$0" -> "val_y(0)$0"	[label=get_nn];
	"models_nn(0)$1" -> "models_nn(0)$0"	[label=append];
	"models_nn(0)$1" -> "nn(0)$0"	[label=append];
	"the \%d fold Log-Loss (NN) is \%f(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[254/8]" -> "1(0)"	[label=print];
	"print[254/8]" -> "k_fold(0)"	[label=print];
	"print[254/8]" -> "logloss_nn(0)$0"	[label=print];
	"print[254/8]" -> "the \%d fold Log-Loss (NN) is \%f(0)"	[label=print];
	"logloss_csv_nn(0)$1" -> "logloss_csv_nn(0)$0"	[label=append];
	"logloss_csv_nn(0)$1" -> "logloss_nn(0)$0"	[label=append];
	"oof_nn(0)$1" -> "oof_nn(0)$0"	[label=predict];
	"oof_nn(0)$1" -> "val_x(0)$0"	[label=predict];
	"oof_nn(0)$1" -> "nn(0)$0"	[label=predict];
	"PARTIAL: mean Log-Loss (NN) is \%f(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[260/4]" -> "np(0)$0"	[label=print];
	"print[260/4]" -> "logloss_csv_nn(0)$1"	[label=print];
	"print[260/4]" -> "PARTIAL: mean Log-Loss (NN) is \%f(0)"	[label=print];
	"loss_oof_nn(0)$0" -> "[](0)"	[label=assignedFrom];
	"loss_oof_nn(0)$1" -> "log_loss(0)"	[label=append];
	"loss_oof_nn(0)$1" -> "train_y(0)$1"	[label=append];
	"loss_oof_nn(0)$1" -> "k(0)"	[label=append];
	"loss_oof_nn(0)$1" -> "oof_nn(0)$1"	[label=append];
	"loss_oof_nn(0)$1" -> "loss_oof_nn(0)$0"	[label=append];
	"loss_oof_nn(0)$1" -> "Ellipsis(0)"	[label=append];
	"loss_oof_nn(0)$1" -> "1e-15(0)"	[label=append];
	"Ellipsis(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"1e-15(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"Média log-loss:  \%f(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[267/0]" -> "np(0)$0"	[label=print];
	"print[267/0]" -> "logloss_csv_nn(0)$1"	[label=print];
	"print[267/0]" -> "Média log-loss:  \%f(0)"	[label=print];
	"Média OOF log-loss: \%f(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"print[268/0]" -> "np(0)$0"	[label=print];
	"print[268/0]" -> "loss_oof_nn(0)$1"	[label=print];
	"print[268/0]" -> "Média OOF log-loss: \%f(0)"	[label=print];
	"plt(0)$0" -> "plt(0)"	[label=figure];
	"plt(0)$1" -> "1(0)"	[label=subplot];
	"plt(0)$1" -> "2(0)"	[label=subplot];
	"plt(0)$1" -> "plt(0)$0"	[label=subplot];
	"plt(0)$2" -> "0(0)"	[label=plot];
	"plt(0)$2" -> "models_nn(0)$1"	[label=plot];
	"plt(0)$2" -> "plt(0)$1"	[label=plot];
	"plt(0)$2" -> "loss(0)"	[label=plot];
	"plt(0)$2" -> "o-(0)"	[label=plot];
	"loss(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"o-(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"plt(0)$3" -> "0(0)"	[label=plot];
	"plt(0)$3" -> "models_nn(0)$1"	[label=plot];
	"plt(0)$3" -> "plt(0)$2"	[label=plot];
	"plt(0)$3" -> "o-(0)"	[label=plot];
	"plt(0)$3" -> "val_loss(0)"	[label=plot];
	"val_loss(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"plt(0)$4" -> "1(0)"	[label=axhline];
	"plt(0)$4" -> "plt(0)$3"	[label=axhline];
	"plt(0)$5" -> "plt(0)$4"	[label=legend];
	"plt(0)$6" -> "1(0)"	[label=subplot];
	"plt(0)$6" -> "2(0)"	[label=subplot];
	"plt(0)$6" -> "plt(0)$5"	[label=subplot];
	"plt(0)$7" -> "0(0)"	[label=plot];
	"plt(0)$7" -> "models_nn(0)$1"	[label=plot];
	"plt(0)$7" -> "o-(0)"	[label=plot];
	"plt(0)$7" -> "plt(0)$6"	[label=plot];
	"plt(0)$7" -> "categorical_accuracy(0)"	[label=plot];
	"categorical_accuracy(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"plt(0)$8" -> "0(0)"	[label=plot];
	"plt(0)$8" -> "models_nn(0)$1"	[label=plot];
	"plt(0)$8" -> "o-(0)"	[label=plot];
	"plt(0)$8" -> "plt(0)$7"	[label=plot];
	"plt(0)$8" -> "val_categorical_accuracy(0)"	[label=plot];
	"val_categorical_accuracy(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"plt(0)$9" -> "plt(0)$8"	[label=axhline];
	"plt(0)$9" -> "0.7(0)"	[label=axhline];
	"0.7(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"plt(0)$10" -> "plt(0)$9"	[label=legend];
	"plt(0)$11" -> "plt(0)$10"	[label=show];
	"new_test(0)$0" -> "1(0)"	[label=assignedFrom];
	"new_test(0)$0" -> "test(0)$2"	[label=assignedFrom];
	"new_test(0)$0" -> "[<_ast.Constant object at 0x7fd500828370>](0)"	[label=assignedFrom];
	"[<_ast.Constant object at 0x7fd500828370>](0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"test_filtered(0)$0" -> "feat_selector(0)$1"	[label=transform];
	"test_filtered(0)$0" -> "new_test(0)$0"	[label=transform];
	"test_filtered(0)$1" -> "scaler(0)"	[label=fit_transform];
	"test_filtered(0)$1" -> "test_filtered(0)$1"	[label=fit_transform];
	"model(3)" -> "predict_proba[0]"	[label=_argToVar];
	"x(3)" -> "predict_proba[1]"	[label=_argToVar];
	"batch_size(3)" -> "predict_proba[2]"	[label=_argToVar];
	"verbose(3)" -> "predict_proba[3]"	[label=_argToVar];
	"preds(3)$0" -> "model(3)"	[label=predict];
	"preds(3)$0" -> "x(3)"	[label=predict];
	"preds(3)$0" -> "batch_size(3)"	[label=predict];
	"preds(3)$0" -> "verbose(3)"	[label=predict];
	"warnings(3)$0" -> "warnings(3)"	[label=warn];
	"warnings(3)$0" -> "Network returning invalid probability values.(3)"	[label=warn];
	"x_te(4)" -> "predict[0]"	[label=_argToVar];
	"models_nn(4)" -> "predict[1]"	[label=_argToVar];
	"model_num_nn(4)$0" -> "models_nn(4)"	[label=len];
	"k(4)" -> "models_nn(4)"	[label=iteratorOf];
	"k(4)" -> "enumerate(4)"	[label=iteratorOf];
	"m(4)" -> "models_nn(4)"	[label=iteratorOf];
	"m(4)" -> "enumerate(4)"	[label=iteratorOf];
	"y_pred_nn(4)$0" -> "x_te(4)"	[label=predict_proba];
	"y_pred_nn(4)$0" -> "m(4)"	[label=predict_proba];
	"y_pred_nn(4)$0" -> "1024(4)"	[label=predict_proba];
	"y_pred_nn(4)$1" -> "x_te(4)"	[label=Add];
	"y_pred_nn(4)$1" -> "m(4)"	[label=Add];
	"y_pred_nn(4)$1" -> "y_pred_nn(4)$0"	[label=Add];
	"y_pred_nn(4)$1" -> "1024(4)"	[label=Add];
	"y_pred_nn(4)$1" -> "predict_proba(4)"	[label=Add];
	"y_pred_nn(4)$2" -> "model_num_nn(4)$0"	[label=Div];
	"y_pred_nn(4)$2" -> "y_pred_nn(4)$1"	[label=Div];
	"test_pred(0)$0" -> "models_nn(0)$1"	[label=predict];
	"test_pred(0)$0" -> "test_filtered(0)$1"	[label=predict];
	"submission(0)$0" -> "pd(0)$1"	[label=read_csv];
	"submission(0)$0" -> "/kaggle/input/competicao-dsa-machine-learning-dec-2019/sample_submission.csv(0)"	[label=read_csv];
	"/kaggle/input/competicao-dsa-machine-learning-dec-2019/sample_submission.csv(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"submission(0)$1" -> "1(0)"	[label=assignedFrom];
	"submission(0)$1" -> "test_pred(0)$0"	[label=assignedFrom];
	"submission(0)$1" -> "submission(0)$0"	[label=assignedFrom];
	"print[312/0]" -> "submission(0)$1"	[label=print];
	"submission(0)$2" -> "submission(0)$1"	[label=head];
	"submission(0)$3" -> "submission(0)$2"	[label=to_csv];
	"submission(0)$3" -> "submission_nn_v1.0.2.csv(0)"	[label=to_csv];
	"submission_nn_v1.0.2.csv(0)" -> "kernel-nn-multi-layer-perceptron.ipynb"	[label=appearsIn];
	"submission(0)$4" -> "submission(0)$3"	[label=value_counts];
	"plt(0)$12" -> "plt(0)$11"	[label=hist];
	"plt(0)$12" -> "submission(0)$4"	[label=hist];
	"plt(0)$13" -> "plt(0)$12"	[label=show];
}
