digraph "" {
	numpy -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"np(0)" -> numpy	[label=assignedFrom];
	"np(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	pandas -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"pd(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"pd(0)" -> pandas	[label=assignedFrom];
	os -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"os(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"os(0)" -> os	[label=assignedFrom];
	sys -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"sys(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"sys(0)" -> sys	[label=assignedFrom];
	random -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"random(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"random(0)" -> random	[label=assignedFrom];
	keras -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"keras(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"keras(0)" -> keras	[label=assignedFrom];
	tensorflow -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"tf(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"tf(0)" -> tensorflow	[label=assignedFrom];
	json -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"json(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"json(0)" -> json	[label=assignedFrom];
	gc -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"gc(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"gc(0)" -> gc	[label=assignedFrom];
	tqdm -> "bert-and-bidaf.ipynb"	[label=importedBy];
	tqdm -> tqdm	[label=importedBy];
	"tqdm(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"tqdm(0)" -> tqdm	[label=assignedFrom];
	"sys(0)$0" -> "sys(0)"	[label=insert];
	"sys(0)$0" -> "0(0)"	[label=insert];
	"sys(0)$0" -> "../input/pretrained-bert-including-scripts/master/bert-master(0)"	[label=insert];
	"0(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"../input/pretrained-bert-including-scripts/master/bert-master(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"../input/pretrained-bert-including-scripts/uncased_l-12_h-768_a-12/uncased_L-12_H-768_A-12(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"BERT_PRETRAINED_DIR(0)$0" -> "../input/pretrained-bert-including-scripts/uncased_l-12_h-768_a-12/uncased_L-12_H-768_A-12(0)"	[label=assignedFrom];
	"***** BERT pretrained directory: {} *****(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"print[16/0]" -> "BERT_PRETRAINED_DIR(0)$0"	[label=print];
	"print[16/0]" -> "***** BERT pretrained directory: {} *****(0)"	[label=print];
	tokenization -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"tokenization(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"tokenization(0)" -> tokenization	[label=assignedFrom];
	"tensorflow.keras.models" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	Model -> "tensorflow.keras.models"	[label=importedBy];
	Model -> "keras.models"	[label=importedBy];
	"keras.models" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	"Model(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"Model(0)" -> Model	[label=assignedFrom];
	"tensorflow.python.ops.rnn_cell" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	DropoutWrapper -> "tensorflow.python.ops.rnn_cell"	[label=importedBy];
	"DropoutWrapper(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"DropoutWrapper(0)" -> DropoutWrapper	[label=assignedFrom];
	"tensorflow.python.ops" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	variable_scope -> "tensorflow.python.ops"	[label=importedBy];
	"vs(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"vs(0)" -> variable_scope	[label=assignedFrom];
	"tensorflow.keras.layers" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	GRU -> "tensorflow.keras.layers"	[label=importedBy];
	"GRU(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"GRU(0)" -> GRU	[label=assignedFrom];
	Bidirectional -> "tensorflow.keras.layers"	[label=importedBy];
	"Bidirectional(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"Bidirectional(0)" -> Bidirectional	[label=assignedFrom];
	Layer -> "tensorflow.keras.layers"	[label=importedBy];
	"Layer(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"Layer(0)" -> Layer	[label=assignedFrom];
	Dense -> "tensorflow.keras.layers"	[label=importedBy];
	"Dense(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"Dense(0)" -> Dense	[label=assignedFrom];
	"keras_bert.keras_bert.bert" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	get_model -> "keras_bert.keras_bert.bert"	[label=importedBy];
	"get_model(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"get_model(0)" -> get_model	[label=assignedFrom];
	"keras_bert.keras_bert.loader" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	load_trained_model_from_checkpoint -> "keras_bert.keras_bert.loader"	[label=importedBy];
	"load_trained_model_from_checkpoint(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"load_trained_model_from_checkpoint(0)" -> load_trained_model_from_checkpoint	[label=assignedFrom];
	"keras.optimizers" -> "bert-and-bidaf.ipynb"	[label=importedBy];
	Adam -> "keras.optimizers"	[label=importedBy];
	"Adam(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"Adam(0)" -> Adam	[label=assignedFrom];
	"2e-05(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"adam(0)$0" -> "2e-05(0)"	[label=Adam];
	"adam(0)$0" -> "0.01(0)"	[label=Adam];
	"0.01(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"begin_build(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"print[28/0]" -> "begin_build(0)"	[label=print];
	"config_file(0)$0" -> "os(0)"	[label=join];
	"config_file(0)$0" -> "BERT_PRETRAINED_DIR(0)$0"	[label=join];
	"config_file(0)$0" -> "bert_config.json(0)"	[label=join];
	"bert_config.json(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"checkpoint_file(0)$0" -> "os(0)"	[label=join];
	"checkpoint_file(0)$0" -> "BERT_PRETRAINED_DIR(0)$0"	[label=join];
	"checkpoint_file(0)$0" -> "bert_model.ckpt(0)"	[label=join];
	"bert_model.ckpt(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"sys(0)$1" -> "sys(0)$0"	[label=insert];
	"sys(0)$1" -> "0(0)"	[label=insert];
	"sys(0)$1" -> "../input/bert-and-bidaf/model_bidaf.h5(0)"	[label=insert];
	"../input/bert-and-bidaf/model_bidaf.h5(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"512(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"cont_len(0)$0" -> "512(0)"	[label=assignedFrom];
	"126(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"ques_len(0)$0" -> "126(0)"	[label=assignedFrom];
	"cont_model(0)$0" -> "config_file(0)$0"	[label=load_trained_model_from_checkpoint];
	"cont_model(0)$0" -> "checkpoint_file(0)$0"	[label=load_trained_model_from_checkpoint];
	"cont_model(0)$0" -> "cont_len(0)$0"	[label=load_trained_model_from_checkpoint];
	"cont_model(0)$0" -> "False(0)"	[label=load_trained_model_from_checkpoint];
	"False(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"ques_model(0)$0" -> "config_file(0)$0"	[label=load_trained_model_from_checkpoint];
	"ques_model(0)$0" -> "checkpoint_file(0)$0"	[label=load_trained_model_from_checkpoint];
	"ques_model(0)$0" -> "ques_len(0)$0"	[label=load_trained_model_from_checkpoint];
	"ques_model(0)$0" -> "False(0)"	[label=load_trained_model_from_checkpoint];
	"cont_model(0)$1" -> "cont_model(0)$0"	[label=assignedFrom];
	"cont_model(0)$1" -> "False(0)"	[label=assignedFrom];
	"ques_model(0)$1" -> "False(0)"	[label=assignedFrom];
	"ques_model(0)$1" -> "ques_model(0)$0"	[label=assignedFrom];
	"dict_path(0)$0" -> "os(0)"	[label=join];
	"dict_path(0)$0" -> "BERT_PRETRAINED_DIR(0)$0"	[label=join];
	"dict_path(0)$0" -> "vocab.txt(0)"	[label=join];
	"vocab.txt(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"tokenizer(0)$0" -> "tokenization(0)"	[label=FullTokenizer];
	"tokenizer(0)$0" -> "dict_path(0)$0"	[label=FullTokenizer];
	"tokenizer(0)$0" -> "True(0)"	[label=FullTokenizer];
	"True(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"tokens(1)" -> "get_masks[0]"	[label=_argToVar];
	"max_seq_length(1)" -> "get_masks[1]"	[label=_argToVar];
	"print[47/8]" -> "Token length more than max seq length!(1)"	[label=print];
	"tokens(2)" -> "get_segments[0]"	[label=_argToVar];
	"max_seq_length(2)" -> "get_segments[1]"	[label=_argToVar];
	"segments(2)$0" -> "[](2)"	[label=assignedFrom];
	"current_segment_id(2)$0" -> "0(2)"	[label=assignedFrom];
	"token(2)" -> "tokens(2)"	[label=iteratorOf];
	"segments(2)$1" -> "segments(2)$0"	[label=append];
	"segments(2)$1" -> "current_segment_id(2)$0"	[label=append];
	"current_segment_id(2)$1" -> "1(2)"	[label=assignedFrom];
	"tokens(3)" -> "get_ids[0]"	[label=_argToVar];
	"tokenizer(3)" -> "get_ids[1]"	[label=_argToVar];
	"max_seq_length(3)" -> "get_ids[2]"	[label=_argToVar];
	"token_ids(3)$0" -> "tokens(3)"	[label=convert_tokens_to_ids];
	"token_ids(3)$0" -> "tokenizer(3)"	[label=convert_tokens_to_ids];
	"input_ids(3)$0" -> "max_seq_length(3)"	[label=Add];
	"input_ids(3)$0" -> "token_ids(3)$0"	[label=Add];
	"input_ids(3)$0" -> "[<_ast.Constant object at 0x7fd500836100>](3)"	[label=Add];
	"input_ids(3)$0" -> "len(3)"	[label=Add];
	"dirname(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"dirname(0)" -> "os(0)"	[label=iteratorOf];
	"dirname(0)" -> "/kaggle/input(0)"	[label=iteratorOf];
	"/kaggle/input(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"_(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"_(0)" -> "os(0)"	[label=iteratorOf];
	"_(0)" -> "/kaggle/input(0)"	[label=iteratorOf];
	"filenames(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"filenames(0)" -> "os(0)"	[label=iteratorOf];
	"filenames(0)" -> "/kaggle/input(0)"	[label=iteratorOf];
	"filename(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"filename(0)" -> "filenames(0)"	[label=iteratorOf];
	"print[76/8]" -> "os(0)"	[label=print];
	"print[76/8]" -> "dirname(0)"	[label=print];
	"print[76/8]" -> "filename(0)"	[label=print];
	"/kaggle/input/tensorflow2-question-answering/(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"path(0)$0" -> "/kaggle/input/tensorflow2-question-answering/(0)"	[label=assignedFrom];
	"simplified-nq-train.jsonl(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"train_path(0)$0" -> "simplified-nq-train.jsonl(0)"	[label=assignedFrom];
	"simplified-nq-test.jsonl(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"test_path(0)$0" -> "simplified-nq-test.jsonl(0)"	[label=assignedFrom];
	"sample_submission.csv(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"sample_submission_path(0)$0" -> "sample_submission.csv(0)"	[label=assignedFrom];
	"path(4)" -> "read_data[0]"	[label=_argToVar];
	"sample(4)" -> "read_data[1]"	[label=_argToVar];
	"chunksize(4)" -> "read_data[2]"	[label=_argToVar];
	"df(4)$0" -> "[](4)"	[label=assignedFrom];
	"i(4)" -> "chunksize(4)"	[label=iteratorOf];
	"i(4)" -> "range(4)"	[label=iteratorOf];
	"df(4)$1" -> "df(4)$0"	[label=append];
	"df(4)$1" -> "json(4)"	[label=append];
	"df(4)$1" -> "reader(4)"	[label=append];
	"df(4)$2" -> "df(4)$2"	[label=DataFrame];
	"df(4)$2" -> "pd(4)"	[label=DataFrame];
	"print[89/8]" -> "df(4)$2"	[label=print];
	"print[89/8]" -> "Our sampled dataset have {} rows and {} columns(4)"	[label=print];
	"print[89/8]" -> "0(4)"	[label=print];
	"print[89/8]" -> "1(4)"	[label=print];
	"df(4)$3" -> "path(4)"	[label=read_json];
	"df(4)$3" -> "pd(4)"	[label=read_json];
	"df(4)$3" -> "records(4)"	[label=read_json];
	"df(4)$3" -> "True(4)"	[label=read_json];
	"print[92/8]" -> "0(4)"	[label=print];
	"print[92/8]" -> "1(4)"	[label=print];
	"print[92/8]" -> "df(4)$3"	[label=print];
	"print[92/8]" -> "Our dataset have {} rows and {} columns(4)"	[label=print];
	"gc(4)$0" -> "gc(4)"	[label=collect];
	"train(0)$0" -> "True(0)"	[label=read_data];
	"train(0)$0" -> "path(0)$0"	[label=read_data];
	"train(0)$0" -> "train_path(0)$0"	[label=read_data];
	"test(0)$0" -> "False(0)"	[label=read_data];
	"test(0)$0" -> "path(0)$0"	[label=read_data];
	"test(0)$0" -> "test_path(0)$0"	[label=read_data];
	"train(0)$1" -> "train(0)$0"	[label=head];
	"self(6)" -> "__init__[0]"	[label=_argToVar];
	"super(6)$0" -> "super(6)"	[label=__init__];
	"self(6)$0" -> "self(6)"	[label=assignedFrom];
	"self(6)$0" -> "False(6)"	[label=assignedFrom];
	"init_op(6)$0" -> "tf(6)"	[label=assignedFrom];
	"self(7)" -> "build[0]"	[label=_argToVar];
	"input_shape(7)" -> "build[1]"	[label=_argToVar];
	"print[107/8]" -> "input_shape(7)"	[label=print];
	"self(7)$0" -> "self(7)"	[label=add_weight];
	"self(7)$0" -> "S_W(7)"	[label=add_weight];
	"self(7)$0" -> "768(7)"	[label=add_weight];
	"self(7)$0" -> "3(7)"	[label=add_weight];
	"self(7)$0" -> "uniform(7)"	[label=add_weight];
	"self(7)$0" -> "True(7)"	[label=add_weight];
	"init_op(7)$0" -> "tf(7)"	[label=assignedFrom];
	"super(7)$0" -> "input_shape(7)"	[label=build];
	"super(7)$0" -> "super(7)"	[label=build];
	"self(8)" -> "call[0]"	[label=_argToVar];
	"ccmqqm(8)" -> "call[1]"	[label=_argToVar];
	"c(8)$0" -> "ccmqqm(8)"	[label=assignedFrom];
	"c(8)$0" -> "0(8)"	[label=assignedFrom];
	"c_mask(8)$0" -> "ccmqqm(8)"	[label=assignedFrom];
	"c_mask(8)$0" -> "1(8)"	[label=assignedFrom];
	"q(8)$0" -> "ccmqqm(8)"	[label=assignedFrom];
	"q(8)$0" -> "2(8)"	[label=assignedFrom];
	"q_mask(8)$0" -> "ccmqqm(8)"	[label=assignedFrom];
	"q_mask(8)$0" -> "3(8)"	[label=assignedFrom];
	"c_expand(8)$0" -> "c(8)$0"	[label=expand_dims];
	"c_expand(8)$0" -> "2(8)"	[label=expand_dims];
	"c_expand(8)$0" -> "tf(8)"	[label=expand_dims];
	"q_expand(8)$0" -> "1(8)"	[label=expand_dims];
	"q_expand(8)$0" -> "q(8)$0"	[label=expand_dims];
	"q_expand(8)$0" -> "tf(8)"	[label=expand_dims];
	"c_pointWise_q(8)$0" -> "c_expand(8)$0"	[label=Mult];
	"c_pointWise_q(8)$0" -> "q_expand(8)$0"	[label=Mult];
	"c_input(8)$0" -> "c_expand(8)$0"	[label=tile];
	"c_input(8)$0" -> "tf(8)"	[label=tile];
	"c_input(8)$0" -> "[<_ast.Constant object at 0x7fd50080d9a0>, <_ast.Constant object at 0x7fd50080dd30>, <_ast.Subscript object at 0x7fd50080d400>, <_\
ast.Constant object at 0x7fd50080df70>](8)"	[label=tile];
	"q_input(8)$0" -> "tf(8)"	[label=tile];
	"q_input(8)$0" -> "q_expand(8)$0"	[label=tile];
	"q_input(8)$0" -> "[<_ast.Constant object at 0x7fd4c04d8370>, <_ast.Subscript object at 0x7fd4c04d8dc0>, <_ast.Constant object at 0x7fd4c04d8970>, <_\
ast.Constant object at 0x7fd4c04d8670>](8)"	[label=tile];
	"concat_input(8)$0" -> "1(8)"	[label=concat];
	"concat_input(8)$0" -> "tf(8)"	[label=concat];
	"concat_input(8)$0" -> "[<_ast.Name object at 0x7fd4c04d8220>, <_ast.Name object at 0x7fd4c04d8af0>, <_ast.Name object at 0x7fd4c04d8e50>](8)"	[label=concat];
	"print[129/8]" -> "concat_input(8)$0"	[label=print];
	"print[129/8]" -> "concat_in(8)"	[label=print];
	"similarity(8)$0" -> "self(8)"	[label=reduce_sum];
	"similarity(8)$0" -> "1(8)"	[label=reduce_sum];
	"similarity(8)$0" -> "tf(8)"	[label=reduce_sum];
	"similarity(8)$0" -> "concat_input(8)$0"	[label=reduce_sum];
	"print[131/8]" -> "similarity(8)$0"	[label=print];
	"similarity_mask(8)$0" -> "1(8)"	[label=expand_dims];
	"similarity_mask(8)$0" -> "q_mask(8)$0"	[label=expand_dims];
	"similarity_mask(8)$0" -> "tf(8)"	[label=expand_dims];
	"print[134/8]" -> "similarity_mask(8)$0"	[label=print];
	"print[134/8]" -> "sim mask(8)"	[label=print];
	"exp_mask_c2q(8)$0" -> "1(8)"	[label=Mult];
	"exp_mask_c2q(8)$0" -> "tf(8)"	[label=Mult];
	"exp_mask_c2q(8)$0" -> "similarity_mask(8)$0"	[label=Mult];
	"exp_mask_c2q(8)$0" -> "float(8)"	[label=Mult];
	"exp_mask_c2q(8)$0" -> "1e+30(8)"	[label=Mult];
	"print[136/8]" -> "exp_mask_c2q(8)$0"	[label=print];
	"print[136/8]" -> "exp mask(8)"	[label=print];
	"masked_logits_c2q(8)$0" -> "tf(8)"	[label=add];
	"masked_logits_c2q(8)$0" -> "similarity(8)$0"	[label=add];
	"masked_logits_c2q(8)$0" -> "exp_mask_c2q(8)$0"	[label=add];
	"c2q_dist(8)$0" -> "1(8)"	[label=softmax];
	"c2q_dist(8)$0" -> "tf(8)"	[label=softmax];
	"c2q_dist(8)$0" -> "masked_logits_c2q(8)$0"	[label=softmax];
	"c2q(8)$0" -> "q(8)$0"	[label=matmul];
	"c2q(8)$0" -> "tf(8)"	[label=matmul];
	"c2q(8)$0" -> "c2q_dist(8)$0"	[label=matmul];
	"S_max(8)$0" -> "2(8)"	[label=reduce_max];
	"S_max(8)$0" -> "tf(8)"	[label=reduce_max];
	"S_max(8)$0" -> "similarity(8)$0"	[label=reduce_max];
	"exp_mask_S(8)$0" -> "c_mask(8)$0"	[label=Mult];
	"exp_mask_S(8)$0" -> "1(8)"	[label=Mult];
	"exp_mask_S(8)$0" -> "tf(8)"	[label=Mult];
	"exp_mask_S(8)$0" -> "float(8)"	[label=Mult];
	"exp_mask_S(8)$0" -> "1e+30(8)"	[label=Mult];
	"masked_logits_S(8)$0" -> "tf(8)"	[label=add];
	"masked_logits_S(8)$0" -> "S_max(8)$0"	[label=add];
	"masked_logits_S(8)$0" -> "exp_mask_S(8)$0"	[label=add];
	"c_dash_dist(8)$0" -> "1(8)"	[label=softmax];
	"c_dash_dist(8)$0" -> "tf(8)"	[label=softmax];
	"c_dash_dist(8)$0" -> "masked_logits_S(8)$0"	[label=softmax];
	"c_dash_dist_expand(8)$0" -> "1(8)"	[label=expand_dims];
	"c_dash_dist_expand(8)$0" -> "tf(8)"	[label=expand_dims];
	"c_dash_dist_expand(8)$0" -> "c_dash_dist(8)$0"	[label=expand_dims];
	"c_dash(8)$0" -> "c(8)$0"	[label=matmul];
	"c_dash(8)$0" -> "tf(8)"	[label=matmul];
	"c_dash(8)$0" -> "c_dash_dist_expand(8)$0"	[label=matmul];
	"c_c2q(8)$0" -> "c(8)$0"	[label=Mult];
	"c_c2q(8)$0" -> "c2q(8)$0"	[label=Mult];
	"print[154/8]" -> "c_c2q(8)$0"	[label=print];
	"c_c_dash(8)$0" -> "c(8)$0"	[label=Mult];
	"c_c_dash(8)$0" -> "c_dash(8)$0"	[label=Mult];
	"print[156/8]" -> "c_c_dash(8)$0"	[label=print];
	"print[156/8]" -> "cdash(8)"	[label=print];
	"output(8)$0" -> "2(8)"	[label=concat];
	"output(8)$0" -> "tf(8)"	[label=concat];
	"output(8)$0" -> "[<_ast.Name object at 0x7fd5007f0430>, <_ast.Name object at 0x7fd5007f0b20>, <_ast.Name object at 0x7fd5007f0490>](8)"	[label=concat];
	"attn_output(8)$0" -> "tf(8)"	[label=dropout];
	"attn_output(8)$0" -> "output(8)$0"	[label=dropout];
	"attn_output(8)$0" -> "0.9(8)"	[label=dropout];
	"blended_reps(8)$0" -> "2(8)"	[label=concat];
	"blended_reps(8)$0" -> "tf(8)"	[label=concat];
	"blended_reps(8)$0" -> "[<_ast.Name object at 0x7fd5007f02e0>, <_ast.Name object at 0x7fd5007f0df0>](8)"	[label=concat];
	"print[164/8]" -> "blended_reps(8)$0"	[label=print];
	"print[164/8]" -> "blended(8)"	[label=print];
	"self(10)" -> "__init__[0]"	[label=_argToVar];
	"super(10)$0" -> "super(10)"	[label=__init__];
	"self(10)$0" -> "self(10)"	[label=assignedFrom];
	"self(10)$0" -> "False(10)"	[label=assignedFrom];
	"self(11)" -> "build[0]"	[label=_argToVar];
	"input_shape(11)" -> "build[1]"	[label=_argToVar];
	"print[176/8]" -> "input_shape(11)"	[label=print];
	"super(11)$0" -> "input_shape(11)"	[label=build];
	"super(11)$0" -> "super(11)"	[label=build];
	"self(12)" -> "call[0]"	[label=_argToVar];
	"lcm(12)" -> "call[1]"	[label=_argToVar];
	"logits_start(12)$0" -> "lcm(12)"	[label=assignedFrom];
	"logits_start(12)$0" -> "0(12)"	[label=assignedFrom];
	"c_mask(12)$0" -> "lcm(12)"	[label=assignedFrom];
	"c_mask(12)$0" -> "1(12)"	[label=assignedFrom];
	"logits_start(12)$1" -> "logits_start(12)$1"	[label=squeeze];
	"logits_start(12)$1" -> "tf(12)"	[label=squeeze];
	"logits_start(12)$1" -> "[<_ast.Constant object at 0x7fd4c04ff4f0>](12)"	[label=squeeze];
	"exp_mask_start(12)$0" -> "c_mask(12)$0"	[label=Mult];
	"exp_mask_start(12)$0" -> "1(12)"	[label=Mult];
	"exp_mask_start(12)$0" -> "tf(12)"	[label=Mult];
	"exp_mask_start(12)$0" -> "float(12)"	[label=Mult];
	"exp_mask_start(12)$0" -> "1e+30(12)"	[label=Mult];
	"masked_logits_start(12)$0" -> "logits_start(12)$1"	[label=add];
	"masked_logits_start(12)$0" -> "tf(12)"	[label=add];
	"masked_logits_start(12)$0" -> "exp_mask_start(12)$0"	[label=add];
	"start_prob(12)$0" -> "1(12)"	[label=softmax];
	"start_prob(12)$0" -> "tf(12)"	[label=softmax];
	"start_prob(12)$0" -> "masked_logits_start(12)$0"	[label=softmax];
	"cont_embs(0)$0" -> "tf(0)"	[label=Input];
	"cont_embs(0)$0" -> "cont_len(0)$0"	[label=Input];
	"cont_embs(0)$0" -> "cont_embs(0)$0"	[label=Input];
	"cont_embs(0)$0" -> "768(0)"	[label=Input];
	"768(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"cont_masks(0)$0" -> "tf(0)"	[label=Input];
	"cont_masks(0)$0" -> "cont_len(0)$0"	[label=Input];
	"cont_masks(0)$0" -> "cont_masks(0)$0"	[label=Input];
	"ques_embs(0)$0" -> "tf(0)"	[label=Input];
	"ques_embs(0)$0" -> "ques_len(0)$0"	[label=Input];
	"ques_embs(0)$0" -> "768(0)"	[label=Input];
	"ques_embs(0)$0" -> "ques_embs(0)$0"	[label=Input];
	"ques_masks(0)$0" -> "tf(0)"	[label=Input];
	"ques_masks(0)$0" -> "ques_len(0)$0"	[label=Input];
	"ques_masks(0)$0" -> "ques_masks(0)$0"	[label=Input];
	"[<_ast.Name object at 0x7fd5008370a0>, <_ast.Name object at 0x7fd500837160>, <_ast.Name object at 0x7fd5008370d0>, <_ast.Name object \
at 0x7fd500837070>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"blended_reps(0)$0" -> "[<_ast.Name object at 0x7fd5008370a0>, <_ast.Name object at 0x7fd500837160>, <_ast.Name object at 0x7fd5008370d0>, <_ast.Name object \
at 0x7fd500837070>](0)"	[label=bidaf_model_partA];
	"blended_reps_final(0)$0" -> "GRU(0)"	[label=assignedFrom];
	"blended_reps_final(0)$0" -> "Bidirectional(0)"	[label=assignedFrom];
	"blended_reps_final(0)$0" -> "True(0)"	[label=assignedFrom];
	"blended_reps_final(0)$0" -> "blended_reps(0)$0"	[label=assignedFrom];
	"blended_reps_final(0)$0" -> "128(0)"	[label=assignedFrom];
	"blended_reps_final(0)$0" -> "glorot_uniform(0)"	[label=assignedFrom];
	"blended_reps_final(0)$0" -> "0.1(0)"	[label=assignedFrom];
	"128(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"glorot_uniform(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"0.1(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"blended_reps_final(0)$1" -> "GRU(0)"	[label=assignedFrom];
	"blended_reps_final(0)$1" -> "Bidirectional(0)"	[label=assignedFrom];
	"blended_reps_final(0)$1" -> "True(0)"	[label=assignedFrom];
	"blended_reps_final(0)$1" -> "128(0)"	[label=assignedFrom];
	"blended_reps_final(0)$1" -> "glorot_uniform(0)"	[label=assignedFrom];
	"blended_reps_final(0)$1" -> "0.1(0)"	[label=assignedFrom];
	"blended_reps_final(0)$1" -> "blended_reps_final(0)$1"	[label=assignedFrom];
	"logits_start(0)$0" -> "GRU(0)"	[label=assignedFrom];
	"logits_start(0)$0" -> "True(0)"	[label=assignedFrom];
	"logits_start(0)$0" -> "glorot_uniform(0)"	[label=assignedFrom];
	"logits_start(0)$0" -> "0.1(0)"	[label=assignedFrom];
	"logits_start(0)$0" -> "blended_reps_final(0)$1"	[label=assignedFrom];
	"logits_start(0)$0" -> "1(0)"	[label=assignedFrom];
	"1(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"logits_end(0)$0" -> "GRU(0)"	[label=assignedFrom];
	"logits_end(0)$0" -> "True(0)"	[label=assignedFrom];
	"logits_end(0)$0" -> "glorot_uniform(0)"	[label=assignedFrom];
	"logits_end(0)$0" -> "0.1(0)"	[label=assignedFrom];
	"logits_end(0)$0" -> "blended_reps_final(0)$1"	[label=assignedFrom];
	"logits_end(0)$0" -> "1(0)"	[label=assignedFrom];
	"logits_present(0)$0" -> "GRU(0)"	[label=assignedFrom];
	"logits_present(0)$0" -> "True(0)"	[label=assignedFrom];
	"logits_present(0)$0" -> "glorot_uniform(0)"	[label=assignedFrom];
	"logits_present(0)$0" -> "0.1(0)"	[label=assignedFrom];
	"logits_present(0)$0" -> "blended_reps_final(0)$1"	[label=assignedFrom];
	"logits_present(0)$0" -> "1(0)"	[label=assignedFrom];
	"[<_ast.Name object at 0x7fd4c04a73d0>, <_ast.Name object at 0x7fd4c04a7400>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"start_prob(0)$0" -> "[<_ast.Name object at 0x7fd4c04a73d0>, <_ast.Name object at 0x7fd4c04a7400>](0)"	[label=bidaf_startlogits];
	"[<_ast.Name object at 0x7fd4c04a7520>, <_ast.Name object at 0x7fd4c04a7550>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"end_prob(0)$0" -> "[<_ast.Name object at 0x7fd4c04a7520>, <_ast.Name object at 0x7fd4c04a7550>](0)"	[label=bidaf_endlogits];
	"[<_ast.Name object at 0x7fd4c04a7670>, <_ast.Name object at 0x7fd4c04a76a0>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"present_prob(0)$0" -> "[<_ast.Name object at 0x7fd4c04a7670>, <_ast.Name object at 0x7fd4c04a76a0>](0)"	[label=bidaf_presentlogits];
	"[<_ast.Name object at 0x7fd4c04a7760>, <_ast.Name object at 0x7fd4c04a7790>, <_ast.Name object at 0x7fd4c04a77c0>, <_ast.Name object \
at 0x7fd4c04a77f0>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"list_of_inputs(0)$0" -> "[<_ast.Name object at 0x7fd4c04a7760>, <_ast.Name object at 0x7fd4c04a7790>, <_ast.Name object at 0x7fd4c04a77c0>, <_ast.Name object \
at 0x7fd4c04a77f0>](0)"	[label=assignedFrom];
	"[<_ast.Name object at 0x7fd4c04a78b0>, <_ast.Name object at 0x7fd4c04a78e0>, <_ast.Name object at 0x7fd4c04a7910>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"dist_probs(0)$0" -> "[<_ast.Name object at 0x7fd4c04a78b0>, <_ast.Name object at 0x7fd4c04a78e0>, <_ast.Name object at 0x7fd4c04a7910>](0)"	[label=assignedFrom];
	"model_bidaf(0)$0" -> "list_of_inputs(0)$0"	[label=Model];
	"model_bidaf(0)$0" -> "dist_probs(0)$0"	[label=Model];
	"print[225/0]" -> "model_bidaf(0)$0"	[label=print];
	"model_bidaf(0)$1" -> "model_bidaf(0)$0"	[label=compile];
	"cont_embs_output(0)$0" -> "cont_model(0)$1"	[label=assignedFrom];
	"cont_embs_output(0)$0" -> "6(0)"	[label=assignedFrom];
	"6(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"cont_bert(0)$0" -> "cont_model(0)$1"	[label=Model];
	"cont_bert(0)$0" -> "cont_embs_output(0)$0"	[label=Model];
	"cont_bert(0)$1" -> "cont_bert(0)$0"	[label=compile];
	"cont_bert(0)$2" -> "cont_bert(0)$1"	[label=summary];
	"ques_embs_output(0)$0" -> "ques_model(0)$1"	[label=assignedFrom];
	"ques_embs_output(0)$0" -> "6(0)"	[label=assignedFrom];
	"ques_bert(0)$0" -> "ques_model(0)$1"	[label=Model];
	"ques_bert(0)$0" -> "ques_embs_output(0)$0"	[label=Model];
	"ques_bert(0)$1" -> "ques_bert(0)$0"	[label=compile];
	"ques_bert(0)$2" -> "ques_bert(0)$1"	[label=summary];
	"model_bidaf(0)$2" -> "../input/bert-and-bidaf/model_bidaf.h5(0)"	[label=load_weights];
	"model_bidaf(0)$2" -> "model_bidaf(0)$1"	[label=load_weights];
	"sess(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"sess(0)$0" -> "tf(0)"	[label=run];
	"sess(0)$0" -> "sess(0)"	[label=run];
	"model_bidaf(0)$3" -> "../input/bert-and-bidaf/model_bidaf.h5(0)"	[label=load_weights];
	"model_bidaf(0)$3" -> "model_bidaf(0)$2"	[label=load_weights];
	"range(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"i_main(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"i_main(0)" -> "range(0)"	[label=iteratorOf];
	"i_main(0)" -> "15(0)"	[label=iteratorOf];
	"i_main(0)" -> "35(0)"	[label=iteratorOf];
	"15(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"35(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"[](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"sample_weight(0)$0" -> "[](0)"	[label=assignedFrom];
	"row(0)$0" -> "train(0)$1"	[label=assignedFrom];
	"row(0)$0" -> "i_main(0)"	[label=assignedFrom];
	"row no (0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"print[253/12]" -> "i_main(0)"	[label=print];
	"print[253/12]" -> "row no (0)"	[label=print];
	"annotation short ans(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"print[254/12]" -> "0(0)"	[label=print];
	"print[254/12]" -> "row(0)$0"	[label=print];
	"print[254/12]" -> "annotation short ans(0)"	[label=print];
	"print[254/12]" -> "annotations(0)"	[label=print];
	"print[254/12]" -> "short_answers(0)"	[label=print];
	"annotations(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"short_answers(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"document_text(0)$0" -> "row(0)$0"	[label=split];
	"document_text(0)$0" -> "document_text(0)$0"	[label=split];
	"question_text(0)$0" -> "row(0)$0"	[label=assignedFrom];
	"question_text(0)$0" -> "question_text(0)$0"	[label=assignedFrom];
	"ques_ans_tokens(0)$0" -> "tokenizer(0)$0"	[label=tokenize];
	"ques_ans_tokens(0)$0" -> "question_text(0)$0"	[label=tokenize];
	"ques_ids(0)$0" -> "np(0)"	[label=asarray];
	"ques_ids(0)$0" -> "[<_ast.Call object at 0x7fd50081d160>](0)"	[label=asarray];
	"[<_ast.Call object at 0x7fd50081d160>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"ques_masks(0)$1" -> "np(0)"	[label=asarray];
	"ques_masks(0)$1" -> "[<_ast.Call object at 0x7fd50081d3a0>](0)"	[label=asarray];
	"[<_ast.Call object at 0x7fd50081d3a0>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"batch_of_cont_embs(0)$0" -> "[](0)"	[label=assignedFrom];
	"batch_of_cont_masks(0)$0" -> "[](0)"	[label=assignedFrom];
	"batch_of_ques_embs(0)$0" -> "[](0)"	[label=assignedFrom];
	"batch_of_ques_masks(0)$0" -> "[](0)"	[label=assignedFrom];
	"batch_of_target_st(0)$0" -> "[](0)"	[label=assignedFrom];
	"batch_of_target_en(0)$0" -> "[](0)"	[label=assignedFrom];
	"batch_of_target_pr(0)$0" -> "[](0)"	[label=assignedFrom];
	"enumerate(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"candidate_no(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"candidate_no(0)" -> "row(0)$0"	[label=iteratorOf];
	"candidate_no(0)" -> "enumerate(0)"	[label=iteratorOf];
	"candidate_no(0)" -> "long_answer_candidates(0)"	[label=iteratorOf];
	"long_answer_candidates(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"long_answer_candidate(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"long_answer_candidate(0)" -> "row(0)$0"	[label=iteratorOf];
	"long_answer_candidate(0)" -> "enumerate(0)"	[label=iteratorOf];
	"long_answer_candidate(0)" -> "long_answer_candidates(0)"	[label=iteratorOf];
	"[<_ast.Constant object at 0x7fd50081db50>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"target_start(0)$0" -> "cont_len(0)$0"	[label=Mult];
	"target_start(0)$0" -> "[<_ast.Constant object at 0x7fd50081db50>](0)"	[label=Mult];
	"[<_ast.Constant object at 0x7fd50081dc70>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"target_end(0)$0" -> "cont_len(0)$0"	[label=Mult];
	"target_end(0)$0" -> "[<_ast.Constant object at 0x7fd50081dc70>](0)"	[label=Mult];
	"[<_ast.Constant object at 0x7fd50081dd90>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"target_present(0)$0" -> "cont_len(0)$0"	[label=Mult];
	"target_present(0)$0" -> "[<_ast.Constant object at 0x7fd50081dd90>](0)"	[label=Mult];
	"long_ans_start_tok(0)$0" -> "long_answer_candidate(0)"	[label=assignedFrom];
	"long_ans_start_tok(0)$0" -> "start_token(0)"	[label=assignedFrom];
	"start_token(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"long_ans_end_tok(0)$0" -> "long_answer_candidate(0)"	[label=assignedFrom];
	"long_ans_end_tok(0)$0" -> "end_token(0)"	[label=assignedFrom];
	"end_token(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	" (0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"long_sentence(0)$0" -> "document_text(0)$0"	[label=join];
	"long_sentence(0)$0" -> "long_ans_start_tok(0)$0"	[label=join];
	"long_sentence(0)$0" -> "long_ans_end_tok(0)$0"	[label=join];
	"long_sentence(0)$0" -> " (0)"	[label=join];
	"short_answer_start_token(0)$0" -> "0(0)"	[label=assignedFrom];
	"short_answer_start_token(0)$0" -> "row(0)$0"	[label=assignedFrom];
	"short_answer_start_token(0)$0" -> "annotations(0)"	[label=assignedFrom];
	"short_answer_start_token(0)$0" -> "short_answers(0)"	[label=assignedFrom];
	"short_answer_start_token(0)$0" -> "start_token(0)"	[label=assignedFrom];
	"short_answer_end_token(0)$0" -> "0(0)"	[label=assignedFrom];
	"short_answer_end_token(0)$0" -> "row(0)$0"	[label=assignedFrom];
	"short_answer_end_token(0)$0" -> "annotations(0)"	[label=assignedFrom];
	"short_answer_end_token(0)$0" -> "short_answers(0)"	[label=assignedFrom];
	"short_answer_end_token(0)$0" -> "end_token(0)"	[label=assignedFrom];
	"short_start_idx(0)$0" -> "long_ans_start_tok(0)$0"	[label=Sub];
	"short_start_idx(0)$0" -> "short_answer_start_token(0)$0"	[label=Sub];
	"short_end_idx(0)$0" -> "long_ans_start_tok(0)$0"	[label=Sub];
	"short_end_idx(0)$0" -> "short_answer_end_token(0)$0"	[label=Sub];
	"target_start(0)$1" -> "1(0)"	[label=assignedFrom];
	"target_start(0)$1" -> "target_start(0)$0"	[label=assignedFrom];
	"target_end(0)$1" -> "1(0)"	[label=assignedFrom];
	"target_end(0)$1" -> "target_end(0)$0"	[label=assignedFrom];
	"sample_weight(0)$1" -> "sample_weight(0)$0"	[label=append];
	"sample_weight(0)$1" -> "900(0)"	[label=append];
	"900(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"i(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"i(0)" -> "range(0)"	[label=iteratorOf];
	"i(0)" -> "short_start_idx(0)$0"	[label=iteratorOf];
	"i(0)" -> "short_end_idx(0)$0"	[label=iteratorOf];
	"target_present(0)$1" -> "1(0)"	[label=assignedFrom];
	"target_present(0)$1" -> "target_present(0)$0"	[label=assignedFrom];
	"short answer beyond maximum len(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"print[299/20]" -> "short answer beyond maximum len(0)"	[label=print];
	"sample_weight(0)$2" -> "1(0)"	[label=append];
	"sample_weight(0)$2" -> "sample_weight(0)$1"	[label=append];
	"sample_weight(0)$3" -> "1(0)"	[label=append];
	"sample_weight(0)$3" -> "sample_weight(0)$2"	[label=append];
	"long_ans_tokens(0)$0" -> "tokenizer(0)$0"	[label=tokenize];
	"long_ans_tokens(0)$0" -> "long_sentence(0)$0"	[label=tokenize];
	"long_ids(0)$0" -> "np(0)"	[label=asarray];
	"long_ids(0)$0" -> "[<_ast.Call object at 0x7fd500813130>](0)"	[label=asarray];
	"[<_ast.Call object at 0x7fd500813130>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"cont_masks(0)$1" -> "np(0)"	[label=asarray];
	"cont_masks(0)$1" -> "[<_ast.Call object at 0x7fd500813340>](0)"	[label=asarray];
	"[<_ast.Call object at 0x7fd500813340>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"cont_embs(0)$1" -> "1(0)"	[label=predict];
	"cont_embs(0)$1" -> "cont_bert(0)$2"	[label=predict];
	"cont_embs(0)$1" -> "[<_ast.Name object at 0x7fd5008134f0>, <_ast.Name object at 0x7fd500813520>](0)"	[label=predict];
	"[<_ast.Name object at 0x7fd5008134f0>, <_ast.Name object at 0x7fd500813520>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"ques_embs(0)$1" -> "1(0)"	[label=predict];
	"ques_embs(0)$1" -> "ques_bert(0)$2"	[label=predict];
	"ques_embs(0)$1" -> "[<_ast.Name object at 0x7fd5008137c0>, <_ast.Name object at 0x7fd5008137f0>](0)"	[label=predict];
	"[<_ast.Name object at 0x7fd5008137c0>, <_ast.Name object at 0x7fd5008137f0>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"batch_of_cont_embs(0)$1" -> "np(0)"	[label=append];
	"batch_of_cont_embs(0)$1" -> "batch_of_cont_embs(0)$0"	[label=append];
	"batch_of_cont_embs(0)$1" -> "cont_embs(0)$1"	[label=append];
	"batch_of_cont_masks(0)$1" -> "np(0)"	[label=append];
	"batch_of_cont_masks(0)$1" -> "batch_of_cont_masks(0)$0"	[label=append];
	"batch_of_cont_masks(0)$1" -> "cont_masks(0)$1"	[label=append];
	"batch_of_ques_embs(0)$1" -> "np(0)"	[label=append];
	"batch_of_ques_embs(0)$1" -> "batch_of_ques_embs(0)$0"	[label=append];
	"batch_of_ques_embs(0)$1" -> "ques_embs(0)$1"	[label=append];
	"batch_of_ques_masks(0)$1" -> "np(0)"	[label=append];
	"batch_of_ques_masks(0)$1" -> "ques_masks(0)$1"	[label=append];
	"batch_of_ques_masks(0)$1" -> "batch_of_ques_masks(0)$0"	[label=append];
	"batch_of_target_st(0)$1" -> "batch_of_target_st(0)$0"	[label=append];
	"batch_of_target_st(0)$1" -> "target_start(0)$1"	[label=append];
	"batch_of_target_en(0)$1" -> "batch_of_target_en(0)$0"	[label=append];
	"batch_of_target_en(0)$1" -> "target_end(0)$1"	[label=append];
	"batch_of_target_pr(0)$1" -> "batch_of_target_pr(0)$0"	[label=append];
	"batch_of_target_pr(0)$1" -> "target_present(0)$1"	[label=append];
	"sample_weight(0)$4" -> "np(0)"	[label=asarray];
	"sample_weight(0)$4" -> "sample_weight(0)$4"	[label=asarray];
	"xcont_embs(0)$0" -> "np(0)"	[label=asarray];
	"xcont_embs(0)$0" -> "batch_of_cont_embs(0)$1"	[label=asarray];
	"xcont_masks(0)$0" -> "np(0)"	[label=asarray];
	"xcont_masks(0)$0" -> "batch_of_cont_masks(0)$1"	[label=asarray];
	"xques_embs(0)$0" -> "np(0)"	[label=asarray];
	"xques_embs(0)$0" -> "batch_of_ques_embs(0)$1"	[label=asarray];
	"xques_masks(0)$0" -> "np(0)"	[label=array];
	"xques_masks(0)$0" -> "batch_of_ques_masks(0)$1"	[label=array];
	"print[329/8]" -> "xcont_embs(0)$0"	[label=print];
	"print[330/8]" -> "xques_embs(0)$0"	[label=print];
	"ytarget_st(0)$0" -> "np(0)"	[label=asarray];
	"ytarget_st(0)$0" -> "batch_of_target_st(0)$1"	[label=asarray];
	"ytarget_en(0)$0" -> "np(0)"	[label=asarray];
	"ytarget_en(0)$0" -> "batch_of_target_en(0)$1"	[label=asarray];
	"ytarget_pr(0)$0" -> "np(0)"	[label=asarray];
	"ytarget_pr(0)$0" -> "batch_of_target_pr(0)$1"	[label=asarray];
	"[<_ast.Name object at 0x7fd500810f40>, <_ast.Name object at 0x7fd500810e50>, <_ast.Name object at 0x7fd500810e80>, <_ast.Name object \
at 0x7fd500810a60>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"train_x(0)$0" -> "[<_ast.Name object at 0x7fd500810f40>, <_ast.Name object at 0x7fd500810e50>, <_ast.Name object at 0x7fd500810e80>, <_ast.Name object \
at 0x7fd500810a60>](0)"	[label=assignedFrom];
	"[<_ast.Name object at 0x7fd50081f0d0>, <_ast.Name object at 0x7fd50081f100>, <_ast.Name object at 0x7fd50081f130>](0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"train_y(0)$0" -> "[<_ast.Name object at 0x7fd50081f0d0>, <_ast.Name object at 0x7fd50081f100>, <_ast.Name object at 0x7fd50081f130>](0)"	[label=assignedFrom];
	"model_bidaf(0)$4" -> "model_bidaf(0)$3"	[label=fit];
	"model_bidaf(0)$4" -> "train_x(0)$0"	[label=fit];
	"model_bidaf(0)$4" -> "train_y(0)$0"	[label=fit];
	"model_bidaf(0)$5" -> "model_bidaf(0)$4"	[label=save_weights];
	"model_bidaf(0)$5" -> "model_bidaf.h5(0)"	[label=save_weights];
	"model_bidaf.h5(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"row(13)" -> "bidaf_pred[0]"	[label=_argToVar];
	"threshold(13)$0" -> "0.03(13)"	[label=assignedFrom];
	"document_text(13)$0" -> "row(13)"	[label=split];
	"document_text(13)$0" -> "document_text(13)$0"	[label=split];
	"question_text(13)$0" -> "row(13)"	[label=assignedFrom];
	"question_text(13)$0" -> "question_text(13)$0"	[label=assignedFrom];
	"ques_ans_tokens(13)$0" -> "question_text(13)$0"	[label=tokenize];
	"ques_ans_tokens(13)$0" -> "tokenizer(13)"	[label=tokenize];
	"ques_ids(13)$0" -> "np(13)"	[label=asarray];
	"ques_ids(13)$0" -> "[<_ast.Call object at 0x7fd50081fc70>](13)"	[label=asarray];
	"ques_masks(13)$0" -> "np(13)"	[label=asarray];
	"ques_masks(13)$0" -> "[<_ast.Call object at 0x7fd50081fe80>](13)"	[label=asarray];
	"highest_combined_score(13)$0" -> "0(13)"	[label=assignedFrom];
	"best_short_tokens(13)$0" -> "0(13)"	[label=assignedFrom];
	"best_long_tokens(13)$0" -> "0(13)"	[label=assignedFrom];
	"candidate_no(13)" -> "row(13)"	[label=iteratorOf];
	"candidate_no(13)" -> "enumerate(13)"	[label=iteratorOf];
	"candidate_no(13)" -> "long_answer_candidates(13)"	[label=iteratorOf];
	"long_answer_candidate(13)" -> "row(13)"	[label=iteratorOf];
	"long_answer_candidate(13)" -> "enumerate(13)"	[label=iteratorOf];
	"long_answer_candidate(13)" -> "long_answer_candidates(13)"	[label=iteratorOf];
	"long_ans_start_tok(13)$0" -> "long_answer_candidate(13)"	[label=assignedFrom];
	"long_ans_start_tok(13)$0" -> "start_token(13)"	[label=assignedFrom];
	"long_ans_end_tok(13)$0" -> "long_answer_candidate(13)"	[label=assignedFrom];
	"long_ans_end_tok(13)$0" -> "end_token(13)"	[label=assignedFrom];
	"long_sentence(13)$0" -> "document_text(13)$0"	[label=join];
	"long_sentence(13)$0" -> "long_ans_start_tok(13)$0"	[label=join];
	"long_sentence(13)$0" -> "long_ans_end_tok(13)$0"	[label=join];
	"long_sentence(13)$0" -> " (13)"	[label=join];
	"batch_of_cont_embs(13)$0" -> "[](13)"	[label=assignedFrom];
	"batch_of_cont_masks(13)$0" -> "[](13)"	[label=assignedFrom];
	"batch_of_ques_embs(13)$0" -> "[](13)"	[label=assignedFrom];
	"batch_of_ques_masks(13)$0" -> "[](13)"	[label=assignedFrom];
	"cont_embs(13)$0" -> "cont_bert(13)"	[label=predict];
	"cont_embs(13)$0" -> "[<_ast.Name object at 0x7fd500817c10>, <_ast.Name object at 0x7fd500817c40>](13)"	[label=predict];
	"cont_embs(13)$0" -> "1(13)"	[label=predict];
	"ques_embs(13)$0" -> "1(13)"	[label=predict];
	"ques_embs(13)$0" -> "ques_bert(13)"	[label=predict];
	"ques_embs(13)$0" -> "[<_ast.Name object at 0x7fd500817eb0>, <_ast.Name object at 0x7fd500817ee0>](13)"	[label=predict];
	"batch_of_cont_embs(13)$1" -> "np(13)"	[label=append];
	"batch_of_cont_embs(13)$1" -> "batch_of_cont_embs(13)$0"	[label=append];
	"batch_of_cont_embs(13)$1" -> "cont_embs(13)$0"	[label=append];
	"batch_of_cont_masks(13)$1" -> "np(13)"	[label=append];
	"batch_of_cont_masks(13)$1" -> "batch_of_cont_masks(13)$0"	[label=append];
	"batch_of_cont_masks(13)$1" -> "cont_masks(13)"	[label=append];
	"batch_of_ques_embs(13)$1" -> "np(13)"	[label=append];
	"batch_of_ques_embs(13)$1" -> "batch_of_ques_embs(13)$0"	[label=append];
	"batch_of_ques_embs(13)$1" -> "ques_embs(13)$0"	[label=append];
	"batch_of_ques_masks(13)$1" -> "np(13)"	[label=append];
	"batch_of_ques_masks(13)$1" -> "ques_masks(13)$0"	[label=append];
	"batch_of_ques_masks(13)$1" -> "batch_of_ques_masks(13)$0"	[label=append];
	"xcont_embs(13)$0" -> "np(13)"	[label=asarray];
	"xcont_embs(13)$0" -> "batch_of_cont_embs(13)$1"	[label=asarray];
	"xcont_masks(13)$0" -> "np(13)"	[label=asarray];
	"xcont_masks(13)$0" -> "batch_of_cont_masks(13)$1"	[label=asarray];
	"xques_embs(13)$0" -> "np(13)"	[label=asarray];
	"xques_embs(13)$0" -> "batch_of_ques_embs(13)$1"	[label=asarray];
	"xques_masks(13)$0" -> "np(13)"	[label=array];
	"xques_masks(13)$0" -> "batch_of_ques_masks(13)$1"	[label=array];
	"output(13)$0" -> "1(13)"	[label=predict];
	"output(13)$0" -> "model_bidaf(13)"	[label=predict];
	"output(13)$0" -> "[<_ast.Name object at 0x7fd4c04e8d30>, <_ast.Name object at 0x7fd4c04e8d60>, <_ast.Name object at 0x7fd4c04e8d90>, <_ast.Name object \
at 0x7fd4c04e8dc0>](13)"	[label=predict];
	"start_pred_scores(13)$0" -> "0(13)"	[label=assignedFrom];
	"start_pred_scores(13)$0" -> "output(13)$0"	[label=assignedFrom];
	"end_pred_scores(13)$0" -> "1(13)"	[label=assignedFrom];
	"end_pred_scores(13)$0" -> "output(13)$0"	[label=assignedFrom];
	"present_pred_scores(13)$0" -> "output(13)$0"	[label=assignedFrom];
	"present_pred_scores(13)$0" -> "2(13)"	[label=assignedFrom];
	"start_tok_pred(13)$0" -> "np(13)"	[label=assignedFrom];
	"start_tok_pred(13)$0" -> "0(13)"	[label=assignedFrom];
	"start_tok_pred(13)$0" -> "1(13)"	[label=assignedFrom];
	"start_tok_pred(13)$0" -> "start_pred_scores(13)$0"	[label=assignedFrom];
	"end_tok_pred(13)$0" -> "np(13)"	[label=assignedFrom];
	"end_tok_pred(13)$0" -> "0(13)"	[label=assignedFrom];
	"end_tok_pred(13)$0" -> "1(13)"	[label=assignedFrom];
	"end_tok_pred(13)$0" -> "end_pred_scores(13)$0"	[label=assignedFrom];
	"present_tok_pred(13)$0" -> "np(13)"	[label=assignedFrom];
	"present_tok_pred(13)$0" -> "0(13)"	[label=assignedFrom];
	"present_tok_pred(13)$0" -> "1(13)"	[label=assignedFrom];
	"present_tok_pred(13)$0" -> "present_pred_scores(13)$0"	[label=assignedFrom];
	"start_pred_score(13)$0" -> "0(13)"	[label=assignedFrom];
	"start_pred_score(13)$0" -> "start_pred_scores(13)$0"	[label=assignedFrom];
	"start_pred_score(13)$0" -> "start_tok_pred(13)$0"	[label=assignedFrom];
	"end_pred_score(13)$0" -> "0(13)"	[label=assignedFrom];
	"end_pred_score(13)$0" -> "end_pred_scores(13)$0"	[label=assignedFrom];
	"end_pred_score(13)$0" -> "end_tok_pred(13)$0"	[label=assignedFrom];
	"present_pred_score(13)$0" -> "0(13)"	[label=assignedFrom];
	"present_pred_score(13)$0" -> "present_pred_scores(13)$0"	[label=assignedFrom];
	"present_pred_score(13)$0" -> "present_tok_pred(13)$0"	[label=assignedFrom];
	"best_short_tokens(13)$1" -> "long_ans_start_tok(13)$0"	[label=assignedFrom];
	"best_short_tokens(13)$1" -> "start_tok_pred(13)$0"	[label=assignedFrom];
	"best_short_tokens(13)$1" -> "end_tok_pred(13)$0"	[label=assignedFrom];
	"best_long_tokens(13)$1" -> "long_ans_start_tok(13)$0"	[label=assignedFrom];
	"best_long_tokens(13)$1" -> "long_ans_end_tok(13)$0"	[label=assignedFrom];
	"print[402/12]" -> "found one!(13)"	[label=print];
	"346(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"TEST_TOTAL(0)$0" -> "346(0)"	[label=assignedFrom];
	"answer(14)" -> "get_joined_tokens[0]"	[label=_argToVar];
	"json_data(15)" -> "get_pred[0]"	[label=_argToVar];
	"count(15)" -> "get_pred[1]"	[label=_argToVar];
	"ret(15)$0" -> "short(15)"	[label=assignedFrom];
	"ret(15)$0" -> "long(15)"	[label=assignedFrom];
	"ret(15)$0" -> "YES(15)"	[label=assignedFrom];
	"ret(15)$0" -> "(15)"	[label=assignedFrom];
	"candidates(15)$0" -> "json_data(15)"	[label=assignedFrom];
	"candidates(15)$0" -> "long_answer_candidates(15)"	[label=assignedFrom];
	"paragraphs(15)$0" -> "[](15)"	[label=assignedFrom];
	"tokens(15)$0" -> "json_data(15)"	[label=split];
	"tokens(15)$0" -> "document_text(15)"	[label=split];
	"tokens(15)$0" -> " (15)"	[label=split];
	"cand(15)" -> "candidates(15)$0"	[label=iteratorOf];
	"start_token(15)$0" -> "tokens(15)$0"	[label=assignedFrom];
	"start_token(15)$0" -> "cand(15)"	[label=assignedFrom];
	"start_token(15)$0" -> "start_token(15)$0"	[label=assignedFrom];
	"cand(15)$0" -> "candidates(15)$0"	[label=assignedFrom];
	"cand(15)$0" -> "0(15)"	[label=assignedFrom];
	"ret(15)$1" -> "ret(15)$0"	[label=get_joined_tokens];
	"ret(15)$1" -> "cand(15)$0"	[label=get_joined_tokens];
	"best_short_tokens(15)$0" -> "0(15)"	[label=assignedFrom];
	"best_long_tokens(15)$0" -> "0(15)"	[label=assignedFrom];
	"best_short_tokens(15)$1" -> "json_data(15)"	[label=bidaf_pred];
	"best_long_tokens(15)$1" -> "json_data(15)"	[label=bidaf_pred];
	"ret(15)$2" -> "0(15)"	[label=Mod];
	"ret(15)$2" -> "ret(15)$1"	[label=Mod];
	"ret(15)$2" -> "best_short_tokens(15)$1"	[label=Mod];
	"ret(15)$2" -> "\%d:\%d(15)"	[label=Mod];
	"ret(15)$2" -> "1(15)"	[label=Mod];
	"ret(15)$3" -> "0(15)"	[label=Mod];
	"ret(15)$3" -> "best_long_tokens(15)$1"	[label=Mod];
	"ret(15)$3" -> "ret(15)$2"	[label=Mod];
	"ret(15)$3" -> "\%d:\%d(15)"	[label=Mod];
	"ret(15)$3" -> "1(15)"	[label=Mod];
	"id_(15)$0" -> "json_data(15)"	[label=str];
	"id_(15)$0" -> "example_id(15)"	[label=str];
	"ret(15)$4" -> "id_(15)$0"	[label=assignedFrom];
	"ret(15)$4" -> "ret(15)$4"	[label=assignedFrom];
	"ret(15)$4" -> "_(15)"	[label=assignedFrom];
	"ret(15)$4" -> "k(15)"	[label=assignedFrom];
	"ret(15)$4" -> "v(15)"	[label=assignedFrom];
	"count(0)$0" -> "0(0)"	[label=assignedFrom];
	"line(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"line(0)" -> "tqdm(0)"	[label=iteratorOf];
	"line(0)" -> "TEST_TOTAL(0)$0"	[label=iteratorOf];
	"line(0)" -> "f(0)"	[label=iteratorOf];
	"f(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"count(0)$1" -> "1(0)"	[label=Add];
	"count(0)$1" -> "count(0)$0"	[label=Add];
	"json_data(0)$0" -> "json(0)"	[label=loads];
	"json_data(0)$0" -> "line(0)"	[label=loads];
	"model_bidaf(0)$6" -> "../input/bert-and-bidaf/model_bidaf.h5(0)"	[label=load_weights];
	"model_bidaf(0)$6" -> "model_bidaf(0)$5"	[label=load_weights];
	"prediction(0)$0" -> "count(0)$1"	[label=get_pred];
	"prediction(0)$0" -> "json_data(0)$0"	[label=get_pred];
	"preds(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"preds(0)$0" -> "prediction(0)$0"	[label=update];
	"preds(0)$0" -> "preds(0)"	[label=update];
	"submission(0)$0" -> "pd(0)"	[label=read_csv];
	"submission(0)$0" -> "path(0)$0"	[label=read_csv];
	"submission(0)$0" -> "sample_submission.csv(0)"	[label=read_csv];
	"submission(0)$1" -> "preds(0)$0"	[label=map];
	"submission(0)$1" -> "submission(0)$0"	[label=map];
	"submission(0)$1" -> "example_id(0)"	[label=map];
	"submission(0)$1" -> "x(0)"	[label=map];
	"example_id(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"x(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
	"submission(0)$2" -> "submission(0)$1"	[label=to_csv];
	"submission(0)$2" -> "submission.csv(0)"	[label=to_csv];
	"submission.csv(0)" -> "bert-and-bidaf.ipynb"	[label=appearsIn];
}
