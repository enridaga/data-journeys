digraph "" {
	numpy -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	"np(0)" -> numpy	[label=assignedFrom];
	"np(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	pandas -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	"pd(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"pd(0)" -> pandas	[label=assignedFrom];
	pprint -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	"pprint(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"pprint(0)" -> pprint	[label=assignedFrom];
	random -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	"random(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"random(0)" -> random	[label=assignedFrom];
	"scipy.ndimage.interpolation" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	shift -> "scipy.ndimage.interpolation"	[label=importedBy];
	"shift(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"shift(0)" -> shift	[label=assignedFrom];
	"matplotlib.pyplot" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	"plt(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"plt(0)" -> "matplotlib.pyplot"	[label=assignedFrom];
	"keras.models" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	Sequential -> "keras.models"	[label=importedBy];
	"Sequential(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"Sequential(0)" -> Sequential	[label=assignedFrom];
	"keras.layers" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	Dense -> "keras.layers"	[label=importedBy];
	"Dense(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"Dense(0)" -> Dense	[label=assignedFrom];
	Dropout -> "keras.layers"	[label=importedBy];
	"Dropout(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"Dropout(0)" -> Dropout	[label=assignedFrom];
	"keras.optimizers" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=importedBy];
	SGD -> "keras.optimizers"	[label=importedBy];
	"SGD(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"SGD(0)" -> SGD	[label=assignedFrom];
	"self(2)" -> "__init__[0]"	[label=_argToVar];
	"self(2)$0" -> "self(2)"	[label=full];
	"self(2)$0" -> "np(2)"	[label=full];
	"self(2)$0" -> "3(2)"	[label=full];
	"self(2)$0" -> "2(2)"	[label=full];
	"self(3)" -> "toss[0]"	[label=_argToVar];
	"turn(3)$0" -> "np(3)"	[label=randint];
	"turn(3)$0" -> "0(3)"	[label=randint];
	"turn(3)$0" -> "2(3)"	[label=randint];
	"turn(3)$0" -> "1(3)"	[label=randint];
	"self(3)$0" -> "self(3)"	[label=assignedFrom];
	"self(3)$0" -> "0(3)"	[label=assignedFrom];
	"self(3)$1" -> "1(3)"	[label=assignedFrom];
	"self(3)$1" -> "self(3)$0"	[label=assignedFrom];
	"self(4)" -> "move[0]"	[label=_argToVar];
	"player(4)" -> "move[1]"	[label=_argToVar];
	"coord(4)" -> "move[2]"	[label=_argToVar];
	"self(4)$0" -> "self(4)"	[label=assignedFrom];
	"self(4)$0" -> "player(4)"	[label=assignedFrom];
	"self(4)$1" -> "player(4)"	[label=Sub];
	"self(4)$1" -> "self(4)$0"	[label=Sub];
	"self(4)$1" -> "1(4)"	[label=Sub];
	"self(5)" -> "game_status[0]"	[label=_argToVar];
	"i(5)" -> "self(5)"	[label=iteratorOf];
	"i(5)" -> "range(5)"	[label=iteratorOf];
	"i(5)" -> "0(5)"	[label=iteratorOf];
	"j(5)" -> "self(5)"	[label=iteratorOf];
	"j(5)" -> "range(5)"	[label=iteratorOf];
	"j(5)" -> "1(5)"	[label=iteratorOf];
	"game(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"game(0)$0" -> "game(0)"	[label=toss];
	"Player (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[89/0]" -> "game(0)$0"	[label=print];
	"print[89/0]" -> "Player (0)"	[label=print];
	"print[89/0]" -> " has won the toss(0)"	[label=print];
	" has won the toss(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"Initial board state 
(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[91/0]" -> "game(0)$0"	[label=print];
	"print[91/0]" -> "Initial board state 
(0)"	[label=print];
	"Let first player place their mark on 0,0(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[92/0]" -> "Let first player place their mark on 0,0(0)"	[label=print];
	"game_status(0)$0" -> "game(0)$0"	[label=move];
	"game_status(0)$0" -> "0(0)"	[label=move];
	"0(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"board(0)$0" -> "game(0)$0"	[label=move];
	"board(0)$0" -> "0(0)"	[label=move];
	"New Board State: 
(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[94/0]" -> "board(0)$0"	[label=print];
	"print[94/0]" -> "New Board State: 
(0)"	[label=print];
	"Let second player place their mark on 0,1(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[95/0]" -> "Let second player place their mark on 0,1(0)"	[label=print];
	"game_status(0)$1" -> "game(0)$0"	[label=move];
	"game_status(0)$1" -> "0(0)"	[label=move];
	"game_status(0)$1" -> "1(0)"	[label=move];
	"1(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"board(0)$1" -> "game(0)$0"	[label=move];
	"board(0)$1" -> "0(0)"	[label=move];
	"board(0)$1" -> "1(0)"	[label=move];
	"print[97/0]" -> "New Board State: 
(0)"	[label=print];
	"print[97/0]" -> "board(0)$1"	[label=print];
	"Let first player place their mark on 1,1(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[98/0]" -> "Let first player place their mark on 1,1(0)"	[label=print];
	"game_status(0)$2" -> "game(0)$0"	[label=move];
	"game_status(0)$2" -> "1(0)"	[label=move];
	"board(0)$2" -> "game(0)$0"	[label=move];
	"board(0)$2" -> "1(0)"	[label=move];
	"print[100/0]" -> "New Board State: 
(0)"	[label=print];
	"print[100/0]" -> "board(0)$2"	[label=print];
	"Let second player place their mark on 0,2(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[101/0]" -> "Let second player place their mark on 0,2(0)"	[label=print];
	"game_status(0)$3" -> "game(0)$0"	[label=move];
	"game_status(0)$3" -> "0(0)"	[label=move];
	"game_status(0)$3" -> "2(0)"	[label=move];
	"2(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"board(0)$3" -> "game(0)$0"	[label=move];
	"board(0)$3" -> "0(0)"	[label=move];
	"board(0)$3" -> "2(0)"	[label=move];
	"print[103/0]" -> "New Board State: 
(0)"	[label=print];
	"print[103/0]" -> "board(0)$3"	[label=print];
	"Let first player place their mark on 2,2(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[104/0]" -> "Let first player place their mark on 2,2(0)"	[label=print];
	"game_status(0)$4" -> "game(0)$0"	[label=move];
	"game_status(0)$4" -> "2(0)"	[label=move];
	"board(0)$4" -> "game(0)$0"	[label=move];
	"board(0)$4" -> "2(0)"	[label=move];
	"print[106/0]" -> "New Board State: 
(0)"	[label=print];
	"print[106/0]" -> "board(0)$4"	[label=print];
	"print[107/0]" -> "game(0)$0"	[label=print];
	"print[107/0]" -> "Player (0)"	[label=print];
	"print[107/0]" -> "1(0)"	[label=print];
	"print[107/0]" -> "game_status(0)$4"	[label=print];
	"print[107/0]" -> " Has (0)"	[label=print];
	" Has (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"current_board_state(6)" -> "legal_moves_generator[0]"	[label=_argToVar];
	"turn_monitor(6)" -> "legal_moves_generator[1]"	[label=_argToVar];
	"i(6)" -> "current_board_state(6)"	[label=iteratorOf];
	"i(6)" -> "range(6)"	[label=iteratorOf];
	"i(6)" -> "0(6)"	[label=iteratorOf];
	"j(6)" -> "current_board_state(6)"	[label=iteratorOf];
	"j(6)" -> "range(6)"	[label=iteratorOf];
	"j(6)" -> "1(6)"	[label=iteratorOf];
	"board_state_copy(6)$0" -> "current_board_state(6)"	[label=copy];
	"board_state_copy(6)$1" -> "turn_monitor(6)"	[label=assignedFrom];
	"board_state_copy(6)$1" -> "board_state_copy(6)$0"	[label=assignedFrom];
	"legal_moves_dict(6)$0" -> "board_state_copy(6)$1"	[label=flatten];
	"legal_moves_dict(6)$0" -> "legal_moves_dict(6)"	[label=flatten];
	"game(0)$1" -> "game(0)$0"	[label=toss];
	"print[131/0]" -> "Player (0)"	[label=print];
	"print[131/0]" -> " has won the toss(0)"	[label=print];
	"print[131/0]" -> "game(0)$1"	[label=print];
	"Current board state 
(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[132/0]" -> "game(0)$1"	[label=print];
	"print[132/0]" -> "Current board state 
(0)"	[label=print];
	"legal_moves_dict(0)$0" -> "game(0)$1"	[label=legal_moves_generator];
	"Dictionary of Possible Next Legal Moves:(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[134/0]" -> "Dictionary of Possible Next Legal Moves:(0)"	[label=print];
	"pprint(0)$0" -> "pprint(0)"	[label=pprint];
	"pprint(0)$0" -> "legal_moves_dict(0)$0"	[label=pprint];
	"model(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"model(0)$0" -> "Dense(0)"	[label=add];
	"model(0)$0" -> "model(0)"	[label=add];
	"model(0)$0" -> "18(0)"	[label=add];
	"model(0)$0" -> "9(0)"	[label=add];
	"model(0)$0" -> "normal(0)"	[label=add];
	"model(0)$0" -> "relu(0)"	[label=add];
	"18(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"9(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"normal(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"relu(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"model(0)$1" -> "Dropout(0)"	[label=add];
	"model(0)$1" -> "model(0)$0"	[label=add];
	"model(0)$1" -> "0.1(0)"	[label=add];
	"0.1(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"model(0)$2" -> "Dense(0)"	[label=add];
	"model(0)$2" -> "9(0)"	[label=add];
	"model(0)$2" -> "normal(0)"	[label=add];
	"model(0)$2" -> "relu(0)"	[label=add];
	"model(0)$2" -> "model(0)$1"	[label=add];
	"model(0)$3" -> "Dropout(0)"	[label=add];
	"model(0)$3" -> "0.1(0)"	[label=add];
	"model(0)$3" -> "model(0)$2"	[label=add];
	"model(0)$4" -> "Dense(0)"	[label=add];
	"model(0)$4" -> "1(0)"	[label=add];
	"model(0)$4" -> "normal(0)"	[label=add];
	"model(0)$4" -> "model(0)$3"	[label=add];
	"0.001(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"learning_rate(0)$0" -> "0.001(0)"	[label=assignedFrom];
	"0.8(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"momentum(0)$0" -> "0.8(0)"	[label=assignedFrom];
	"sgd(0)$0" -> "learning_rate(0)$0"	[label=SGD];
	"sgd(0)$0" -> "momentum(0)$0"	[label=SGD];
	"sgd(0)$0" -> "False(0)"	[label=SGD];
	"False(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"model(0)$5" -> "model(0)$4"	[label=compile];
	"model(0)$6" -> "model(0)$5"	[label=summary];
	"model(7)" -> "move_selector[0]"	[label=_argToVar];
	"current_board_state(7)" -> "move_selector[1]"	[label=_argToVar];
	"turn_monitor(7)" -> "move_selector[2]"	[label=_argToVar];
	"legal_moves_dict(7)$0" -> "current_board_state(7)"	[label=legal_moves_generator];
	"legal_moves_dict(7)$0" -> "turn_monitor(7)"	[label=legal_moves_generator];
	"legal_move_coord(7)" -> "legal_moves_dict(7)$0"	[label=iteratorOf];
	"score(7)$0" -> "model(7)"	[label=predict];
	"score(7)$0" -> "legal_moves_dict(7)$0"	[label=predict];
	"score(7)$0" -> "legal_move_coord(7)"	[label=predict];
	"score(7)$0" -> "1(7)"	[label=predict];
	"score(7)$0" -> "9(7)"	[label=predict];
	"tracker(7)$0" -> "score(7)$0"	[label=assignedFrom];
	"tracker(7)$0" -> "tracker(7)"	[label=assignedFrom];
	"selected_move(7)$0" -> "tracker(7)$0"	[label=max];
	"new_board_state(7)$0" -> "legal_moves_dict(7)$0"	[label=assignedFrom];
	"new_board_state(7)$0" -> "selected_move(7)$0"	[label=assignedFrom];
	"score(7)$1" -> "tracker(7)$0"	[label=assignedFrom];
	"score(7)$1" -> "selected_move(7)$0"	[label=assignedFrom];
	"game(0)$2" -> "game(0)$1"	[label=toss];
	"Player assigned mark 1(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[176/0]" -> "game(0)$2"	[label=print];
	"print[176/0]" -> "Player assigned mark 1(0)"	[label=print];
	"print[176/0]" -> " won the toss(0)"	[label=print];
	" won the toss(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"Initial board state:(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[177/0]" -> "Initial board state:(0)"	[label=print];
	"print[178/0]" -> "game(0)$2"	[label=print];
	"selected_move(0)$0" -> "model(0)$6"	[label=move_selector];
	"selected_move(0)$0" -> "game(0)$2"	[label=move_selector];
	"new_board_state(0)$0" -> "model(0)$6"	[label=move_selector];
	"new_board_state(0)$0" -> "game(0)$2"	[label=move_selector];
	"score(0)$0" -> "model(0)$6"	[label=move_selector];
	"score(0)$0" -> "game(0)$2"	[label=move_selector];
	"Selected move: (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[180/0]" -> "selected_move(0)$0"	[label=print];
	"print[180/0]" -> "Selected move: (0)"	[label=print];
	"Resulting new board state: (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[181/0]" -> "new_board_state(0)$0"	[label=print];
	"print[181/0]" -> "Resulting new board state: (0)"	[label=print];
	"Score assigned to above board state by Evaluator(model): (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[182/0]" -> "score(0)$0"	[label=print];
	"print[182/0]" -> "Score assigned to above board state by Evaluator(model): (0)"	[label=print];
	"current_board_state(8)" -> "row_winning_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(8)" -> "row_winning_move_check[1]"	[label=_argToVar];
	"turn_monitor(8)" -> "row_winning_move_check[2]"	[label=_argToVar];
	"legal_move_coords(8)$0" -> "legal_moves_dict(8)"	[label=list];
	"random(8)$0" -> "legal_move_coords(8)$0"	[label=shuffle];
	"random(8)$0" -> "random(8)"	[label=shuffle];
	"legal_move_coord(8)" -> "legal_move_coords(8)$0"	[label=iteratorOf];
	"current_board_state_copy(8)$0" -> "current_board_state(8)"	[label=copy];
	"current_board_state_copy(8)$1" -> "turn_monitor(8)"	[label=assignedFrom];
	"current_board_state_copy(8)$1" -> "current_board_state_copy(8)$0"	[label=assignedFrom];
	"i(8)" -> "current_board_state_copy(8)$1"	[label=iteratorOf];
	"i(8)" -> "range(8)"	[label=iteratorOf];
	"i(8)" -> "0(8)"	[label=iteratorOf];
	"selected_move(8)$0" -> "legal_move_coord(8)"	[label=assignedFrom];
	"current_board_state(9)" -> "column_winning_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(9)" -> "column_winning_move_check[1]"	[label=_argToVar];
	"turn_monitor(9)" -> "column_winning_move_check[2]"	[label=_argToVar];
	"legal_move_coords(9)$0" -> "legal_moves_dict(9)"	[label=list];
	"random(9)$0" -> "legal_move_coords(9)$0"	[label=shuffle];
	"random(9)$0" -> "random(9)"	[label=shuffle];
	"legal_move_coord(9)" -> "legal_move_coords(9)$0"	[label=iteratorOf];
	"current_board_state_copy(9)$0" -> "current_board_state(9)"	[label=copy];
	"current_board_state_copy(9)$1" -> "turn_monitor(9)"	[label=assignedFrom];
	"current_board_state_copy(9)$1" -> "current_board_state_copy(9)$0"	[label=assignedFrom];
	"j(9)" -> "current_board_state_copy(9)$1"	[label=iteratorOf];
	"j(9)" -> "range(9)"	[label=iteratorOf];
	"j(9)" -> "1(9)"	[label=iteratorOf];
	"selected_move(9)$0" -> "legal_move_coord(9)"	[label=assignedFrom];
	"current_board_state(10)" -> "diag1_winning_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(10)" -> "diag1_winning_move_check[1]"	[label=_argToVar];
	"turn_monitor(10)" -> "diag1_winning_move_check[2]"	[label=_argToVar];
	"legal_move_coords(10)$0" -> "legal_moves_dict(10)"	[label=list];
	"random(10)$0" -> "legal_move_coords(10)$0"	[label=shuffle];
	"random(10)$0" -> "random(10)"	[label=shuffle];
	"legal_move_coord(10)" -> "legal_move_coords(10)$0"	[label=iteratorOf];
	"current_board_state_copy(10)$0" -> "current_board_state(10)"	[label=copy];
	"current_board_state_copy(10)$1" -> "turn_monitor(10)"	[label=assignedFrom];
	"current_board_state_copy(10)$1" -> "current_board_state_copy(10)$0"	[label=assignedFrom];
	"selected_move(10)$0" -> "legal_move_coord(10)"	[label=assignedFrom];
	"current_board_state(11)" -> "diag2_winning_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(11)" -> "diag2_winning_move_check[1]"	[label=_argToVar];
	"turn_monitor(11)" -> "diag2_winning_move_check[2]"	[label=_argToVar];
	"legal_move_coords(11)$0" -> "legal_moves_dict(11)"	[label=list];
	"random(11)$0" -> "legal_move_coords(11)$0"	[label=shuffle];
	"random(11)$0" -> "random(11)"	[label=shuffle];
	"legal_move_coord(11)" -> "legal_move_coords(11)$0"	[label=iteratorOf];
	"current_board_state_copy(11)$0" -> "current_board_state(11)"	[label=copy];
	"current_board_state_copy(11)$1" -> "turn_monitor(11)"	[label=assignedFrom];
	"current_board_state_copy(11)$1" -> "current_board_state_copy(11)$0"	[label=assignedFrom];
	"selected_move(11)$0" -> "legal_move_coord(11)"	[label=assignedFrom];
	"current_board_state(12)" -> "row_block_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(12)" -> "row_block_move_check[1]"	[label=_argToVar];
	"turn_monitor(12)" -> "row_block_move_check[2]"	[label=_argToVar];
	"legal_move_coords(12)$0" -> "legal_moves_dict(12)"	[label=list];
	"random(12)$0" -> "legal_move_coords(12)$0"	[label=shuffle];
	"random(12)$0" -> "random(12)"	[label=shuffle];
	"legal_move_coord(12)" -> "legal_move_coords(12)$0"	[label=iteratorOf];
	"current_board_state_copy(12)$0" -> "current_board_state(12)"	[label=copy];
	"current_board_state_copy(12)$1" -> "turn_monitor(12)"	[label=assignedFrom];
	"current_board_state_copy(12)$1" -> "current_board_state_copy(12)$0"	[label=assignedFrom];
	"i(12)" -> "current_board_state_copy(12)$1"	[label=iteratorOf];
	"i(12)" -> "range(12)"	[label=iteratorOf];
	"i(12)" -> "0(12)"	[label=iteratorOf];
	"selected_move(12)$0" -> "legal_move_coord(12)"	[label=assignedFrom];
	"current_board_state(13)" -> "column_block_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(13)" -> "column_block_move_check[1]"	[label=_argToVar];
	"turn_monitor(13)" -> "column_block_move_check[2]"	[label=_argToVar];
	"legal_move_coords(13)$0" -> "legal_moves_dict(13)"	[label=list];
	"random(13)$0" -> "legal_move_coords(13)$0"	[label=shuffle];
	"random(13)$0" -> "random(13)"	[label=shuffle];
	"legal_move_coord(13)" -> "legal_move_coords(13)$0"	[label=iteratorOf];
	"current_board_state_copy(13)$0" -> "current_board_state(13)"	[label=copy];
	"current_board_state_copy(13)$1" -> "turn_monitor(13)"	[label=assignedFrom];
	"current_board_state_copy(13)$1" -> "current_board_state_copy(13)$0"	[label=assignedFrom];
	"j(13)" -> "current_board_state_copy(13)$1"	[label=iteratorOf];
	"j(13)" -> "range(13)"	[label=iteratorOf];
	"j(13)" -> "1(13)"	[label=iteratorOf];
	"selected_move(13)$0" -> "legal_move_coord(13)"	[label=assignedFrom];
	"current_board_state(14)" -> "diag1_block_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(14)" -> "diag1_block_move_check[1]"	[label=_argToVar];
	"turn_monitor(14)" -> "diag1_block_move_check[2]"	[label=_argToVar];
	"legal_move_coords(14)$0" -> "legal_moves_dict(14)"	[label=list];
	"random(14)$0" -> "legal_move_coords(14)$0"	[label=shuffle];
	"random(14)$0" -> "random(14)"	[label=shuffle];
	"legal_move_coord(14)" -> "legal_move_coords(14)$0"	[label=iteratorOf];
	"current_board_state_copy(14)$0" -> "current_board_state(14)"	[label=copy];
	"current_board_state_copy(14)$1" -> "turn_monitor(14)"	[label=assignedFrom];
	"current_board_state_copy(14)$1" -> "current_board_state_copy(14)$0"	[label=assignedFrom];
	"selected_move(14)$0" -> "legal_move_coord(14)"	[label=assignedFrom];
	"current_board_state(15)" -> "diag2_block_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(15)" -> "diag2_block_move_check[1]"	[label=_argToVar];
	"turn_monitor(15)" -> "diag2_block_move_check[2]"	[label=_argToVar];
	"legal_move_coords(15)$0" -> "legal_moves_dict(15)"	[label=list];
	"random(15)$0" -> "legal_move_coords(15)$0"	[label=shuffle];
	"random(15)$0" -> "random(15)"	[label=shuffle];
	"legal_move_coord(15)" -> "legal_move_coords(15)$0"	[label=iteratorOf];
	"current_board_state_copy(15)$0" -> "current_board_state(15)"	[label=copy];
	"current_board_state_copy(15)$1" -> "turn_monitor(15)"	[label=assignedFrom];
	"current_board_state_copy(15)$1" -> "current_board_state_copy(15)$0"	[label=assignedFrom];
	"selected_move(15)$0" -> "legal_move_coord(15)"	[label=assignedFrom];
	"current_board_state(16)" -> "row_second_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(16)" -> "row_second_move_check[1]"	[label=_argToVar];
	"turn_monitor(16)" -> "row_second_move_check[2]"	[label=_argToVar];
	"legal_move_coords(16)$0" -> "legal_moves_dict(16)"	[label=list];
	"random(16)$0" -> "legal_move_coords(16)$0"	[label=shuffle];
	"random(16)$0" -> "random(16)"	[label=shuffle];
	"legal_move_coord(16)" -> "legal_move_coords(16)$0"	[label=iteratorOf];
	"current_board_state_copy(16)$0" -> "current_board_state(16)"	[label=copy];
	"current_board_state_copy(16)$1" -> "turn_monitor(16)"	[label=assignedFrom];
	"current_board_state_copy(16)$1" -> "current_board_state_copy(16)$0"	[label=assignedFrom];
	"i(16)" -> "current_board_state_copy(16)$1"	[label=iteratorOf];
	"i(16)" -> "range(16)"	[label=iteratorOf];
	"i(16)" -> "0(16)"	[label=iteratorOf];
	"selected_move(16)$0" -> "legal_move_coord(16)"	[label=assignedFrom];
	"current_board_state(17)" -> "column_second_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(17)" -> "column_second_move_check[1]"	[label=_argToVar];
	"turn_monitor(17)" -> "column_second_move_check[2]"	[label=_argToVar];
	"legal_move_coords(17)$0" -> "legal_moves_dict(17)"	[label=list];
	"random(17)$0" -> "legal_move_coords(17)$0"	[label=shuffle];
	"random(17)$0" -> "random(17)"	[label=shuffle];
	"legal_move_coord(17)" -> "legal_move_coords(17)$0"	[label=iteratorOf];
	"current_board_state_copy(17)$0" -> "current_board_state(17)"	[label=copy];
	"current_board_state_copy(17)$1" -> "turn_monitor(17)"	[label=assignedFrom];
	"current_board_state_copy(17)$1" -> "current_board_state_copy(17)$0"	[label=assignedFrom];
	"j(17)" -> "current_board_state_copy(17)$1"	[label=iteratorOf];
	"j(17)" -> "range(17)"	[label=iteratorOf];
	"j(17)" -> "1(17)"	[label=iteratorOf];
	"selected_move(17)$0" -> "legal_move_coord(17)"	[label=assignedFrom];
	"current_board_state(18)" -> "diag1_second_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(18)" -> "diag1_second_move_check[1]"	[label=_argToVar];
	"turn_monitor(18)" -> "diag1_second_move_check[2]"	[label=_argToVar];
	"legal_move_coords(18)$0" -> "legal_moves_dict(18)"	[label=list];
	"random(18)$0" -> "legal_move_coords(18)$0"	[label=shuffle];
	"random(18)$0" -> "random(18)"	[label=shuffle];
	"legal_move_coord(18)" -> "legal_move_coords(18)$0"	[label=iteratorOf];
	"current_board_state_copy(18)$0" -> "current_board_state(18)"	[label=copy];
	"current_board_state_copy(18)$1" -> "turn_monitor(18)"	[label=assignedFrom];
	"current_board_state_copy(18)$1" -> "current_board_state_copy(18)$0"	[label=assignedFrom];
	"selected_move(18)$0" -> "legal_move_coord(18)"	[label=assignedFrom];
	"current_board_state(19)" -> "diag2_second_move_check[0]"	[label=_argToVar];
	"legal_moves_dict(19)" -> "diag2_second_move_check[1]"	[label=_argToVar];
	"turn_monitor(19)" -> "diag2_second_move_check[2]"	[label=_argToVar];
	"legal_move_coords(19)$0" -> "legal_moves_dict(19)"	[label=list];
	"random(19)$0" -> "legal_move_coords(19)$0"	[label=shuffle];
	"random(19)$0" -> "random(19)"	[label=shuffle];
	"legal_move_coord(19)" -> "legal_move_coords(19)$0"	[label=iteratorOf];
	"current_board_state_copy(19)$0" -> "current_board_state(19)"	[label=copy];
	"current_board_state_copy(19)$1" -> "turn_monitor(19)"	[label=assignedFrom];
	"current_board_state_copy(19)$1" -> "current_board_state_copy(19)$0"	[label=assignedFrom];
	"selected_move(19)$0" -> "legal_move_coord(19)"	[label=assignedFrom];
	"current_board_state(20)" -> "opponent_move_selector[0]"	[label=_argToVar];
	"turn_monitor(20)" -> "opponent_move_selector[1]"	[label=_argToVar];
	"mode(20)" -> "opponent_move_selector[2]"	[label=_argToVar];
	"legal_moves_dict(20)$0" -> "current_board_state(20)"	[label=legal_moves_generator];
	"legal_moves_dict(20)$0" -> "turn_monitor(20)"	[label=legal_moves_generator];
	"winning_move_checks(20)$0" -> "[<_ast.Name object at 0x7fd500824e50>, <_ast.Name object at 0x7fd500824ee0>, <_ast.Name object at 0x7fd500824f10>, <_ast.Name object \
at 0x7fd500824e80>](20)"	[label=assignedFrom];
	"block_move_checks(20)$0" -> "[<_ast.Name object at 0x7fd500824f70>, <_ast.Name object at 0x7fd500824fa0>, <_ast.Name object at 0x7fd500824fd0>, <_ast.Name object \
at 0x7fd500824ac0>](20)"	[label=assignedFrom];
	"second_move_checks(20)$0" -> "[<_ast.Name object at 0x7fd4c05bc070>, <_ast.Name object at 0x7fd4c05bc0a0>, <_ast.Name object at 0x7fd4c05bc100>, <_ast.Name object \
at 0x7fd4c05bc130>](20)"	[label=assignedFrom];
	"random(20)$0" -> "winning_move_checks(20)$0"	[label=shuffle];
	"random(20)$0" -> "random(20)"	[label=shuffle];
	"random(20)$1" -> "block_move_checks(20)$0"	[label=shuffle];
	"random(20)$1" -> "random(20)$0"	[label=shuffle];
	"random(20)$2" -> "second_move_checks(20)$0"	[label=shuffle];
	"random(20)$2" -> "random(20)$1"	[label=shuffle];
	"fn(20)" -> "winning_move_checks(20)$0"	[label=iteratorOf];
	"fn(20)" -> "block_move_checks(20)$0"	[label=iteratorOf];
	"fn(20)" -> "second_move_checks(20)$0"	[label=iteratorOf];
	"selected_move(20)$0" -> "legal_moves_dict(20)$0"	[label=choice];
	"selected_move(20)$0" -> "random(20)$2"	[label=choice];
	"selected_move(20)$0" -> "list(20)"	[label=choice];
	"legal_moves_dict(20)$1" -> "current_board_state(20)"	[label=legal_moves_generator];
	"legal_moves_dict(20)$1" -> "turn_monitor(20)"	[label=legal_moves_generator];
	"selected_move(20)$1" -> "random(20)$2"	[label=choice];
	"selected_move(20)$1" -> "list(20)"	[label=choice];
	"selected_move(20)$1" -> "legal_moves_dict(20)$1"	[label=choice];
	"model(21)" -> "train[0]"	[label=_argToVar];
	"mode(21)" -> "train[1]"	[label=_argToVar];
	"print_progress(21)" -> "train[2]"	[label=_argToVar];
	"print[513/8]" -> "___________________________________________________________________(21)"	[label=print];
	"print[514/8]" -> "Starting a new game(21)"	[label=print];
	"game(21)$0" -> "game(21)"	[label=toss];
	"scores_list(21)$0" -> "[](21)"	[label=assignedFrom];
	"corrected_scores_list(21)$0" -> "[](21)"	[label=assignedFrom];
	"new_board_states_list(21)$0" -> "[](21)"	[label=assignedFrom];
	"selected_move(21)$0" -> "model(21)"	[label=move_selector];
	"selected_move(21)$0" -> "game(21)$0"	[label=move_selector];
	"new_board_state(21)$0" -> "model(21)"	[label=move_selector];
	"new_board_state(21)$0" -> "game(21)$0"	[label=move_selector];
	"score(21)$0" -> "model(21)"	[label=move_selector];
	"score(21)$0" -> "game(21)$0"	[label=move_selector];
	"scores_list(21)$1" -> "scores_list(21)$0"	[label=append];
	"scores_list(21)$1" -> "score(21)$0"	[label=append];
	"scores_list(21)$1" -> "0(21)"	[label=append];
	"new_board_states_list(21)$1" -> "new_board_states_list(21)$0"	[label=append];
	"new_board_states_list(21)$1" -> "new_board_state(21)$0"	[label=append];
	"game_status(21)$0" -> "game(21)$0"	[label=move];
	"game_status(21)$0" -> "selected_move(21)$0"	[label=move];
	"board(21)$0" -> "game(21)$0"	[label=move];
	"board(21)$0" -> "selected_move(21)$0"	[label=move];
	"print[530/16]" -> "Program's Move(21)"	[label=print];
	"print[531/16]" -> "board(21)$0"	[label=print];
	"print[532/16]" -> "
(21)"	[label=print];
	"selected_move(21)$1" -> "mode(21)"	[label=opponent_move_selector];
	"selected_move(21)$1" -> "game(21)$0"	[label=opponent_move_selector];
	"game_status(21)$1" -> "game(21)$0"	[label=move];
	"game_status(21)$1" -> "selected_move(21)$1"	[label=move];
	"board(21)$1" -> "game(21)$0"	[label=move];
	"board(21)$1" -> "selected_move(21)$1"	[label=move];
	"print[539/16]" -> "Opponent's Move(21)"	[label=print];
	"print[540/16]" -> "board(21)$1"	[label=print];
	"print[541/16]" -> "
(21)"	[label=print];
	"new_board_states_list(21)$2" -> "new_board_states_list(21)$1"	[label=tuple];
	"new_board_states_list(21)$3" -> "new_board_states_list(21)$3"	[label=vstack];
	"new_board_states_list(21)$3" -> "np(21)"	[label=vstack];
	"corrected_scores_list(21)$1" -> "scores_list(21)$1"	[label=shift];
	"corrected_scores_list(21)$1" -> "1(21)"	[label=shift];
	"corrected_scores_list(21)$1" -> "1.0(21)"	[label=shift];
	"result(21)$0" -> "Won(21)"	[label=assignedFrom];
	"corrected_scores_list(21)$2" -> "scores_list(21)$1"	[label=shift];
	"corrected_scores_list(21)$2" -> "1(21)"	[label=shift];
	"corrected_scores_list(21)$2" -> "1.0(21)"	[label=shift];
	"result(21)$1" -> "Lost(21)"	[label=assignedFrom];
	"corrected_scores_list(21)$3" -> "scores_list(21)$1"	[label=shift];
	"corrected_scores_list(21)$3" -> "1(21)"	[label=shift];
	"corrected_scores_list(21)$3" -> "0.0(21)"	[label=shift];
	"result(21)$2" -> "Drawn(21)"	[label=assignedFrom];
	"print[560/8]" -> "result(21)$2"	[label=print];
	"print[560/8]" -> "Program has (21)"	[label=print];
	"print[561/8]" -> "
 Correcting the Scores and Updating the model weights:(21)"	[label=print];
	"print[562/8]" -> "___________________________________________________________________
(21)"	[label=print];
	"x(21)$0" -> "new_board_states_list(21)$3"	[label=assignedFrom];
	"y(21)$0" -> "corrected_scores_list(21)$3"	[label=assignedFrom];
	"a(22)" -> "unison_shuffled_copies[0]"	[label=_argToVar];
	"b(22)" -> "unison_shuffled_copies[1]"	[label=_argToVar];
	"p(22)$0" -> "a(22)"	[label=permutation];
	"p(22)$0" -> "np(22)"	[label=permutation];
	"p(22)$0" -> "len(22)"	[label=permutation];
	"x(21)$1" -> "x(21)$0"	[label=unison_shuffled_copies];
	"x(21)$1" -> "y(21)$1"	[label=unison_shuffled_copies];
	"y(21)$1" -> "x(21)$0"	[label=unison_shuffled_copies];
	"y(21)$1" -> "y(21)$1"	[label=unison_shuffled_copies];
	"x(21)$2" -> "1(21)"	[label=reshape];
	"x(21)$2" -> "x(21)$1"	[label=reshape];
	"x(21)$2" -> "9(21)"	[label=reshape];
	"model(21)$0" -> "model(21)"	[label=fit];
	"model(21)$0" -> "y(21)$1"	[label=fit];
	"model(21)$0" -> "x(21)$2"	[label=fit];
	"updated_model(0)$0" -> "model(0)$6"	[label=train];
	"updated_model(0)$0" -> "Hard(0)"	[label=train];
	"updated_model(0)$0" -> "True(0)"	[label=train];
	"Hard(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"True(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"y(0)$0" -> "model(0)$6"	[label=train];
	"y(0)$0" -> "Hard(0)"	[label=train];
	"y(0)$0" -> "True(0)"	[label=train];
	"result(0)$0" -> "model(0)$6"	[label=train];
	"result(0)$0" -> "Hard(0)"	[label=train];
	"result(0)$0" -> "True(0)"	[label=train];
	"game_counter(0)$0" -> "1(0)"	[label=assignedFrom];
	"data_for_graph(0)$0" -> "pd(0)"	[label=DataFrame];
	"[<_ast.Constant object at 0x7fd4c05a0b80>, <_ast.Constant object at 0x7fd4c05a0bb0>](0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"mode_list(0)$0" -> "[<_ast.Constant object at 0x7fd4c05a0b80>, <_ast.Constant object at 0x7fd4c05a0bb0>](0)"	[label=assignedFrom];
	"mode_selected(0)$0" -> "np(0)"	[label=choice];
	"mode_selected(0)$0" -> "1(0)"	[label=choice];
	"mode_selected(0)$0" -> "mode_list(0)$0"	[label=choice];
	"mode_selected(0)$0" -> "[<_ast.Constant object at 0x7fd4c05a0ee0>, <_ast.Constant object at 0x7fd4c05a0f10>](0)"	[label=choice];
	"[<_ast.Constant object at 0x7fd4c05a0ee0>, <_ast.Constant object at 0x7fd4c05a0f10>](0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"model(0)$7" -> "0(0)"	[label=train];
	"model(0)$7" -> "False(0)"	[label=train];
	"model(0)$7" -> "model(0)$6"	[label=train];
	"model(0)$7" -> "mode_selected(0)$0"	[label=train];
	"y(0)$1" -> "0(0)"	[label=train];
	"y(0)$1" -> "False(0)"	[label=train];
	"y(0)$1" -> "model(0)$6"	[label=train];
	"y(0)$1" -> "mode_selected(0)$0"	[label=train];
	"result(0)$1" -> "0(0)"	[label=train];
	"result(0)$1" -> "False(0)"	[label=train];
	"result(0)$1" -> "model(0)$6"	[label=train];
	"result(0)$1" -> "mode_selected(0)$0"	[label=train];
	"data_for_graph(0)$1" -> "True(0)"	[label=append];
	"data_for_graph(0)$1" -> "game_counter(0)$0"	[label=append];
	"data_for_graph(0)$1" -> "data_for_graph(0)$0"	[label=append];
	"data_for_graph(0)$1" -> "result(0)$1"	[label=append];
	"Game#: (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[590/8]" -> "game_counter(0)$0"	[label=print];
	"print[590/8]" -> "Game#: (0)"	[label=print];
	"Mode: (0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"print[591/8]" -> "0(0)"	[label=print];
	"print[591/8]" -> "mode_selected(0)$0"	[label=print];
	"print[591/8]" -> "Mode: (0)"	[label=print];
	"game_counter(0)$1" -> "1(0)"	[label=Add];
	"game_counter(0)$1" -> "game_counter(0)$0"	[label=Add];
	"bins(0)$0" -> "np(0)"	[label=Mult];
	"bins(0)$0" -> "1(0)"	[label=Mult];
	"bins(0)$0" -> "game_counter(0)$1"	[label=Mult];
	"bins(0)$0" -> "10000(0)"	[label=Mult];
	"10000(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"data_for_graph(0)$2" -> "np(0)"	[label=digitize];
	"data_for_graph(0)$2" -> "True(0)"	[label=digitize];
	"data_for_graph(0)$2" -> "data_for_graph(0)$1"	[label=digitize];
	"data_for_graph(0)$2" -> "game_counter(0)$1"	[label=digitize];
	"data_for_graph(0)$2" -> "bins(0)$0"	[label=digitize];
	"data_for_graph(0)$2" -> "data_for_graph(0)$2"	[label=digitize];
	"counts(0)$0" -> "data_for_graph(0)$2"	[label=unstack];
	"counts(0)$0" -> "[<_ast.Constant object at 0x7fd4c05c0220>, <_ast.Constant object at 0x7fd4c05c0250>](0)"	[label=unstack];
	"[<_ast.Constant object at 0x7fd4c05c0220>, <_ast.Constant object at 0x7fd4c05c0250>](0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"ax(0)$0" -> "True(0)"	[label=plot];
	"ax(0)$0" -> "counts(0)$0"	[label=plot];
	"ax(0)$0" -> "bar(0)"	[label=plot];
	"ax(0)$0" -> "17(0)"	[label=plot];
	"ax(0)$0" -> "5(0)"	[label=plot];
	"bar(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"17(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"5(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"ax(0)$1" -> "ax(0)$0"	[label=set_xlabel];
	"ax(0)$1" -> "Count of Games in Bins of 10,000s(0)"	[label=set_xlabel];
	"Count of Games in Bins of 10,000s(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"ax(0)$2" -> "ax(0)$1"	[label=set_ylabel];
	"ax(0)$2" -> "Counts of Draws/Losses/Wins(0)"	[label=set_ylabel];
	"Counts of Draws/Losses/Wins(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"ax(0)$3" -> "ax(0)$2"	[label=set_title];
	"ax(0)$3" -> "Distribution of Results Vs Count of Games Played(0)"	[label=set_title];
	"Distribution of Results Vs Count of Games Played(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
	"model(0)$8" -> "model(0)$7"	[label=save];
	"model(0)$8" -> "my_model.h5(0)"	[label=save];
	"my_model.h5(0)" -> "a-self-learning-tic-tac-toe-program.ipynb"	[label=appearsIn];
}
