digraph "" {
	numpy -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"np(0)" -> numpy	[label=assignedFrom];
	"np(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	pandas -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"pd(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"pd(0)" -> pandas	[label=assignedFrom];
	seaborn -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"sns(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"sns(0)" -> seaborn	[label=assignedFrom];
	"matplotlib.pyplot" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"plt(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)" -> "matplotlib.pyplot"	[label=assignedFrom];
	warnings -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"warnings(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"warnings(0)" -> warnings	[label=assignedFrom];
	"warnings(0)$0" -> "warnings(0)"	[label=filterwarnings];
	"warnings(0)$0" -> "ignore(0)"	[label=filterwarnings];
	"ignore(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	os -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"os(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"os(0)" -> os	[label=assignedFrom];
	"print[19/0]" -> "os(0)"	[label=print];
	"print[19/0]" -> "../input(0)"	[label=print];
	"../input(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"train(0)$0" -> "pd(0)"	[label=read_csv];
	"train(0)$0" -> "../input/train.csv(0)"	[label=read_csv];
	"../input/train.csv(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[24/0]" -> "train(0)$0"	[label=print];
	"train(0)$1" -> "train(0)$0"	[label=head];
	"test(0)$0" -> "pd(0)"	[label=read_csv];
	"test(0)$0" -> "../input/test.csv(0)"	[label=read_csv];
	"../input/test.csv(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[28/0]" -> "test(0)$0"	[label=print];
	"test(0)$1" -> "test(0)$0"	[label=head];
	"Y_train(0)$0" -> "train(0)$1"	[label=assignedFrom];
	"Y_train(0)$0" -> "label(0)"	[label=assignedFrom];
	"label(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"X_train(0)$0" -> "train(0)$1"	[label=drop];
	"X_train(0)$0" -> "[<_ast.Constant object at 0x7fd5007f04f0>](0)"	[label=drop];
	"X_train(0)$0" -> "1(0)"	[label=drop];
	"[<_ast.Constant object at 0x7fd5007f04f0>](0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"1(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$0" -> "plt(0)"	[label=figure];
	"g(0)$0" -> "sns(0)"	[label=countplot];
	"g(0)$0" -> "Y_train(0)$0"	[label=countplot];
	"g(0)$0" -> "icefire(0)"	[label=countplot];
	"icefire(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$1" -> "plt(0)$0"	[label=title];
	"plt(0)$1" -> "Number of digit classes(0)"	[label=title];
	"Number of digit classes(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Y_train(0)$1" -> "Y_train(0)$0"	[label=value_counts];
	"img(0)$0" -> "X_train(0)$0"	[label=as_matrix];
	"img(0)$0" -> "0(0)"	[label=as_matrix];
	"0(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"img(0)$1" -> "img(0)$0"	[label=reshape];
	"img(0)$1" -> "28(0)"	[label=reshape];
	"28(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$2" -> "plt(0)$1"	[label=imshow];
	"plt(0)$2" -> "img(0)$1"	[label=imshow];
	"plt(0)$3" -> "train(0)$1"	[label=title];
	"plt(0)$3" -> "0(0)"	[label=title];
	"plt(0)$3" -> "plt(0)$2"	[label=title];
	"plt(0)$4" -> "plt(0)$3"	[label=axis];
	"plt(0)$4" -> "off(0)"	[label=axis];
	"off(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$5" -> "plt(0)$4"	[label=show];
	"img(0)$2" -> "X_train(0)$0"	[label=as_matrix];
	"img(0)$2" -> "3(0)"	[label=as_matrix];
	"3(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"img(0)$3" -> "28(0)"	[label=reshape];
	"img(0)$3" -> "img(0)$2"	[label=reshape];
	"plt(0)$6" -> "plt(0)$5"	[label=imshow];
	"plt(0)$6" -> "img(0)$3"	[label=imshow];
	"plt(0)$7" -> "train(0)$1"	[label=title];
	"plt(0)$7" -> "0(0)"	[label=title];
	"plt(0)$7" -> "3(0)"	[label=title];
	"plt(0)$7" -> "plt(0)$6"	[label=title];
	"plt(0)$8" -> "off(0)"	[label=axis];
	"plt(0)$8" -> "plt(0)$7"	[label=axis];
	"plt(0)$9" -> "plt(0)$8"	[label=show];
	"X_train(0)$1" -> "X_train(0)$0"	[label=Div];
	"X_train(0)$1" -> "255.0(0)"	[label=Div];
	"255.0(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"test(0)$2" -> "test(0)$1"	[label=Div];
	"test(0)$2" -> "255.0(0)"	[label=Div];
	"x_train shape: (0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[56/0]" -> "X_train(0)$1"	[label=print];
	"print[56/0]" -> "x_train shape: (0)"	[label=print];
	"test shape: (0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[57/0]" -> "test(0)$2"	[label=print];
	"print[57/0]" -> "test shape: (0)"	[label=print];
	"X_train(0)$2" -> "1(0)"	[label=reshape];
	"X_train(0)$2" -> "28(0)"	[label=reshape];
	"X_train(0)$2" -> "X_train(0)$1"	[label=reshape];
	"test(0)$3" -> "1(0)"	[label=reshape];
	"test(0)$3" -> "28(0)"	[label=reshape];
	"test(0)$3" -> "test(0)$2"	[label=reshape];
	"print[61/0]" -> "x_train shape: (0)"	[label=print];
	"print[61/0]" -> "X_train(0)$2"	[label=print];
	"print[62/0]" -> "test shape: (0)"	[label=print];
	"print[62/0]" -> "test(0)$3"	[label=print];
	"keras.utils.np_utils" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	to_categorical -> "keras.utils.np_utils"	[label=importedBy];
	"to_categorical(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"to_categorical(0)" -> to_categorical	[label=assignedFrom];
	"Y_train(0)$2" -> "Y_train(0)$1"	[label=to_categorical];
	"Y_train(0)$2" -> "10(0)"	[label=to_categorical];
	"10(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"sklearn.model_selection" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	train_test_split -> "sklearn.model_selection"	[label=importedBy];
	"train_test_split(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"train_test_split(0)" -> train_test_split	[label=assignedFrom];
	"X_train(0)$3" -> "X_train(0)$2"	[label=train_test_split];
	"X_train(0)$3" -> "Y_train(0)$3"	[label=train_test_split];
	"X_train(0)$3" -> "0.1(0)"	[label=train_test_split];
	"X_train(0)$3" -> "2(0)"	[label=train_test_split];
	"Y_train(0)$3" -> "X_train(0)$2"	[label=train_test_split];
	"Y_train(0)$3" -> "Y_train(0)$3"	[label=train_test_split];
	"Y_train(0)$3" -> "0.1(0)"	[label=train_test_split];
	"Y_train(0)$3" -> "2(0)"	[label=train_test_split];
	"0.1(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"2(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"X_val(0)$0" -> "X_train(0)$2"	[label=train_test_split];
	"X_val(0)$0" -> "Y_train(0)$3"	[label=train_test_split];
	"X_val(0)$0" -> "0.1(0)"	[label=train_test_split];
	"X_val(0)$0" -> "2(0)"	[label=train_test_split];
	"Y_val(0)$0" -> "X_train(0)$2"	[label=train_test_split];
	"Y_val(0)$0" -> "Y_train(0)$3"	[label=train_test_split];
	"Y_val(0)$0" -> "0.1(0)"	[label=train_test_split];
	"Y_val(0)$0" -> "2(0)"	[label=train_test_split];
	"x_train shape(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[69/0]" -> "X_train(0)$3"	[label=print];
	"print[69/0]" -> "x_train shape(0)"	[label=print];
	"x_test shape(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[70/0]" -> "X_val(0)$0"	[label=print];
	"print[70/0]" -> "x_test shape(0)"	[label=print];
	"y_train shape(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[71/0]" -> "Y_train(0)$3"	[label=print];
	"print[71/0]" -> "y_train shape(0)"	[label=print];
	"y_test shape(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"print[72/0]" -> "Y_val(0)$0"	[label=print];
	"print[72/0]" -> "y_test shape(0)"	[label=print];
	"plt(0)$10" -> "0(0)"	[label=imshow];
	"plt(0)$10" -> "plt(0)$9"	[label=imshow];
	"plt(0)$10" -> "X_train(0)$3"	[label=imshow];
	"plt(0)$10" -> "2(0)"	[label=imshow];
	"plt(0)$11" -> "plt(0)$10"	[label=show];
	"sklearn.metrics" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	confusion_matrix -> "sklearn.metrics"	[label=importedBy];
	"confusion_matrix(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"confusion_matrix(0)" -> confusion_matrix	[label=assignedFrom];
	itertools -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	"itertools(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"itertools(0)" -> itertools	[label=assignedFrom];
	"keras.models" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	Sequential -> "keras.models"	[label=importedBy];
	"Sequential(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Sequential(0)" -> Sequential	[label=assignedFrom];
	"keras.layers" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	Dense -> "keras.layers"	[label=importedBy];
	"Dense(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Dense(0)" -> Dense	[label=assignedFrom];
	Dropout -> "keras.layers"	[label=importedBy];
	"Dropout(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Dropout(0)" -> Dropout	[label=assignedFrom];
	Flatten -> "keras.layers"	[label=importedBy];
	"Flatten(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Flatten(0)" -> Flatten	[label=assignedFrom];
	Conv2D -> "keras.layers"	[label=importedBy];
	"Conv2D(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Conv2D(0)" -> Conv2D	[label=assignedFrom];
	MaxPool2D -> "keras.layers"	[label=importedBy];
	"MaxPool2D(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"MaxPool2D(0)" -> MaxPool2D	[label=assignedFrom];
	"keras.optimizers" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	RMSprop -> "keras.optimizers"	[label=importedBy];
	"RMSprop(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"RMSprop(0)" -> RMSprop	[label=assignedFrom];
	Adam -> "keras.optimizers"	[label=importedBy];
	"Adam(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Adam(0)" -> Adam	[label=assignedFrom];
	"keras.preprocessing.image" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	ImageDataGenerator -> "keras.preprocessing.image"	[label=importedBy];
	"ImageDataGenerator(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"ImageDataGenerator(0)" -> ImageDataGenerator	[label=assignedFrom];
	"keras.callbacks" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=importedBy];
	ReduceLROnPlateau -> "keras.callbacks"	[label=importedBy];
	"ReduceLROnPlateau(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"ReduceLROnPlateau(0)" -> ReduceLROnPlateau	[label=assignedFrom];
	"model(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$0" -> "1(0)"	[label=add];
	"model(0)$0" -> "28(0)"	[label=add];
	"model(0)$0" -> "Conv2D(0)"	[label=add];
	"model(0)$0" -> "model(0)"	[label=add];
	"model(0)$0" -> "8(0)"	[label=add];
	"model(0)$0" -> "5(0)"	[label=add];
	"model(0)$0" -> "Same(0)"	[label=add];
	"model(0)$0" -> "relu(0)"	[label=add];
	"8(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"5(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"Same(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"relu(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$1" -> "2(0)"	[label=add];
	"model(0)$1" -> "MaxPool2D(0)"	[label=add];
	"model(0)$1" -> "model(0)$0"	[label=add];
	"model(0)$2" -> "Dropout(0)"	[label=add];
	"model(0)$2" -> "model(0)$1"	[label=add];
	"model(0)$2" -> "0.25(0)"	[label=add];
	"0.25(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$3" -> "3(0)"	[label=add];
	"model(0)$3" -> "Conv2D(0)"	[label=add];
	"model(0)$3" -> "Same(0)"	[label=add];
	"model(0)$3" -> "relu(0)"	[label=add];
	"model(0)$3" -> "model(0)$2"	[label=add];
	"model(0)$3" -> "16(0)"	[label=add];
	"16(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$4" -> "2(0)"	[label=add];
	"model(0)$4" -> "MaxPool2D(0)"	[label=add];
	"model(0)$4" -> "model(0)$3"	[label=add];
	"model(0)$5" -> "Dropout(0)"	[label=add];
	"model(0)$5" -> "0.25(0)"	[label=add];
	"model(0)$5" -> "model(0)$4"	[label=add];
	"model(0)$6" -> "Flatten(0)"	[label=add];
	"model(0)$6" -> "model(0)$5"	[label=add];
	"model(0)$7" -> "Dense(0)"	[label=add];
	"model(0)$7" -> "relu(0)"	[label=add];
	"model(0)$7" -> "model(0)$6"	[label=add];
	"model(0)$7" -> "256(0)"	[label=add];
	"256(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$8" -> "Dropout(0)"	[label=add];
	"model(0)$8" -> "model(0)$7"	[label=add];
	"model(0)$8" -> "0.5(0)"	[label=add];
	"0.5(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$9" -> "10(0)"	[label=add];
	"model(0)$9" -> "Dense(0)"	[label=add];
	"model(0)$9" -> "model(0)$8"	[label=add];
	"model(0)$9" -> "softmax(0)"	[label=add];
	"softmax(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"0.001(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"optimizer(0)$0" -> "0.001(0)"	[label=Adam];
	"optimizer(0)$0" -> "0.9(0)"	[label=Adam];
	"optimizer(0)$0" -> "0.999(0)"	[label=Adam];
	"0.9(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"0.999(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"model(0)$10" -> "model(0)$9"	[label=compile];
	"epochs(0)$0" -> "10(0)"	[label=assignedFrom];
	"250(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"batch_size(0)$0" -> "250(0)"	[label=assignedFrom];
	"False(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"datagen(0)$0" -> "0.5(0)"	[label=ImageDataGenerator];
	"datagen(0)$0" -> "False(0)"	[label=ImageDataGenerator];
	"datagen(0)$1" -> "X_train(0)$3"	[label=fit];
	"datagen(0)$1" -> "datagen(0)$0"	[label=fit];
	"history(0)$0" -> "0(0)"	[label=fit_generator];
	"history(0)$0" -> "X_train(0)$3"	[label=fit_generator];
	"history(0)$0" -> "Y_train(0)$3"	[label=fit_generator];
	"history(0)$0" -> "X_val(0)$0"	[label=fit_generator];
	"history(0)$0" -> "Y_val(0)$0"	[label=fit_generator];
	"history(0)$0" -> "model(0)$10"	[label=fit_generator];
	"history(0)$0" -> "epochs(0)$0"	[label=fit_generator];
	"history(0)$0" -> "batch_size(0)$0"	[label=fit_generator];
	"history(0)$0" -> "datagen(0)$1"	[label=fit_generator];
	"plt(0)$12" -> "plt(0)$11"	[label=plot];
	"plt(0)$12" -> "history(0)$0"	[label=plot];
	"plt(0)$12" -> "val_loss(0)"	[label=plot];
	"val_loss(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$13" -> "plt(0)$12"	[label=title];
	"plt(0)$13" -> "Test Loss(0)"	[label=title];
	"Test Loss(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$14" -> "plt(0)$13"	[label=xlabel];
	"plt(0)$14" -> "Number of Epochs(0)"	[label=xlabel];
	"Number of Epochs(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$15" -> "plt(0)$14"	[label=ylabel];
	"plt(0)$15" -> "Loss(0)"	[label=ylabel];
	"Loss(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$16" -> "plt(0)$15"	[label=legend];
	"plt(0)$17" -> "plt(0)$16"	[label=show];
	"Y_pred(0)$0" -> "X_val(0)$0"	[label=predict];
	"Y_pred(0)$0" -> "model(0)$10"	[label=predict];
	"Y_pred_classes(0)$0" -> "np(0)"	[label=argmax];
	"Y_pred_classes(0)$0" -> "1(0)"	[label=argmax];
	"Y_pred_classes(0)$0" -> "Y_pred(0)$0"	[label=argmax];
	"Y_true(0)$0" -> "np(0)"	[label=argmax];
	"Y_true(0)$0" -> "1(0)"	[label=argmax];
	"Y_true(0)$0" -> "Y_val(0)$0"	[label=argmax];
	"confusion_mtx(0)$0" -> "Y_pred_classes(0)$0"	[label=confusion_matrix];
	"confusion_mtx(0)$0" -> "Y_true(0)$0"	[label=confusion_matrix];
	"f(0)$0" -> "8(0)"	[label=subplots];
	"f(0)$0" -> "plt(0)$17"	[label=subplots];
	"ax(0)$0" -> "8(0)"	[label=subplots];
	"ax(0)$0" -> "plt(0)$17"	[label=subplots];
	"sns(0)$0" -> "sns(0)"	[label=heatmap];
	"sns(0)$0" -> "confusion_mtx(0)$0"	[label=heatmap];
	"plt(0)$18" -> "plt(0)$17"	[label=xlabel];
	"plt(0)$18" -> "Predicted Label(0)"	[label=xlabel];
	"Predicted Label(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$19" -> "plt(0)$18"	[label=ylabel];
	"plt(0)$19" -> "True Label(0)"	[label=ylabel];
	"True Label(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$20" -> "plt(0)$19"	[label=title];
	"plt(0)$20" -> "Confusion Matrix(0)"	[label=title];
	"Confusion Matrix(0)" -> "convolutional-neural-network-cnn-tutorial.ipynb"	[label=appearsIn];
	"plt(0)$21" -> "plt(0)$20"	[label=show];
}
